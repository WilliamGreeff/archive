[
    {
        "content": "<p>I just finished making an <code>assumption</code> variation that optionally suggests the <code>exact ...</code> to the user. I'd love to receive any and all feedback and critiques about my code.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">my_assumption</span> <span class=\"o\">:</span>\n  <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">local_context</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mfirst</span> <span class=\"n\">exact</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>    <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">mfirst</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">fmt</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">trace_fmt</span> <span class=\"o\">(</span><span class=\"n\">format</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"s2\">&quot;Try this: exact &quot;</span> <span class=\"n\">fmt</span><span class=\"o\">)</span> <span class=\"n\">return</span>\n</code></pre></div>",
        "id": 209572547,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599687826
    },
    {
        "content": "<p>I would use <code>\"?\"</code> instead of <code>\"!\"</code></p>",
        "id": 209572730,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599687951
    },
    {
        "content": "<p>What does <code>trace_fmt</code> do?</p>",
        "id": 209572738,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599687960
    },
    {
        "content": "<p>A few things bother me, particularly:</p>\n<ul>\n<li>the pattern match on <code>option unit</code> that is happening to see if <code>!</code> was provided</li>\n<li>the (kind of, but not really) duplicate code, that is, <code>local_context &gt;&gt;= list.mfirst exact</code> is kind of written twice</li>\n<li>the way <code>Try this: exact </code> is being composed with <code>fmt</code> (it seems a bit convoluted)</li>\n</ul>",
        "id": 209572777,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599687964
    },
    {
        "content": "<p><code>trace_fmt</code> is what <code>tactic.trace</code> calls. Its a primitive that actually does the printing.</p>",
        "id": 209572802,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599687989
    },
    {
        "content": "<p>What about <code>trace!\"Try this: exact  {pp e}\"</code> instead of the <code>trace_fmt</code> line?</p>",
        "id": 209572843,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599688031
    },
    {
        "content": "<p>The hardest to understand part is its last argument (<code>trace_fmt : format → (unit → α) → α</code>). The last argument is a <em>continuation</em>.</p>",
        "id": 209572848,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599688039
    },
    {
        "content": "<p>Also, this should reduce repetition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">my_assumption</span> <span class=\"o\">(</span><span class=\"n\">verb</span> <span class=\"o\">:</span>  <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">mfirst</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">when</span> <span class=\"n\">verb</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n      <span class=\"n\">fmt</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n      <span class=\"n\">trace</span><span class=\"bp\">!</span><span class=\"s2\">&quot;...&quot;</span>\n</code></pre></div>",
        "id": 209572933,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599688100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60assumption.60.20with.20suggestions/near/209572843\">said</a>:</p>\n<blockquote>\n<p>What about <code>trace!\"Try this: exact  {pp e}\"</code> instead of the <code>trace_fmt</code> line?</p>\n</blockquote>\n<p>Wonderful! It looks a lot better than manually calling <code>trace_fmt</code>!</p>",
        "id": 209572962,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599688129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60assumption.60.20with.20suggestions/near/209572730\">said</a>:</p>\n<blockquote>\n<p>I would use <code>\"?\"</code> instead of <code>\"!\"</code></p>\n</blockquote>\n<p>I thought about that, but didn't remember any core/mathlib tactic that uses an optional <code>?</code>, although that sounds familiar.</p>",
        "id": 209572985,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599688161
    },
    {
        "content": "<p><code>tidy</code> and <code>rcases</code> use this convention (I had to grep for the examples, I thought it was more common). That's the preferred convention I believe</p>",
        "id": 209573111,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599688248
    },
    {
        "content": "<p>Thank you for the feedback. The tactic already look a lot better.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">my_assumption</span> <span class=\"o\">(</span><span class=\"n\">verb</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;?&quot;</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">mfirst</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">when</span> <span class=\"n\">verb</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"err\">$</span> <span class=\"n\">trace</span><span class=\"bp\">!</span><span class=\"s2\">&quot;Try this: exact {pp e}&quot;</span>\n</code></pre></div>",
        "id": 209573241,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599688329
    },
    {
        "content": "<p>Where can I find documentation about <code>trace!</code>. It seems to be internal, since I can't jump to the definition. Also, couldn't find anything with a quick search on the mathlib docs.</p>",
        "id": 209573304,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599688385
    },
    {
        "content": "<p>This is where it's defined: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/core.lean#L2045\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/core.lean#L2045</a>. It's a macro</p>",
        "id": 209573550,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599688548
    }
]