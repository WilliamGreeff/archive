[
    {
        "content": "<p>I'm trying to use permutation <code>perm</code>, for which I'm trying to import <code>data</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cayley</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">perm</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>But  Lean gives me this error under <code>import algebra</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">file</span> <span class=\"err\">&#39;</span><span class=\"n\">data&#39;</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">search</span> <span class=\"n\">path</span>\n<span class=\"n\">Use</span> <span class=\"err\">&#39;</span><span class=\"n\">lean</span> <span class=\"c1\">--path&#39; to see where lean is looking, or https://leanprover-community.github.io/file-not-found.html for more</span>\n</code></pre></div>\n\n\n<p>and this one under <code>import data</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data</span>\n<span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">resolve</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data</span>\n</code></pre></div>",
        "id": 207710602,
        "sender_full_name": "Chris M",
        "timestamp": 1598077823
    },
    {
        "content": "<p>You want <code>import data.equiv</code>, and likewise for algebra a filename after the .</p>",
        "id": 207710731,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598078086
    },
    {
        "content": "<p>Probably <code> algebra.group.basic</code></p>",
        "id": 207710792,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598078177
    },
    {
        "content": "<p>This is what I have now:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">group_action</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cayley</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">perm</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">=</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>But this gives the same error as before, now regarding <code>data.equiv</code> instead.</p>\n<p>It works if I remove <code>import data.equiv</code> and instead write <code>theorem cayley (G:Type*) [h:group G] : ∃ f: G →* equiv.perm G, f=f := sorry</code>, but I don't wanna write equiv.perm all the time.</p>",
        "id": 207712477,
        "sender_full_name": "Chris M",
        "timestamp": 1598081441
    },
    {
        "content": "<p>I think you are confused about <code>import</code> and <code>open</code>.</p>",
        "id": 207713667,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598083771
    },
    {
        "content": "<p><code>import</code> is for importing the content of files, but have no bearing on namespaces or how you refer to identifiers.</p>",
        "id": 207713672,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598083796
    },
    {
        "content": "<p><code>open</code> opens namespaces, so you can omit prefixes of fully qualified names.</p>",
        "id": 207713711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598083810
    },
    {
        "content": "<p>Something you might consider doing is to define a homomorphism rather than proving existence:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">cayley</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">perm</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>This is stronger because then proofs about <code>cayley</code> can make use of how it was defined.  And, the fact you defined it means it exists.</p>",
        "id": 207714099,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598084556
    }
]