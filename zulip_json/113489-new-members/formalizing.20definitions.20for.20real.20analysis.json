[
    {
        "content": "<p>I was wondering if someone might be able to suggest the best way to formalize the following, especially the definition of a partition.</p>\n<p>1.1 Definition: A partition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> of a closed interval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> is a finite sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_{0}, x_{1}, \\ldots, x_{n})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mo>&lt;</mo><msub><mi>x</mi><mn>1</mn></msub><mo>&lt;</mo><mo>…</mo><mo>&lt;</mo><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a = x_{0} &lt; x_{1} &lt; \\ldots &lt; x_{n} = b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>. The norm of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>, denoted <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">∣</mo><mrow><mo fence=\"true\">∣</mo><mi>P</mi><mo fence=\"true\">∣</mo></mrow><mo fence=\"true\">∣</mo></mrow><annotation encoding=\"application/x-tex\">\\left|\\left|P\\right|\\right|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">∣</span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose delimcenter\" style=\"top:0em;\">∣</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">∣</span></span></span></span></span>, is defined by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">∣</mo><mrow><mo fence=\"true\">∣</mo><mi>P</mi><mo fence=\"true\">∣</mo></mrow><mo fence=\"true\">∣</mo></mrow><mo>=</mo><msub><mo><mi>max</mi><mo>⁡</mo></mo><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow></msub><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\left|\\left|P\\right|\\right| = \\max_{1 \\leq i \\leq n} (x_{i} - x_{i-1})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">∣</span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose delimcenter\" style=\"top:0em;\">∣</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">∣</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">max</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>1.2 Definition: Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P = (x_{0}, \\ldots, x_{n})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> be a partition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span>, and let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> be defined on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span>. For each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">i = 1, \\ldots, n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">x_{i}*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61528em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∗</span></span></span></span> be an arbitrary point in the interval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[x_{i-1}, x_{i}]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>. Then any sum of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>P</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>∗</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(f, P) = \\sum_{i=1}^{n} f(x_{i}*)(x_{i} - x_{i-1})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∗</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is called a Riemann sum of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> relative to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>.</p>\n<p>1.3 Definition: A function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is Riemann integrable on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> if there is a real number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> such that for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\epsilon &gt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">ϵ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, there exists a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\delta &gt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> such that for any partition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> satisfying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">∣</mo><mrow><mo fence=\"true\">∣</mo><mi>P</mi><mo fence=\"true\">∣</mo></mrow><mo fence=\"true\">∣</mo></mrow><mo>&lt;</mo><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\left|\\left|P\\right|\\right| &lt; \\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">∣</span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose delimcenter\" style=\"top:0em;\">∣</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">∣</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>, and for any Riemann sum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>P</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(f, P)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> relative to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">∣</mo><mi>R</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>P</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>R</mi><mo fence=\"true\">∣</mo></mrow><mo>&lt;</mo><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\left|R(f,P) - R\\right| &lt; \\epsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose delimcenter\" style=\"top:0em;\">∣</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span>.</p>\n<p>1.4 Definition: A function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>, defined on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span>, is a step function if there is a partition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P = (x_{0}, x_{1}, \\ldots, x_{n})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is constant on each open subinterval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_{i-1}, x_{i})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">i = 1, \\ldots, n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</p>",
        "id": 204963923,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595623172
    },
    {
        "content": "<p>just don't use backticks</p>",
        "id": 204964033,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595623217
    },
    {
        "content": "<p>and use double-dollar-signs, i.e. <code>$$\\LaTeX$$</code> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding=\"application/x-tex\">\\LaTeX</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.89883em;vertical-align:-0.2155em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">L</span><span class=\"mspace\" style=\"margin-right:-0.36em;\"></span><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68333em;\"><span style=\"top:-2.904999em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord\"><span class=\"mord textrm mtight sizing reset-size6 size3\">A</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.15em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">T</span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46782999999999997em;\"><span style=\"top:-2.7845em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord textrm\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2155em;\"><span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.125em;\"></span><span class=\"mord textrm\">X</span></span></span></span></span></span></p>",
        "id": 204964053,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595623236
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 204964275,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595623344
    },
    {
        "content": "<p>What theorems do you want to prove and how do the proofs go?</p>",
        "id": 204965063,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595623759
    },
    {
        "content": "<p>I would probably be inclined to go for a fairly literal translation (and, in particular, not invent a custom inductive type for a partition) in order to avoid reinventing lots of finset sum stuff.</p>",
        "id": 204965331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595623892
    },
    {
        "content": "<p>I'm going through the exercises in the first chapter of \"An Introduction to Lebesgue Integration and Fourier Series\" by Howard J. Wilcox and David L. Myers. I'm attaching what I have done in latex. <a href=\"/user_uploads/3121/eC42X4k1t9MAH3_5jZn_Kh3m/myers.dvi\">myers.dvi</a></p>",
        "id": 204965492,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595623966
    },
    {
        "content": "<p>(do you know that mathlib has lebesgue integration?)</p>",
        "id": 204965627,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595624024
    },
    {
        "content": "<p>I saw that directory, but I didn't understand it.</p>",
        "id": 204965775,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595624101
    },
    {
        "content": "<p>yury gave some tutorials about this part of the library at lftcm2020</p>",
        "id": 204965870,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595624155
    },
    {
        "content": "<p>there are exercises you can get with <code>leanproject get lftcm2020</code> and a <a href=\"https://www.youtube.com/watch?v=p8Etfv1_VqQ\">video lecture</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"p8Etfv1_VqQ\" href=\"https://www.youtube.com/watch?v=p8Etfv1_VqQ\"><img src=\"https://i.ytimg.com/vi/p8Etfv1_VqQ/default.jpg\"></a></div>",
        "id": 204965936,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595624172
    },
    {
        "content": "<p>the rest of the talks are on the same youtube channel :)</p>",
        "id": 204966046,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595624248
    },
    {
        "content": "<p>Cool. I'll take a look.</p>",
        "id": 204966084,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595624269
    },
    {
        "content": "<p>The ultimate aim of the work described here would be to formally define an integral which is strictly weaker than an integral we have already. However, if you write the proofs in tactic mode with comments then it would be an excellent pedagogical resource.</p>",
        "id": 204967671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595625259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span> if you're thinking of developing the theory with pedagogy in mind then you might want to make new notation for a partition. Reid's point is a partition is just a finset containing a and b, and that the moment things get tough you are going to be unfolding the definition of a partition because all the lemmas about finsets which you'll need won't be rewritable until we can see the finset.</p>",
        "id": 204967913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595625441
    },
    {
        "content": "<p>Yes, it is for pedagogy. Sorry, I'm not sure if you are saying if I should or should not define it as a finset in lean.</p>",
        "id": 204968289,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595625647
    },
    {
        "content": "<p>If you're trying to write golfy term mode proofs for mathlib, this (making a new definition) will become tedious. But if you're happy to write tactic mode proofs then this will not be a bother at all. Taking Reid's argument to its natural conclusion, the lean idiomatic way would be to think of a partition as a nonempty finset of reals and you then define a and b to be the min and max. No new definition needed. The computer scientists would argue that the definition in your maths book is lousy because it's inconvenient to use in term mode. They say the fewer definitions the better. But I'm coming to the conclusion that there's some merit in ignoring the computer scientists and developing things the normal maths way. I just did three live streams about topological spaces and compact sets etc and I never once used a filter, I did it all the way I was taught. It's not going in mathlib but it's instructive for mathematicians</p>",
        "id": 204968308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595625662
    },
    {
        "content": "<p>What are \"golfy term mode proofs\"?</p>",
        "id": 204968641,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595625896
    },
    {
        "content": "<p>Does that just mean really compact proofs or something more?</p>",
        "id": 204968686,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595625930
    },
    {
        "content": "<p>I really meant something like <code>(n : nat) (x : fin (n+1) -&gt; real) (h0 : x 0 = a) ...</code></p>",
        "id": 204968775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595625987
    },
    {
        "content": "<p>I would suggest trying to formulate and prove a theorem about telescoping sums which amounts to the calculation of a Riemann sum for a constant function</p>",
        "id": 204968806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595626022
    },
    {
        "content": "<p>Is that code a suggestion for the definition of a partition?</p>",
        "id": 204968910,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595626113
    },
    {
        "content": "<p>Yes</p>",
        "id": 204968991,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595626180
    },
    {
        "content": "<p>I see.</p>",
        "id": 204969090,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595626232
    },
    {
        "content": "<p>Why this rather than a finite set of reals? I haven't worked with fin before.</p>",
        "id": 204970361,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595627296
    },
    {
        "content": "<p>You can think of <code>fin n \\to \\R</code> as an ordered n-tuple of real numbers.</p>",
        "id": 204970407,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595627346
    },
    {
        "content": "<p>So the difference is to make it ordered?</p>",
        "id": 204970434,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595627372
    },
    {
        "content": "<p>It might help to see what the full definition in Lean would look like.</p>",
        "id": 204970565,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595627465
    },
    {
        "content": "<p>Yes. Mathematically, it's the difference between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_1,\\ldots,x_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{x_1,\\ldots,x_n\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 204970575,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595627475
    },
    {
        "content": "<p>Are we defining a proposition like, is_partition, or the partition itself?</p>",
        "id": 204971239,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595628069
    },
    {
        "content": "<p>I thought a bit more about this and I agree with Reid. The disadvantage with a finset is that there is no good interface to access the i'th element. Lists would also be a pain because you probably won't be concatenating them or appending to the left, you will be mostly using them via their i'th element, so Reid's suggestion of a map from fin(n+1) (to ensure non-emptiness) to real is I think the best. Make a new definition! When you use it you'll figure out what API you'll need for it. I would love to watch the progress of this one.</p>",
        "id": 204971407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595628239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/204970575\">said</a>:</p>\n<blockquote>\n<p>Yes. Mathematically, it's the difference between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_1,\\ldots,x_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{x_1,\\ldots,x_n\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>.</p>\n</blockquote>\n<p>Wait, with this definition I don't see where's the proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>&lt;</mo><msub><mi>x</mi><mn>1</mn></msub><mo>&lt;</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">x_0 &lt; x_1 &lt; \\ldots </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span>. Isn't it just a tuple, with no order between the values?</p>",
        "id": 204971452,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595628249
    },
    {
        "content": "<p>You can still do it inductively with <code>fin</code>.</p>",
        "id": 204971479,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595628268
    },
    {
        "content": "<p>Since <code>fin.tail</code> is a thing.</p>",
        "id": 204971496,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595628285
    },
    {
        "content": "<p>You can define a partition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a,b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> of length n as the data of a partition of length <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a_1,b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>∈</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a_1 \\in (a,b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 204971538,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595628350
    },
    {
        "content": "<p>And defining the empty partition is easy :)</p>",
        "id": 204971598,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595628380
    },
    {
        "content": "<p>That's what I thought. I had actually started doing that myself some time ago.<br>\nAt that time I didn't know about <code>fin.tail</code>.</p>",
        "id": 204971614,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595628395
    },
    {
        "content": "<p>To do this inductive definition, you just need to get the element in <code>fin (n+1)</code> corresponding to the value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, which is <code>(0 : fin n).succ</code>, I guess.</p>",
        "id": 204971670,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595628453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259857\">@Dan Stanescu</span> yeah you have to add a proof that x_i &lt; x_{i+1}. Reid wrote <code>...</code>, he didn't finish the definition. He did the data part and left the other mathematicians to do the proof part.</p>",
        "id": 204971774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595628523
    },
    {
        "content": "<p>The rest is just the same, translate \"for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>&lt;</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">x_i &lt; x_{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>\" as something involving <code>∀ i : fin n, ...</code> or whatever.</p>",
        "id": 204971827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595628574
    },
    {
        "content": "<p>Maybe it would be convenient to extend <code>x</code> to all of <code>nat</code> or even <code>int</code> by setting it to <code>a</code>/<code>b</code> outside the range <code>fin n</code></p>",
        "id": 204971925,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595628637
    },
    {
        "content": "<p>Unfortunately, <code>(i : fin n).succ</code> has type <code>fin (n+1)</code>.</p>",
        "id": 204971930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595628641
    },
    {
        "content": "<p>I'm not sure that it will help to do the definition inductively. You're going to have a lot of lemmas where P is a partition and i is less than n and you want to talk about the interval [x_i, x_{i+1}]. If you make some fancy inductive definition then you'll have to work to get to the x_i</p>",
        "id": 204971934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595628646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/204971930\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, <code>(i : fin n).succ</code> has type <code>fin (n+1)</code>.</p>\n</blockquote>\n<p>Yes, which is the input of <code>x</code></p>",
        "id": 204971954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595628666
    },
    {
        "content": "<p>Oh right :)</p>",
        "id": 204971963,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595628679
    },
    {
        "content": "<p>So yes, I agree this is the best option :)</p>",
        "id": 204971987,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595628707
    },
    {
        "content": "<p>You do have to do some cast to turn <code>i : fin n</code> to <code>i : fin (n+1)</code></p>",
        "id": 204972054,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595628736
    },
    {
        "content": "<p>Doesn't this exist as a coersion?</p>",
        "id": 204972076,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595628758
    },
    {
        "content": "<p>Not sure but it certainly exists in some form</p>",
        "id": 204972128,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595628826
    },
    {
        "content": "<p>I'm not sure I follow, but I think what Kevin said makes sense?</p>",
        "id": 204972183,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595628849
    },
    {
        "content": "<p>A good place to ask, would Riemann integrals still have a place somewhere in <code>mathlib</code> now? Same for Dedekind cuts.</p>",
        "id": 204972189,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595628855
    },
    {
        "content": "<p>Do you think it's worth storing the differences of the x_i, instead of the x_i themselves? Then you could use a <code>finsupp</code>.</p>",
        "id": 204972210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595628890
    },
    {
        "content": "<p>You're also going to need to talk about points <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">x_i &lt; x &lt; x_{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 204972388,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595629048
    },
    {
        "content": "<p>The partitions will at points probably need to be broken apart into sets of subintervals with sums over those sets.</p>",
        "id": 204972464,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595629107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/204972128\">said</a>:</p>\n<blockquote>\n<p>Not sure but it certainly exists in some form</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.cast_succ/src\">src#fin.cast_succ</a></p>",
        "id": 204972469,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595629123
    },
    {
        "content": "<p>You can have a finsupp from nat or int to nnreal and then just define the x_i as partial sums.</p>",
        "id": 204972495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595629165
    },
    {
        "content": "<p>Just in case it's helpful later.</p>",
        "id": 204972496,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595629165
    },
    {
        "content": "<p>Why is the function from fin (n + 1) \\to \\real and not \\nat \\to \\real?</p>",
        "id": 204972642,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595629297
    },
    {
        "content": "<p>Well that's what your informal definition said right?</p>",
        "id": 204972702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595629334
    },
    {
        "content": "<p>I guess I'm not sure what fin (n + 1) to real means? Is fin (n+1) a set?</p>",
        "id": 204972752,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595629388
    },
    {
        "content": "<p>It is the canonical type with n+1 elements</p>",
        "id": 204972759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595629400
    },
    {
        "content": "<p>did you ask lean what <code>fin (n+1)</code> means?</p>",
        "id": 204972773,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595629421
    },
    {
        "content": "<p>You need a list of reals with n+1 elements and you need easy access to the i'th element of the list, so why not store the list internally as a function from a type with n+1 elements with names like 0,1,2,..,n to the reals.</p>",
        "id": 204972842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595629462
    },
    {
        "content": "<p><code>fin m</code> is a type. A term of type <code>fin m</code> is a pair consisting of a natural number i and a proof that i&lt;m. You take a term of this type apart with <code>cases</code>, which gives you the pair (the number and the proof), and you build terms of this type with the <code>\\&lt;i, hi\\&gt;</code> constructor, where i is a nat and hi is a proof that i&lt;m.</p>",
        "id": 204972897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595629551
    },
    {
        "content": "<p>So fin m is not the type of finite ordered sets of natural numbers? I think I'm starting to see.</p>",
        "id": 204973300,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595629947
    },
    {
        "content": "<p>what would the <code>m</code> be doing there?</p>",
        "id": 204973341,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595630007
    },
    {
        "content": "<p><code>fin m</code> is exactly what I said it is. You can just <code>#check fin</code> if you have any more questions.</p>",
        "id": 204973342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595630010
    },
    {
        "content": "<p>or #print</p>",
        "id": 204973349,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595630027
    },
    {
        "content": "<p>to elaborate on kevin's point, there's a literal definition and it is not very long</p>",
        "id": 204973397,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595630050
    },
    {
        "content": "<p>sorry yeah -- <code>#check fin</code> and then right click on <code>fin</code> and go to definition!</p>",
        "id": 204973400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595630051
    },
    {
        "content": "<p>so if you read the definition you should either understand it or be able to find a part of it you don't understand</p>",
        "id": 204973413,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595630070
    },
    {
        "content": "<p>In math notation: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">fin</mi><mo>⁡</mo><mi>n</mi><mo>:</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><mi>x</mi><mo>&lt;</mo><mi>n</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\"> \\operatorname{fin} n := \\{ x \\in \\mathbb{N} \\ | \\ x &lt; n \\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mop\"><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">f</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">n</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\"> </span><span class=\"mord\">∣</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">}</span></span></span></span></p>",
        "id": 204973435,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595630104
    },
    {
        "content": "<p>except that it's a type, not a set</p>",
        "id": 204973442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595630116
    },
    {
        "content": "<p>yeah, in lean <code>fin n := { x : \\N // x &lt; n }</code></p>",
        "id": 204973458,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595630139
    },
    {
        "content": "<p>so in set theory you have <code>fin n \\subseteq fin (n+1)</code> but in Lean this doesn't even make sense because <code>\\subseteq</code> is for (sub)sets</p>",
        "id": 204973515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595630174
    },
    {
        "content": "<p>You can see why <code>fin n</code> isn't a sub-thing of <code>fin (n+1)</code> because to give a term of type <code>fin n</code> is to give a pair (i,h) with h a proof that i&lt;n, and so now you don't have immediate access to a proof that i&lt;(n+1), you'll have to make this proof, and that is the content of the canonical map from fin n to fin(n+1) (it's not \"the identity\" -- work needs to be done)</p>",
        "id": 204973611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595630284
    },
    {
        "content": "<p>I think I get it.</p>",
        "id": 204973653,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595630368
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 204973774,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595630513
    },
    {
        "content": "<p>I think it's a good exercise to write this definition. And here are some components which you'll need:</p>\n<ol>\n<li><code>fin.succ</code> is the successor function <code>fin n \\to fin (n+1)</code>.</li>\n<li>You can just write 0 for the first element of <code>fin (n+1)</code></li>\n<li>You can write <code>fin.last n</code> for the last element of <code>fin (n+1)</code>.</li>\n<li><code>fin.cast_succ</code> is the obvious inclusion <code>fin n \\to fin (n+1)</code> that Kevin mentioned.</li>\n</ol>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.last/src\">src#fin.last</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.succ/src\">src#fin.succ</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.cast_succ/src\">src#fin.cast_succ</a></p>",
        "id": 204973861,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595630576
    },
    {
        "content": "<p>This would be an inductive definition? Kevin mentioned that maybe an inductive definition might not be ideal?</p>",
        "id": 204974003,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595630731
    },
    {
        "content": "<p>No. This is if you want to follow Reid's suggestion.</p>",
        "id": 204974019,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595630752
    },
    {
        "content": "<p>To be honest, I'm not sure I have a good idea of what form that definition would take. What would be the final type returned?</p>",
        "id": 204974812,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595631569
    },
    {
        "content": "<p>The function?</p>",
        "id": 204974839,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595631598
    },
    {
        "content": "<p>You probably want a function with two real numbers <code>a</code> and <code>b</code> and the tuple <code>as : fin (n+1) \\to \\R</code> as inputs, and a <code>Prop</code> as the output. This should say that the <code>as</code> are the endpoints of the intervals of a partition of the interval with endpoints <code>a</code> and <code>b</code>.</p>",
        "id": 204975166,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595631920
    },
    {
        "content": "<p>Would it also take a proof that x_{0} &lt; x_{1} &lt; ... x_{n} as an input?</p>",
        "id": 204975367,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595632132
    },
    {
        "content": "<p>No, I guess that proof would be part of the returned Prop?</p>",
        "id": 204975412,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595632197
    },
    {
        "content": "<p>I was rather thinking about a function that takes <code>a</code>, <code>b</code> and <code>n</code> as inputs and returns a tuple.<br>\nAnd the proof(s) that the points in the tuple are ordered, the first is <code>a</code> etc.</p>",
        "id": 204975478,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595632232
    },
    {
        "content": "<p>But there are many partitions of any given interval</p>",
        "id": 204975502,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595632272
    },
    {
        "content": "<p>True.</p>",
        "id": 204975512,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595632288
    },
    {
        "content": "<p>I can still say things like \"Let P be a partition such that ||P|| &lt; \\delta\" right? I just need to prove that one exists, probably by constructing it?</p>",
        "id": 204975708,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595632497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"259857\">Dan Stanescu</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/204972189\">said</a>:</p>\n<blockquote>\n<p>A good place to ask, would Riemann integrals still have a place somewhere in <code>mathlib</code> now? Same for Dedekind cuts.</p>\n</blockquote>\n<p>I would say yes.</p>",
        "id": 204976128,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595633013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/204975708\">said</a>:</p>\n<blockquote>\n<p>I can still say things like \"Let P be a partition such that ||P|| &lt; \\delta\" right? I just need to prove that one exists, probably by constructing it?</p>\n</blockquote>\n<p>In my view you could, but I'm not sure you could do that if you have a <code>Prop</code>.  <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> ?</p>",
        "id": 204976213,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595633118
    },
    {
        "content": "<p>You can use this prop to define a subtype, etc.</p>",
        "id": 204976300,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595633229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/204976128\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"259857\">Dan Stanescu</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/204972189\">said</a>:</p>\n<blockquote>\n<p>A good place to ask, would Riemann integrals still have a place somewhere in <code>mathlib</code> now? Same for Dedekind cuts.</p>\n</blockquote>\n<p>I would say yes.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Where would you see them going to? The archive?</p>",
        "id": 204976537,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595633508
    },
    {
        "content": "<p>I think just a subdirectory called <code>riemann_integral</code> somewhere. Obviously it should have a thorough explanation in the module doc-strings that the rest of mathlib is build on top of more general constructions of integration.</p>",
        "id": 204976600,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595633567
    },
    {
        "content": "<p>Others may have other opinions on this, however.</p>",
        "id": 204976606,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595633579
    },
    {
        "content": "<p>Would it just be:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204976622,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595633604
    },
    {
        "content": "<p>We've got ZFC even though we're working in type theory, why not have Riemann integrals even though we're using Bochner? :-)</p>",
        "id": 204976625,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595633608
    },
    {
        "content": "<p>How do you make a type out of a proposition?</p>",
        "id": 204977770,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595635045
    },
    {
        "content": "<p>Propositions are types. Proofs of a proposition are terms of that type.</p>",
        "id": 204977838,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595635120
    },
    {
        "content": "<p>I guess I'm not sure how I say let P be a partition of [a, b] such that...</p>",
        "id": 204978101,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595635414
    },
    {
        "content": "<p>Is you define <code>is_partition {n} (a b : \\R) (as : fin (n+1) \\to \\R)</code> then you would have some <code>as</code> with a proof of that prop.</p>",
        "id": 204978290,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595635588
    },
    {
        "content": "<p>And the \"such that\" depends on what \"such that\" actually is.</p>",
        "id": 204978311,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595635624
    },
    {
        "content": "<p>If \"such that\" is another prop, just include a proof of that prop as a variable</p>",
        "id": 204978341,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595635682
    },
    {
        "content": "<p>I would make a <code>structure partition (a b : ℝ) := ...</code></p>",
        "id": 204978391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595635700
    },
    {
        "content": "<p>Also, how would you ever formalize the theorem that the riemann integral is weaker than the lebesgue integral without a formalization of the former?</p>",
        "id": 204979013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595636541
    },
    {
        "content": "<p>Same deal with dedekind reals being isomorphic to cauchy reals</p>",
        "id": 204979021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595636561
    },
    {
        "content": "<p>Turing machines are already in mathlib for this exact reason - even though the \"official\" foundations use partial recursive functions, we need the definition of a TM in order to state and prove the equivalence</p>",
        "id": 204979051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595636626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/204978391\">said</a>:</p>\n<blockquote>\n<p>I would make a <code>structure partition (a b : ℝ) := ...</code></p>\n</blockquote>\n<p>I'm not sure I follow. Does the structure use the proposition?</p>",
        "id": 204980758,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595638984
    },
    {
        "content": "<p><code>n</code>, <code>x</code>, all the <code>n &gt; 0</code> etc. would be fields.</p>",
        "id": 204980995,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595639330
    },
    {
        "content": "<p>I'm not sure I understand how a value of type partition would be guaranteed to be a partition. I'm looking through the documentation on structures here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html\">https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html</a></p>",
        "id": 204981342,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595639918
    },
    {
        "content": "<p>your structure will be a bundle of data and propositions about that data</p>",
        "id": 204981366,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595639988
    },
    {
        "content": "<p>the subtype notation used in the definition of <code>fin n</code> is an example of a <code>structure</code></p>",
        "id": 204981416,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640048
    },
    {
        "content": "<p>So one of the fields would be the is_partition proposition for example?</p>",
        "id": 204981425,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595640067
    },
    {
        "content": "<p>right, and if your proposition has an <code>and</code> in it, you probably want to break it into two fields</p>",
        "id": 204981430,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640107
    },
    {
        "content": "<p><code>fin n</code> is an example of a structure</p>",
        "id": 204981493,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640189
    },
    {
        "content": "<p>Can I then define a variable of type partition like I define a variable of type real, or do I have to always provide the fields?</p>",
        "id": 204981545,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595640245
    },
    {
        "content": "<p>it's morally equivalent (maybe literally defeq) to </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204981547,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640250
    },
    {
        "content": "<p>I don't understand your question</p>",
        "id": 204981554,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640279
    },
    {
        "content": "<p>I can say \"let P be a partition\" without constructing one?</p>",
        "id": 204981576,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595640341
    },
    {
        "content": "<p>Yes, e.g. if you have <code>structure partition (a b : ℝ) := ...</code> then later you can say</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">partition_eq_foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 204981620,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640370
    },
    {
        "content": "<p><code>partition</code> has type <code>\\R \\to \\R \\to Type</code></p>",
        "id": 204981629,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640414
    },
    {
        "content": "<p>Cool. Do I have to show that there is such a thing as a partition? That is, that the definition is not self contradicting?</p>",
        "id": 204981642,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595640463
    },
    {
        "content": "<p>no</p>",
        "id": 204981646,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640474
    },
    {
        "content": "<p>you could define a partition and then prove </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">partition_eq_foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 204981690,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640501
    },
    {
        "content": "<p>(If you PR it to mathlib, the <code>inhabited</code> linter might want you to construct an instance.)</p>",
        "id": 204981692,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595640513
    },
    {
        "content": "<p>of course it is a good idea to construct an example as part of convincing yourself the definition is correct</p>",
        "id": 204981702,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640541
    },
    {
        "content": "<p>you should also try to prove lemmas that are mathematically obvious</p>",
        "id": 204981712,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640564
    },
    {
        "content": "<p>Interesting.</p>",
        "id": 204981772,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595640638
    },
    {
        "content": "<p>this is the same as saying that you don't have to prove a proposition in order to talk about it</p>",
        "id": 204981789,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640675
    },
    {
        "content": "<p>You can write <code>def fermat : Prop := \\ex a b c n, n &gt; 2 \\and a \\ne 0 \\and a ^ n = b^n + c^n</code></p>",
        "id": 204981839,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640754
    },
    {
        "content": "<p>Makes sense I guess.</p>",
        "id": 204981914,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595640862
    },
    {
        "content": "<p>a <code>def</code> is like a 0-field <code>structure</code></p>",
        "id": 204981937,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595640927
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">is_partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204982396,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595641711
    },
    {
        "content": "<p>Or is it better to combine them into just the structure?</p>",
        "id": 204982452,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595641808
    },
    {
        "content": "<p>Depends if you anticipate using <code>is_partition</code> outside of defining <code>partition</code> instances.</p>",
        "id": 204982521,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595641966
    },
    {
        "content": "<p>True.</p>",
        "id": 204982536,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595642041
    },
    {
        "content": "<p>I think about formalizing Riemann integral too. Still not sure what is the best way to deal with it.</p>",
        "id": 204983491,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595643569
    },
    {
        "content": "<p>E.g., should I support <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mi>b</mi><mi>a</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>−</mo><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\int_b^a f(x)\\,dx=-\\int_a^b f(x)\\,dx</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.215112em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8592920000000001em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.399828em;vertical-align:-0.35582em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.044008em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span></span> right away, or start with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\int_a^b f(x)\\,dx</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.399828em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.044008em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\le b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>.</p>",
        "id": 204983542,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595643636
    },
    {
        "content": "<p>If I'll formalize this, then I'll formalize <a href=\"https://en.wikipedia.org/wiki/Henstock–Kurzweil_integral\">Henstock-Kurzweil</a> and McShane integrals as well.</p>",
        "id": 204983592,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595643763
    },
    {
        "content": "<p>Right now I'm trying to make a usable <code>interval_integral</code> based on Bochner integration.</p>",
        "id": 204983599,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595643791
    },
    {
        "content": "<p>BTW, I think it's better to assume only non-strict inequalities on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> because this way your definition will work for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a=b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>.</p>",
        "id": 204984707,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595645677
    },
    {
        "content": "<p>I wanted to try to do the exercises in the book, so I wanted to use the book's definition. Wouldn't that also lead to partitions like {5,5,5}?</p>",
        "id": 204984845,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595645888
    },
    {
        "content": "<p>what's wrong with the partition {5,5,5}?</p>",
        "id": 204985161,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595646506
    },
    {
        "content": "<p>Just not intuitive to me I guess.</p>",
        "id": 204985170,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595646550
    },
    {
        "content": "<p>i don't think it's good to wed yourself to a definition written on paper. if it's in a book that means it's battle tested as a way to get humans to learn math</p>",
        "id": 204985177,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595646573
    },
    {
        "content": "<p>but you should optimize your definitions to make it easy to write lean code with</p>",
        "id": 204985224,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595646604
    },
    {
        "content": "<p>Maybe. I'm doing this for pedagogy though.</p>",
        "id": 204985287,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595646734
    },
    {
        "content": "<p><code>{5, 5}</code> in a partition will add nothing to the Riemann sum, so it changes nothing.</p>",
        "id": 204985361,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595646882
    },
    {
        "content": "<p>But with <code>≤</code> the space of partitions has better properties.</p>",
        "id": 204985369,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595646907
    },
    {
        "content": "<p>E.g., you can insert a point without caring whether it's already in your set.</p>",
        "id": 204985371,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595646925
    },
    {
        "content": "<p>And the space of partitions of a given size is compact (not sure if it's important)</p>",
        "id": 204985380,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595646950
    },
    {
        "content": "<p>Sorry, I didn't mean to be adversarial. When I say you \"should\" do something, I just mean that I think that's the easiest path to having code that works</p>",
        "id": 204985435,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595647022
    },
    {
        "content": "<p>No, that's fine. I appreciate the input.</p>",
        "id": 204985448,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595647066
    },
    {
        "content": "<p>Also I have to remind myself every few messages that some people write Lean code for a reason different from \"PR it to mathlib\".</p>",
        "id": 204985494,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595647087
    },
    {
        "content": "<p>:)</p>",
        "id": 204985499,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595647128
    },
    {
        "content": "<p>No problem.</p>",
        "id": 204985511,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595647177
    },
    {
        "content": "<p>Patrick your is_partition definition is not right: the implications after the colon should be and's, or moved before the colon. A structure is a better idea. I agree that &lt;= will be much easier to work with than &lt;. The theorem statements will be much neater. You'll find that the book-writers just use &lt; for psychological reasons rather than anything else. There's no harm in having rectangles of width 0. Do you have a candidate structure definition yet?</p>",
        "id": 204994426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595665442
    },
    {
        "content": "<p>I don't think n&gt;0 should be there either in is_partition,  and your quantifiers over m in nat are bad because you can't evaluate x at m. Remember x eats a term of type fin n+1 so it needs to be fed a pair consisting of a natural and a proof.</p>",
        "id": 204994517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595665573
    },
    {
        "content": "<p>The <code>n &gt; 0</code> is there to ensure that there are at least two points in the partition, <code>a</code> and <code>b</code>.</p>\n<p>\"Remember x eats a term of type fin n+1 so it needs to be fed a pair consisting of a natural and a proof.\" Does that mean that <code>x 0 = a</code> and <code>x n = b</code> are also wrong? I was following the example from earlier in the thread and Lean didn't complain. What should it be?</p>",
        "id": 205015953,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595701936
    },
    {
        "content": "<p><code>a</code> and <code>b</code> should be parameters anyways since you will constantly want to quantify over partitions of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span>.</p>",
        "id": 205015985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595702008
    },
    {
        "content": "<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo mathvariant=\"normal\">≠</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\ne b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n &gt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> is forced anyways</p>",
        "id": 205016006,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595702037
    },
    {
        "content": "<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a = b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> then you might as well allow <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> I suppose.</p>",
        "id": 205016058,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595702061
    },
    {
        "content": "<p>So if I want to keep the strict inequality then I should force <code>a &lt; b</code> instead?</p>",
        "id": 205016129,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595702163
    },
    {
        "content": "<p><code>a</code> and <code>b</code> are parameters aren't they?</p>",
        "id": 205016164,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595702211
    },
    {
        "content": "<p>Surely you <em>don't</em> want to force <code>a &lt; b</code> though? Isn't <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>a</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\int_a^a f(x) \\, dx</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.215112em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8592920000000001em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span></span> well-defined (as zero)?</p>",
        "id": 205016165,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595702215
    },
    {
        "content": "<p>Apparently there's a coercion from <code>nat</code> to <code>fin n</code>--I didn't realize this</p>",
        "id": 205016173,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595702242
    },
    {
        "content": "<p>not sure what it does on out of range inputs</p>",
        "id": 205016174,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595702248
    },
    {
        "content": "<p>I guess it isn't defined in this book. Interesting point.</p>",
        "id": 205016238,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595702310
    },
    {
        "content": "<p>What would it look like without the coercion? That is, what should <code>x 0</code> be replaced with?</p>",
        "id": 205016274,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595702399
    },
    {
        "content": "<p><code>x 0</code> doesn't need a coercion because <code>fin m</code> has a <code>has_zero</code> instance (I guess I don't know what happens for <code>m = 0</code> but anyways it's not possible here).</p>",
        "id": 205016339,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595702498
    },
    {
        "content": "<p>Otherwise, use library functions for <code>fin</code>--these were discussed above</p>",
        "id": 205016386,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595702531
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205017244,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595703896
    },
    {
        "content": "<p>Note that this will work for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\le b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>. Textbooks often say something like \"we can deal with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≥</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\ge b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> in the same way\" but you can't do this in Lean. If you want to deal with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mn>1</mn><mn>0</mn></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\int_1^0 f(x)\\,dx</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3648280000000002em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0090080000000001em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span></span>, then you have (at least) three options:</p>\n<ol>\n<li>Support this in your definition right away. E.g., say something like <code>cmp (x m.cast_succ) (x m.succ) = cmp a b</code> in <code>h2</code>.</li>\n<li><code>def integral f a b := if a ≤ b then integral_aux f a b else -integral_aux f b a</code>.</li>\n<li>If <code>integral_aux f a b = 0</code> whenever <code>a ≥ b</code>, then you can also use <code>def integral f a b := integral_aux f a b - integral_aux f b a</code>.</li>\n</ol>",
        "id": 205021046,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595709995
    },
    {
        "content": "<p>Currently I use option 3 to define <code>interval_integral</code> based on Lebesgue integral.</p>",
        "id": 205021051,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595710019
    },
    {
        "content": "<p>The main issue with option 2 is that you can't prove anything without <code>by_cases hab : a ≤ b</code>.</p>",
        "id": 205021064,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595710055
    },
    {
        "content": "<p>Option 1 gives you the correct definition right away but it's harder to prove lemmas along the way.</p>",
        "id": 205021215,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595710333
    },
    {
        "content": "<p>I guess a fourth option is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mo>−</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>b</mi><mo>−</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\int_a^b f(x)\\, dx = \\int_0^1 f(a+(b-a)t)\\,(b-a)dt</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.399828em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.044008em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3648280000000002em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0090080000000001em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span></span></span></span>. But it doesn't look too good for composing intervals.</p>",
        "id": 205021275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595710481
    },
    {
        "content": "<p>And option 4' is to use a partition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0, 1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> in the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\int_a^b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.399828em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.044008em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 205021481,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595710861
    },
    {
        "content": "<p>I'm trying to define the norm of P that is <span class=\"tex-error\">$$max_{i \\leq 1 \\leq n) (x_{i} - x_{i-1})$$</span>. As a starting point I have:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>But then I don't know how to induct on the function.</p>",
        "id": 205021708,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595711260
    },
    {
        "content": "<p>I'd probably use <code>finset.sup</code></p>",
        "id": 205021812,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595711443
    },
    {
        "content": "<p>I used option 2 in metamath. You don't need to case split everything, in particular once you have additivity of endpoints you can mostly forget about this detail</p>",
        "id": 205021864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595711581
    },
    {
        "content": "<p>Actually I didn't have any <code>integral_aux</code> in option 2, it was just the lebesgue integral over <code>Ioo a b</code></p>",
        "id": 205021924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595711749
    },
    {
        "content": "<p>It's actually pretty important to have this function for stating the FTC</p>",
        "id": 205022071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595711942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/205021812\">said</a>:</p>\n<blockquote>\n<p>I'd probably use <code>finset.sup</code></p>\n</blockquote>\n<p>I'm not sure what you mean. Do you mean something like <code>def norm : finset ℝ → ℝ := ...</code>?</p>",
        "id": 205024165,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595715616
    },
    {
        "content": "<p>i mean that <code>finset.sup</code> reduces the problem to writing an appropriate function</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"err\">\\</span><span class=\"n\">R</span>\n</code></pre></div>\n\n\n<p>and composing this with <code>finset.sup</code></p>",
        "id": 205025123,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595717313
    },
    {
        "content": "<p>I'm trying option 3 with Lebesgue integral over <code>Ico a b</code>. This way you can use any measure, not only Lebesgue.</p>",
        "id": 205027291,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595721109
    },
    {
        "content": "<p>finset: \"This file builds the basic theory of <code>finset α</code>, modelled as a <code>multiset α</code> without duplicates.\"<br>\nThen \"<code>multiset α</code> is the quotient of <code>list α</code> by list permutation. The result  is a type of finite sets with duplicates allowed.\"<br>\nI'm lost at quotient of a list.</p>",
        "id": 205029282,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595724922
    },
    {
        "content": "<p>Does defining foo not still require induction on the function?</p>",
        "id": 205029333,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595725046
    },
    {
        "content": "<p>A multiset is a set but where repetition is allowed. In lean, it is represented by a lists modulo an equivalence relation where two lists are considered equivalent if one is a permutation of the other.</p>",
        "id": 205029373,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595725088
    },
    {
        "content": "<p>Quotient types are definitely a bit tricky. They're not explained until almost the very end of TPiL: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients</a></p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> wrote a tutorial that demonstrates quotients in Lean here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean\">https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean</a></p>",
        "id": 205029376,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595725102
    },
    {
        "content": "<p>These are just implementation details.</p>",
        "id": 205029380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595725123
    },
    {
        "content": "<p>Yeah, in practice you don't need to worry about how things are implemented</p>",
        "id": 205029390,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595725144
    },
    {
        "content": "<p>As long as you know how to find/use the appropriate stuff in mathlib</p>",
        "id": 205029395,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595725169
    },
    {
        "content": "<p>I think that's still more \"in theory\" than \"in practice\", though things are getting better all the time.</p>",
        "id": 205029398,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595725196
    },
    {
        "content": "<p>Let's make lots more things <code>@[irreducible]</code>! :-)</p>",
        "id": 205029476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595725315
    },
    {
        "content": "<p>I can think of something like this, but replacing nat with fin n + 1, but this has a natural number to induct on (and it doesn't compile) (or terminate):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 205030061,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595726517
    },
    {
        "content": "<p>Well, this type already doesn't make much sense because what are the finite number of things you want to take the max of?</p>",
        "id": 205030325,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595727113
    },
    {
        "content": "<p>oh is that supposed to be the second argument?</p>",
        "id": 205030362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595727125
    },
    {
        "content": "<p>That it doesn't terminate. Yeah :)</p>",
        "id": 205030368,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595727143
    },
    {
        "content": "<p>In general my advice is not to use induction for normal math</p>",
        "id": 205030422,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595727258
    },
    {
        "content": "<p>I'm not sure what your goals are though.</p>",
        "id": 205030423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595727263
    },
    {
        "content": "<p>If you make a brand new recursive definition here, then you will have to prove all the lemmas about it by induction yourself.</p>",
        "id": 205030437,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595727328
    },
    {
        "content": "<p>Maybe that's actually what you prefer though, I don't know.</p>",
        "id": 205030439,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595727338
    },
    {
        "content": "<p>I'm happy not to use induction, it's confusing. I'm just not sure how to do it otherwise.</p>",
        "id": 205030442,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595727352
    },
    {
        "content": "<p>The best advice I have is to just read the parts of the library that seem relevant, like <code>data.finset</code>. Maybe someone else has something more specific to suggest.</p>",
        "id": 205030494,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595727421
    },
    {
        "content": "<p>How do you define a function on something that has a domain of the functions of type fin n + 1 to real?</p>",
        "id": 205030540,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595727490
    },
    {
        "content": "<p>If I had to guess, there is probably something in mathlib that gives you a <code>finset \\R</code> that's the image of a map <code>fin (n+1) \\to \\R</code>, and something that gives you the max of a <code>finset \\R</code>.</p>",
        "id": 205030615,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595727645
    },
    {
        "content": "<p>So, in general, I got the impression that just about everything in a functional programming language is done by some form of recursion?</p>",
        "id": 205030678,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595727817
    },
    {
        "content": "<p>if you want to implement these things from scratch, you'll use recursion. If you just compose functions that are already available, you can avoid it.</p>",
        "id": 205030722,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595727894
    },
    {
        "content": "<p>But why reimplement everything from scratch? I think in your statement \"everything\" only means \"all elementary exercises when learning a functional programming language\". :-)</p>",
        "id": 205030795,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595728033
    },
    {
        "content": "<p>You can use <code>(finset.univ : finset (fin n)).sup (λ j, (⟨x j.cast_succ - x j.succ, _⟩ : nnreal))</code></p>",
        "id": 205030842,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595728098
    },
    {
        "content": "<p>Or <code>⨆ i : fin n, x i.cast_succ - x i.succ</code></p>",
        "id": 205030851,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595728126
    },
    {
        "content": "<p>What is the first symbol in the second one?</p>",
        "id": 205030859,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595728177
    },
    {
        "content": "<p>The one that looks like a square U.</p>",
        "id": 205030908,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595728262
    },
    {
        "content": "<p>That's notation for max, essentially. You can copy and paste that into vscode, and hover over it to see what it is notation for. Maybe even control-click to jump to defn?</p>",
        "id": 205030962,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595728400
    },
    {
        "content": "<p><code>⨆ i, f i</code> is <code>mathlib</code> notation for <code>Sup (range f)</code>.</p>",
        "id": 205031138,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595728765
    },
    {
        "content": "<p>The relevant instance for <code>real</code>s is <code>conditionally_complete_linear_order</code>, and most theorems about <code>⨆</code> will have <code>csupr</code> in their name, and assume <code>[nonempty α]</code> and/or <code>bdd_above (range f)</code>, where <code>f : α → real</code>.</p>",
        "id": 205031199,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595728873
    },
    {
        "content": "<p>For empty or unbounded sets <code>Sup</code> is defined to be <code>0</code>.</p>",
        "id": 205031200,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595728894
    },
    {
        "content": "<p>In most cases it doesn't matter which garbage value do we use for <code>Sup empty</code> but this way a few theorems don't need <code>bdd_above</code>/<code>nonempty</code> assumption.</p>",
        "id": 205031241,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595728956
    },
    {
        "content": "<p>I didn't know about the control click.</p>",
        "id": 205031290,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595729086
    },
    {
        "content": "<p>We have both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sup\">docs#finset.sup</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.max\">docs#finset.max</a></p>",
        "id": 205031305,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595729111
    },
    {
        "content": "<p>So <code>def norm' (n : ℕ) (x : fin (n + 1) → ℝ) := ⨆ i : fin n, x i.cast_succ - x i.succ</code>?<br>\nThis gives me: <code>definition 'norm'' is noncomputable, it depends on 'real.lattice.conditionally_complete_linear_order'</code></p>",
        "id": 205031362,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595729210
    },
    {
        "content": "<p>They have slightly different assumptions. E.g., <code>sup</code> takes a function as an argument, and for <code>max</code> you need to use <code>map</code> or <code>image</code>. Also <code>sup</code> assumes that there exists a minimal element of the type (<code>bot</code>) and <code>max</code> returns <code>none</code> for an empty <code>finset</code> and <code>some x</code> for a non-empty finset.</p>",
        "id": 205031367,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595729242
    },
    {
        "content": "<p>Try <code>noncomputable theory</code> at the top of your file.</p>",
        "id": 205031368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595729264
    },
    {
        "content": "<p>Most probably you don't want to try developing <code>computable</code> integrals. E.g., because real numbers are noncomputable in Lean.</p>",
        "id": 205031414,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595729302
    },
    {
        "content": "<p>Yes, that fixed it.<br>\nSo I thought that if i is of type fin n, then i.cast_succ gives back i of type fin n + 1 and i.succ gives back i + 1 of type fin n + 1?</p>",
        "id": 205031483,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595729459
    },
    {
        "content": "<p>The \"supremum\" part is noncomputable.</p>",
        "id": 205031491,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595729485
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 205031656,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595729842
    },
    {
        "content": "<p>The definition of norm above seems to be the other way around?</p>",
        "id": 205031733,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595729972
    },
    {
        "content": "<p>So is <code>x i.cast_succ - x i.succ</code> the function passed to Sup (range f)? And i iterates over the domain of that function?</p>",
        "id": 205032789,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595732041
    },
    {
        "content": "<p>Yes. More precisely, the function <code>λ i : fin n, x i.cast_succ - x i.succ</code> is passed to <code>Sup (range f)</code>.</p>",
        "id": 205033085,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595732565
    },
    {
        "content": "<p>Cool. Am I misunderstanding the definition of cast_succ and succ? I'm guessing probably.</p>",
        "id": 205033376,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595733170
    },
    {
        "content": "<p><code>cast_succ</code> is just the \"obvious\" inclusion from <code>fin n</code> to <code>fin (n+1)</code>, while <code>succ</code> is the successor. So when you write <code>x i.cast_succ - x i.succ</code> it means, mathematically, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">x_i - x_{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 205033434,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595733289
    },
    {
        "content": "<p>You probably want <code>i.succ - i.cast_succ</code></p>",
        "id": 205033446,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595733324
    },
    {
        "content": "<p>That was what I was wondering.</p>",
        "id": 205033449,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595733341
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 205033499,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595733448
    },
    {
        "content": "<p>No problem!</p>",
        "id": 205033501,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595733455
    },
    {
        "content": "<p>In summary:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">partition_norm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"o\">:=</span> <span class=\"err\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">-</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span>\n</code></pre></div>",
        "id": 205034505,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595735601
    },
    {
        "content": "<p>Looks good. You can make the <code>a</code> and <code>b</code> implicit in <code>partition_norm</code> since they can be inferred from the type of <code>P</code>. You can also give the fields in partition some more descriptive names.</p>",
        "id": 205034559,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595735708
    },
    {
        "content": "<p>Cool.</p>",
        "id": 205034607,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595735791
    },
    {
        "content": "<p>If you make <code>a</code> and <code>b</code> implicit in <code>partition_norm</code>, and <code>P</code> is a partition (for some <code>a</code> and <code>b</code>) you would be able to just write <code>partition_norm P</code> for the norm of <code>P</code>.</p>",
        "id": 205034616,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595735838
    },
    {
        "content": "<p>Sounds good.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">partition_norm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"o\">:=</span> <span class=\"err\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">-</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span>\n</code></pre></div>",
        "id": 205034664,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595735903
    },
    {
        "content": "<p>And if you're really up to it, look up how to write custom notation, so you can actually write something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>P</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||P||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span></p>",
        "id": 205034672,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595735943
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">partition_norm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"o\">:=</span> <span class=\"err\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">-</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`||`</span><span class=\"n\">P</span><span class=\"bp\">`||`</span> <span class=\"o\">:=</span> <span class=\"n\">partition_norm</span> <span class=\"n\">P</span>\n</code></pre></div>",
        "id": 205034762,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595736083
    },
    {
        "content": "<p>Alternatively, you can do something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">partition</span>\n<span class=\"n\">def</span> <span class=\"n\">norm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kn\">end</span> <span class=\"n\">partition</span>\n</code></pre></div>\n\n\n<p>which will allow you to write <code>P.norm</code> instead of <code>partition.norm P</code>.</p>",
        "id": 205034847,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595736242
    },
    {
        "content": "<p>Good idea.</p>",
        "id": 205034885,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595736314
    },
    {
        "content": "<p>One thing to keep in mind when defining notation is the precedence levels.</p>",
        "id": 205034935,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595736391
    },
    {
        "content": "<p>I might wait and look into that latter.</p>",
        "id": 205034986,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595736506
    },
    {
        "content": "<p>I need to move on to Riemann sums :)</p>",
        "id": 205034988,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595736533
    },
    {
        "content": "<p>For each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">i = 1, \\ldots, n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">x_{i}*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61528em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∗</span></span></span></span> be an arbitrary point in the interval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[x_{i-1}, x_{i}]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">needs_a_name</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 205035739,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595738101
    },
    {
        "content": "<p>I'd <code>extend</code> the original structure adding fields <code>x</code> and <code>x_mem_Icc</code></p>",
        "id": 205040383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595748006
    },
    {
        "content": "<blockquote>\n<p>Cool. Am I misunderstanding the definition of cast_succ and succ? I'm guessing probably.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span> you do know that you can just hover over a definition and see its docstring, and if it hasn't got one then you can right click on it and peek its definition, right? If you don't understand the definitions of <code>cast_succ</code> and <code>succ</code>as written in the source code then you should probably figure them out because you're going to have to get used to<code>fin m</code> at some point. A term of type <code>fin m</code> is a pair, consisting of a natural <code>i</code> and a proof that <code>i&lt;m</code>. That's all you need to know.</p>",
        "id": 205041239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595749818
    },
    {
        "content": "<p>But in general you should be able to get away with not reading definitions, and hoping that the stuff in the source code just after the definition is the interface you'll need.</p>",
        "id": 205041311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595750008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/205016129\">said</a>:</p>\n<blockquote>\n<p>So if I want to keep the strict inequality then I should force <code>a &lt; b</code> instead?</p>\n</blockquote>\n<p>Re this: if you don't need that inequality, and in most places you don't, then you should go rogue and generalize the book <em>when making the definition</em> (as you did), and just insert it into the lemmas which actually need it. You'll probably be surprised to find that essentially no lemmas need it, and the authors just put this assumption in for psychological reasons. There is a big disadvantage in putting in a random assumption <code>0&lt;n</code> which is almost never needed: then every proof by induction on n, you'll have to do a fake base case, where the result is probably trivially true but the hypotheses are false anyway, and then an actual base case n=1, where the result is true but a bit less trivially, and would follow from the inductive hypothesis and the case n=0 apart from the fact that you didn't prove the n=0 case because you made the mistake of copying from the book so you can't use the n=0 case, and then an inductive step which will be the same.</p>\n<p>Re finset: if you're reading the definition <code>finset</code> you're doing the wrong thing. <code>finset X</code> is the type of finite subsets of <code>X</code>. This is what you need to know. If you want to learn more about how to use <code>finset</code> then go to <code>data.finset.basic</code> and read (only) the <em>statements of the lemmas</em>. Skip the first 100-200 lines because they might be messy ones you'll never need, and then start reading from there and you'll see that the lemmas are a bunch of basic mathematical results about finite sets all of which have incomprehensible proofs which you don't need to worry about, because you are not making the <code>finset</code> API, you are just going to use it, and it's very thorough. This is all moot because it looks like you're not going to use it anyway.</p>\n<p>Finally, getting the definitions right is hard. Once the definitions are there, you can start proving theorems, and it doesn't matter how messy your proofs are because they are compiled and then forgotten. But definitions you have to implement them in such a way that they are usable in practice, and it's hard for an inexperienced Lean user to set these things up. You should make a little project github repo (usnig <code>leanproject new</code>) with just one file in src for now, so you can point people to your definitions more easily. This set-up is easier to work with than one random file on your computer. <code>partition</code> and <code>partition_norm</code> are looking good but as Adam says it should be called <code>partition.norm, and your </code>h0<code>, </code>h1<code>, </code>h2` hypotheses have lousy names -- what are you -- a mathematician? Give things descriptive names. Here's what Yury means:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_last</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">partition</span>\n\n<span class=\"n\">def</span> <span class=\"n\">norm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"o\">:=</span> <span class=\"err\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">-</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`||`</span><span class=\"n\">P</span><span class=\"bp\">`||`</span> <span class=\"o\">:=</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">norm</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">partition</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">pointed_partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem_block</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>Calling something <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and then something else <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">x^*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> doesn't sound like a great idea to me. I called it <code>y</code>.</p>",
        "id": 205041991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595751271
    },
    {
        "content": "<p>Thank you. Do you have any advice for finding the things I need in mathlib? For example, I'm sure there must be a function in mathlib that allows me to easily take the sum over the range of the function on fin n, but I don't know of an easy way to find it.</p>",
        "id": 205065855,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595794849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/205030842\">said</a>:</p>\n<blockquote>\n<p>You can use <code>(finset.univ : finset (fin n)).sup (λ j, (⟨x j.cast_succ - x j.succ, _⟩ : nnreal))</code><br>\nOr <code>⨆ i : fin n, x i.cast_succ - x i.succ</code></p>\n</blockquote>",
        "id": 205066263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595795621
    },
    {
        "content": "<p>That takes the max, not the sum right?</p>",
        "id": 205066333,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595795717
    },
    {
        "content": "<p>Hint: it's going to be called finset.sum</p>",
        "id": 205066343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595795741
    },
    {
        "content": "<p>You could do worse than read through data.finset.basic just looking at the statements of the theorems, and reading docstrings of definitions. This will give you a feeling for what's there</p>",
        "id": 205066421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595795835
    },
    {
        "content": "<p>Alright.</p>",
        "id": 205066472,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595795918
    },
    {
        "content": "<p>you might prefer looking at it in the web browser<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 205066479,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595795941
    },
    {
        "content": "<p>this will automatically hide the proofs and emphasize docstrings</p>",
        "id": 205066486,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595795957
    },
    {
        "content": "<p>reading mathlib_docs directly is kind of like reading a book where all the proofs are exercises</p>",
        "id": 205066535,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595796005
    },
    {
        "content": "<p>Thanks. I didn't use finset earlier, is this a suggestion that I should have?</p>",
        "id": 205066536,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595796005
    },
    {
        "content": "<p>i don't know what you should do</p>",
        "id": 205066542,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595796033
    },
    {
        "content": "<p>if your goal is to get code reasonably quickly that expresses the mathematics you were talking about before, you should aim to take advantage of existing libraries</p>",
        "id": 205066550,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595796068
    },
    {
        "content": "<p>I guess that was directed to Kevin, when he said it is called finset.sum.</p>",
        "id": 205066559,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595796105
    },
    {
        "content": "<p>i think a literal interpretation of his words would say that kevin suggests that you find some lemma in the library called <code>finset.sum</code> or similar, literally read the statement, and try to figure out whether it applies to your situation</p>",
        "id": 205066621,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595796194
    },
    {
        "content": "<p>The reason I'd go for finset.sum is that the API for it is much better developed than for the other sums, or at least that was true in the past when I wanted to do finite sums</p>",
        "id": 205066635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595796232
    },
    {
        "content": "<p>I see.</p>",
        "id": 205066675,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595796258
    },
    {
        "content": "<p>You can use finset.univ to make your finite subset of fin n</p>",
        "id": 205066679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595796277
    },
    {
        "content": "<p>And if you read the relevant part of the finset API (and Jalex is right, you'd be much better off reading the docs than the source code) then you'd see it in action and also what the basic lemmas are</p>",
        "id": 205066699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595796345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/205066635\">said</a>:</p>\n<blockquote>\n<p>The reason I'd go for finset.sum is that the API for it is much better developed than for the other sums, or at least that was true in the past when I wanted to do finite sums</p>\n</blockquote>\n<p>And it has a nice notation too</p>",
        "id": 205066755,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595796389
    },
    {
        "content": "<p>Which hopefully you'll see in the docs. Is it used there?</p>",
        "id": 205066764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595796413
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/basic.html\">https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/basic.html</a></p>",
        "id": 205066841,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595796541
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/basic.html#finset.sum\">https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/basic.html#finset.sum</a></p>",
        "id": 205066852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595796579
    },
    {
        "content": "<p>Start there and go down and hopefully you'll see enough to figure how to use this stuff</p>",
        "id": 205066905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595796615
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> should cover all this too, eventually.</p>",
        "id": 205066978,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595796750
    },
    {
        "content": "<p>I wonder if it would be helpful to have examples of use in the mathlib documentation. It might help me.</p>",
        "id": 205080287,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595822594
    },
    {
        "content": "<p>Yes, I would support that. There are some usage examples in the docstrings in <a href=\"https://leanprover-community.github.io/mathlib_docs/data/list/defs.html\"><code>data.list.defs</code></a>, but very few elsewhere. Contributions are welcome!</p>",
        "id": 205080417,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595822857
    },
    {
        "content": "<p>I would contribute if I knew how to use them. :)</p>",
        "id": 205080463,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595822920
    },
    {
        "content": "<p>You can search mathlib itself for usage examples, sometimes that helps. But of course, questions here are always welcome too!</p>",
        "id": 205080582,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595823158
    },
    {
        "content": "<p>This compiles:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">riemann_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pointed_partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">-</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>I'm not sure I understand what finset.univ does.</p>\n<p>If I try this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">riemann_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pointed_partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"o\">:=</span> <span class=\"err\">∑</span>\n</code></pre></div>\n\n\n<p>then I get 'unexpected token' for the summation symbol. I have tried various imports, but have not found one that fixes it.</p>",
        "id": 205549886,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596158793
    },
    {
        "content": "<p>Did you try <code>open_locale big_operators</code>?</p>",
        "id": 205550110,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596159139
    },
    {
        "content": "<p>If I put that in front of the definition then I get a command expected error. Entire file:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_last</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">partition</span>\n\n<span class=\"n\">def</span> <span class=\"n\">norm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"c1\">-- := ⨆ i : fin P.n, P.x i.succ - P.x i.cast_succ</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">-</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`||`</span><span class=\"n\">P</span><span class=\"bp\">`||`</span> <span class=\"o\">:=</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">norm</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">partition</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">pointed_partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem_block</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def riemann_sum (a b : ℝ) (P : pointed_partition a b) (f : ℝ → ℝ) : ℝ</span>\n<span class=\"cm\">:= (finset.univ : finset (fin P.n)).sum (λ i, f (P.y i) * (P.x i.succ - P.x i.cast_succ))</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">def</span> <span class=\"n\">riemann_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pointed_partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"o\">:=</span> <span class=\"err\">∑</span>\n</code></pre></div>",
        "id": 205550214,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596159346
    },
    {
        "content": "<p>the first error in the file is significantly before the definition of riemann sum</p>",
        "id": 205552123,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596162171
    },
    {
        "content": "<p>Yeah the notation for Sum needs some arguments after it.</p>",
        "id": 205552538,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596162900
    },
    {
        "content": "<p>So this should be what you want i think:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">riemann_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pointed_partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"o\">:=</span> <span class=\"err\">∑</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">-</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205553002,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596163687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/205552123\">said</a>:</p>\n<blockquote>\n<p>the first error in the file is significantly before the definition of riemann sum</p>\n</blockquote>\n<p>Yeah, it was fine in Visual Studio Code, but when I pasted it into the lean web page it gave a bunch of errors. I'm updating my OS, etc. now.</p>",
        "id": 205554546,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596166181
    },
    {
        "content": "<p>I think I had to add the import <code>data.fintype.basic</code> to makee it work on my mathlib</p>",
        "id": 205554916,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596166692
    },
    {
        "content": "<p>In the web editor I get <code>file 'data/fintype/basic' not found in the LEAN_PATH</code>.</p>",
        "id": 205555025,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596166888
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20data.real.basic%20data.set.intervals%20data.finset%20algebra.big_operators%20data.fintype.basic%0A%0Anoncomputable%20theory%0A%0Astructure%20partition%20%28a%20%3A%20%E2%84%9D%29%20%28b%20%3A%20%E2%84%9D%29%20%3A%3D%0A%28n%20%3A%20%E2%84%95%29%0A%28x%20%3A%20fin%20%28n%20%2B%201%29%20%E2%86%92%20%E2%84%9D%29%0A%28x_zero%20%3A%20x%200%20%3D%20a%29%0A%28x_last%20%3A%20x%20%28fin.last%20n%29%20%3D%20b%29%0A%28mono%20%3A%20%E2%88%80%20m%20%3A%20fin%20n%2C%20x%20m.cast_succ%20%E2%89%A4%20x%20m.succ%29%0A%0Anamespace%20partition%0A%0Adef%20norm%20%7Ba%20b%20%3A%20%E2%84%9D%7D%20%28P%20%3A%20partition%20a%20b%29%20%3A%20%E2%84%9D%0A--%20%3A%3D%20%E2%A8%86%20i%20%3A%20fin%20P.n%2C%20P.x%20i.succ%20-%20P.x%20i.cast_succ%0A%3A%3D%20%28finset.univ%20%3A%20finset%20%28fin%20P.n%29%29.sup%20%28%CE%BB%20j%2C%20%28P.x%20j.cast_succ%20-%20P.x%20j.succ%29%29%0A%0Anotation%20%60%7C%7C%60P%60%7C%7C%60%20%3A%3D%20P.norm%0A%0Aend%20partition%0A%0Aopen%20set%0A%0Astructure%20pointed_partition%20%28a%20b%20%3A%20%E2%84%9D%29%20extends%20partition%20a%20b%20%3A%3D%0A%28y%20%3A%20fin%20n%20%E2%86%92%20%E2%84%9D%29%0A%28mem_block%20%3A%20%E2%88%80%20m%20%3A%20fin%20n%2C%20y%20m%20%E2%88%88%20Icc%20%28x%20m.cast_succ%29%20%28x%20m.succ%29%29%0A%0Ainstance%20%28a%20b%20%3A%20%E2%84%9D%29%20%3A%20has_coe_to_fun%20%28pointed_partition%20a%20b%29%20%3A%3D%20%E2%9F%A8_%2C%20%CE%BB%20c%2C%20c.y%E2%9F%A9%0A%0A%2F-%0Adef%20riemann_sum%20%28a%20b%20%3A%20%E2%84%9D%29%20%28P%20%3A%20pointed_partition%20a%20b%29%20%28f%20%3A%20%E2%84%9D%20%E2%86%92%20%E2%84%9D%29%20%3A%20%E2%84%9D%0A%3A%3D%20%28finset.univ%20%3A%20finset%20%28fin%20P.n%29%29.sum%20%28%CE%BB%20i%2C%20f%20%28P.y%20i%29%20*%20%28P.x%20i.succ%20-%20P.x%20i.cast_succ%29%29%0A-%2F%0A%0Aopen_locale%20big_operators%0A%0Adef%20riemann_sum%20%28a%20b%20%3A%20%E2%84%9D%29%20%28P%20%3A%20pointed_partition%20a%20b%29%20%28f%20%3A%20%E2%84%9D%20%E2%86%92%20%E2%84%9D%29%20%3A%20%E2%84%9D%0A%3A%3D%20%E2%88%91%20n%2C%20f%20%28P%20n%29%20*%20%28P.x%20n.succ%20-%20P.x%20n.cast_succ%29%0A%0A%23print%20riemann_sum\">https://leanprover-community.github.io/lean-web-editor/#code=import%20data.real.basic%20data.set.intervals%20data.finset%20algebra.big_operators%20data.fintype.basic%0A%0Anoncomputable%20theory%0A%0Astructure%20partition%20%28a%20%3A%20%E2%84%9D%29%20%28b%20%3A%20%E2%84%9D%29%20%3A%3D%0A%28n%20%3A%20%E2%84%95%29%0A%28x%20%3A%20fin%20%28n%20%2B%201%29%20%E2%86%92%20%E2%84%9D%29%0A%28x_zero%20%3A%20x%200%20%3D%20a%29%0A%28x_last%20%3A%20x%20%28fin.last%20n%29%20%3D%20b%29%0A%28mono%20%3A%20%E2%88%80%20m%20%3A%20fin%20n%2C%20x%20m.cast_succ%20%E2%89%A4%20x%20m.succ%29%0A%0Anamespace%20partition%0A%0Adef%20norm%20%7Ba%20b%20%3A%20%E2%84%9D%7D%20%28P%20%3A%20partition%20a%20b%29%20%3A%20%E2%84%9D%0A--%20%3A%3D%20%E2%A8%86%20i%20%3A%20fin%20P.n%2C%20P.x%20i.succ%20-%20P.x%20i.cast_succ%0A%3A%3D%20%28finset.univ%20%3A%20finset%20%28fin%20P.n%29%29.sup%20%28%CE%BB%20j%2C%20%28P.x%20j.cast_succ%20-%20P.x%20j.succ%29%29%0A%0Anotation%20%60%7C%7C%60P%60%7C%7C%60%20%3A%3D%20P.norm%0A%0Aend%20partition%0A%0Aopen%20set%0A%0Astructure%20pointed_partition%20%28a%20b%20%3A%20%E2%84%9D%29%20extends%20partition%20a%20b%20%3A%3D%0A%28y%20%3A%20fin%20n%20%E2%86%92%20%E2%84%9D%29%0A%28mem_block%20%3A%20%E2%88%80%20m%20%3A%20fin%20n%2C%20y%20m%20%E2%88%88%20Icc%20%28x%20m.cast_succ%29%20%28x%20m.succ%29%29%0A%0Ainstance%20%28a%20b%20%3A%20%E2%84%9D%29%20%3A%20has_coe_to_fun%20%28pointed_partition%20a%20b%29%20%3A%3D%20%E2%9F%A8_%2C%20%CE%BB%20c%2C%20c.y%E2%9F%A9%0A%0A%2F-%0Adef%20riemann_sum%20%28a%20b%20%3A%20%E2%84%9D%29%20%28P%20%3A%20pointed_partition%20a%20b%29%20%28f%20%3A%20%E2%84%9D%20%E2%86%92%20%E2%84%9D%29%20%3A%20%E2%84%9D%0A%3A%3D%20%28finset.univ%20%3A%20finset%20%28fin%20P.n%29%29.sum%20%28%CE%BB%20i%2C%20f%20%28P.y%20i%29%20*%20%28P.x%20i.succ%20-%20P.x%20i.cast_succ%29%29%0A-%2F%0A%0Aopen_locale%20big_operators%0A%0Adef%20riemann_sum%20%28a%20b%20%3A%20%E2%84%9D%29%20%28P%20%3A%20pointed_partition%20a%20b%29%20%28f%20%3A%20%E2%84%9D%20%E2%86%92%20%E2%84%9D%29%20%3A%20%E2%84%9D%0A%3A%3D%20%E2%88%91%20n%2C%20f%20%28P%20n%29%20*%20%28P.x%20n.succ%20-%20P.x%20n.cast_succ%29%0A%0A%23print%20riemann_sum</a></p>",
        "id": 205555093,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596167032
    },
    {
        "content": "<p>works fine for me except it doesn't like your definition of norm, as it needs a bottom element for when the set is empty</p>",
        "id": 205555132,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596167065
    },
    {
        "content": "<p>A possible solution is to make <code>(P.x j.cast_succ - P.x j.succ)</code> land in nnreal so that the bottom element is 0.</p>",
        "id": 205555194,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596167194
    },
    {
        "content": "<p>Huh, that is a different web editor than the one I was using. I get a failed to synthesize error on this line <code>:= (finset.univ : finset (fin P.n)).sup (λ j, (P.x j.cast_succ - P.x j.succ))</code> in that.</p>",
        "id": 205555198,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596167215
    },
    {
        "content": "<p>Yeah always use the community web editor!</p>",
        "id": 205555258,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596167331
    },
    {
        "content": "<p>And yes that's the error I'm talking about, if you want to take sup over a set the Type the set is valued in needs to have an infimum or bottom element so that if you take the sup of the empty set you get a decent value back.</p>",
        "id": 205555272,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596167393
    },
    {
        "content": "<p>So I need a case for when <code>(finset.univ : finset (fin P.n))</code> is empty?</p>",
        "id": 205555541,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596167803
    },
    {
        "content": "<p>Yeah or you can use max instead of sup, which returns <code>none</code> if the input is empty, so your norm would land in <code>option real</code> instead of <code>real</code>. But I think the <code>nnreal</code> way is nicer.</p>",
        "id": 205555709,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596168050
    },
    {
        "content": "<p>Actually I just tried to do this and noticed that your norm is negatively valued!</p>",
        "id": 205555789,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596168209
    },
    {
        "content": "<p>I guess that's not intentional so I switched it to this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">nnreal</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_last</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">partition</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n\n<span class=\"n\">def</span> <span class=\"n\">norm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"c1\">-- := ⨆ i : fin P.n, P.x i.succ - P.x i.cast_succ</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">-</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">P</span> <span class=\"n\">j</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`||`</span><span class=\"n\">P</span><span class=\"bp\">`||`</span> <span class=\"o\">:=</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">norm</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">partition</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">pointed_partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem_block</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">pointed_partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">y</span><span class=\"bp\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def riemann_sum (a b : ℝ) (P : pointed_partition a b) (f : ℝ → ℝ) : ℝ</span>\n<span class=\"cm\">:= (finset.univ : finset (fin P.n)).sum (λ i, f (P.y i) * (P.x i.succ - P.x i.cast_succ))</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">def</span> <span class=\"n\">riemann_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pointed_partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"o\">:=</span> <span class=\"err\">∑</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">-</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">riemann_sum</span>\n</code></pre></div>",
        "id": 205555855,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596168318
    },
    {
        "content": "<p>There is a proof in the definition?</p>",
        "id": 205556027,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596168640
    },
    {
        "content": "<p>Yep, to give an element of the nonnegative reals (ℝ≥0)  we give an element of  <code>ℝ</code> and a proof that it is nonnegative, as this is defined as a subtype in lean.</p>",
        "id": 205556090,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596168738
    },
    {
        "content": "<p>I see.</p>",
        "id": 205556191,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596168927
    },
    {
        "content": "<p>Why does making it nnreal satisfy the need for an empty case?</p>",
        "id": 205556899,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596170006
    },
    {
        "content": "<p>Because the nnreal are bounded below and hence have a sup?</p>",
        "id": 205556955,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596170064
    },
    {
        "content": "<p>Actually an inf right?</p>",
        "id": 205556960,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596170091
    },
    {
        "content": "<p>Yeah exactly, because nnreal has a smallest element (0) so that when you give an empty set the supremum has something sensible to be. You would want reals with  a negative infinity if you really wanted values in reals, but as your terms are all positive this seemed cleaner</p>",
        "id": 205556974,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596170125
    },
    {
        "content": "<p>So the sup of an empty subset of the nnreals is 0?</p>",
        "id": 205557039,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596170221
    },
    {
        "content": "<p>Is that by convention?</p>",
        "id": 205557054,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596170265
    },
    {
        "content": "<p>No, I guess that makes sense. Every nnreal is an upper bound, so the least of those is 0.</p>",
        "id": 205557257,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596170569
    },
    {
        "content": "<p>As an aside, does this make sense? Is using structures like this a reasonable way to define the upper bound and the least upper bound?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_ub</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">ub</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_lub</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">not</span> <span class=\"n\">is_ub</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205701761,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596322858
    },
    {
        "content": "<p>You mean</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_ub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>&amp; similarly for <code>lub</code></p>",
        "id": 205701827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596322978
    },
    {
        "content": "<p>If I take out the Prop it seems to break the use of is_ub in the definition of lub.</p>",
        "id": 205701874,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596323045
    },
    {
        "content": "<p>oh yes, I didn't notice that part is separately wrong.</p>",
        "id": 205701881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323072
    },
    {
        "content": "<p>What did I do wrong?</p>",
        "id": 205701886,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596323101
    },
    {
        "content": "<p>It just doesn't make any sense.</p>",
        "id": 205701899,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323111
    },
    {
        "content": "<p><code>:=</code> is for default values, it's rarely useful.</p>",
        "id": 205701902,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323118
    },
    {
        "content": "<p>You need to replace it with what it means to be a least upper bound</p>",
        "id": 205701906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323126
    },
    {
        "content": "<p>So I want to say that the ub and the lub are real numbers. That is done by the t : \\real right?</p>",
        "id": 205701951,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596323195
    },
    {
        "content": "<p>In <code>ub</code> you're saying (with the corrected version) that an upper bound of a set <code>S</code> is a real number <code>t</code> such that <code>∀ s ∈ S, s ≤ t</code>.</p>",
        "id": 205701966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323238
    },
    {
        "content": "<p>Which is right.</p>",
        "id": 205701968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323240
    },
    {
        "content": "<p>The original said that an upper bound is any real number <code>t</code> together with any proposition which, if you don't supply it, defaults to <code>∀ s ∈ S, s ≤ t</code>.</p>",
        "id": 205702011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323313
    },
    {
        "content": "<p>I see. Ok. So now I'm not sure how to make use of the is_ub in the lub. I tried not is_ub r, but that doesn't seem to work.</p>",
        "id": 205702017,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596323344
    },
    {
        "content": "<p>You don't need to make use of it</p>",
        "id": 205702021,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323356
    },
    {
        "content": "<p>True. I thought it might be easier to read though.</p>",
        "id": 205702027,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596323386
    },
    {
        "content": "<p>Maybe start with the definition in math?</p>",
        "id": 205702030,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323392
    },
    {
        "content": "<p>(you also can't use it in any sensible way)</p>",
        "id": 205702035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323402
    },
    {
        "content": "<p>I mean, since the structure already contains the field <code>is_ub</code> you don't need to repeat the fact that it is an upper bound in the fact that it is a <em>least</em> upper bound, I guess.</p>",
        "id": 205702073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323439
    },
    {
        "content": "<p>That isn't how I wanted to use it. I can write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_ub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">ub</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_lub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>but the last part is just stating that r is not an ub.</p>",
        "id": 205702127,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596323534
    },
    {
        "content": "<p>ub of S that is.</p>",
        "id": 205702131,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596323562
    },
    {
        "content": "<p>These extra <code>¬</code>s are a little awkward (normal definition would be that if <code>r</code> is another upper bound, then <code>t &lt;= r</code>) but that works.</p>",
        "id": 205702189,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323700
    },
    {
        "content": "<p>You could also reuse the whole structure <code>ub</code></p>",
        "id": 205702198,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596323706
    },
    {
        "content": "<p>What do you mean by reuse the whole structure ub?</p>",
        "id": 205702248,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596323777
    },
    {
        "content": "<p>Quantify over all <code>ub S</code> in the type of <code>is_lub</code>, rather than writing out the two hypotheses separately</p>",
        "id": 205702363,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324050
    },
    {
        "content": "<p>Also, you might not really want a structure in the first place.</p>",
        "id": 205702370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324076
    },
    {
        "content": "<p>mathlib style is more like <code>def is_ub (S : set \\R) (t : \\R) : Prop := \\all s \\in S, s \\le t</code> and <code>def is_lub (S : set \\R) (t : \\R) : Prop := ...</code> (can use <code>is_ub</code>).</p>",
        "id": 205702415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324132
    },
    {
        "content": "<p>I thought it might make things cleaner to say r : ub S, then both r : real and is_ub r S. It would look closer to proofs on paper.</p>",
        "id": 205702428,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596324215
    },
    {
        "content": "<p>If I try to do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_ub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">ub</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"c1\">--(is_lub : ∀ r : ℝ, r &lt; t → ¬ (∀ s ∈ S, s ≤ r))</span>\n<span class=\"o\">(</span><span class=\"n\">is_lub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ub</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I get an error on the last leq.</p>",
        "id": 205702471,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596324283
    },
    {
        "content": "<p>abomination incoming:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_ub</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t_is_ub</span> <span class=\"o\">:</span> <span class=\"n\">is_ub</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">ub</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_lub</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">not</span> <span class=\"n\">is_ub</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t_is_lub</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205702482,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596324320
    },
    {
        "content": "<p>that's because <code>r : ub S</code> and not <code>r : \\R</code></p>",
        "id": 205702483,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324324
    },
    {
        "content": "<p>you would have to write <code>r.t</code> instead</p>",
        "id": 205702486,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596324339
    },
    {
        "content": "<p>What does r.t mean?</p>",
        "id": 205702529,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596324378
    },
    {
        "content": "<p><code>ub.t r</code></p>",
        "id": 205702530,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324392
    },
    {
        "content": "<p>i.e. the <code>t</code> field</p>",
        "id": 205702532,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324400
    },
    {
        "content": "<p>Oh.</p>",
        "id": 205702533,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596324414
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a></p>",
        "id": 205702539,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596324435
    },
    {
        "content": "<p>Ch. 9</p>",
        "id": 205702540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596324446
    },
    {
        "content": "<p>I don't really think the bundled structure is more like informal math. The big difference from informal math is in Lean you're generally forced to refer to statements you know (like \"<code>r</code> is an upper bound of <code>S</code>\") explicitly somehow--whether that statement is called <code>r.is_ub</code> or <code>h</code>, you still have to name it.</p>",
        "id": 205702587,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324532
    },
    {
        "content": "<p>The disadvantage of the structure is that it forces you to introduce both <code>r</code> and the hypothesis that it is the (least) upper bound of something simultaneously--if you already had an <code>r</code> you were interested in then you have to jump through extra hoops to just state that it is an upper bound.</p>",
        "id": 205702637,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324609
    },
    {
        "content": "<p>Why was it better to use a structure for the definition of a partition instead of saying is_partition?</p>",
        "id": 205702641,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596324645
    },
    {
        "content": "<p>It's not necessarily better or worse</p>",
        "id": 205702656,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324702
    },
    {
        "content": "<p>just different</p>",
        "id": 205702657,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324704
    },
    {
        "content": "<p>But, it's probably not as frequent in math that you have a random collection of subsets of a set lying around and you want to talk about whether or not it is a partition</p>",
        "id": 205702701,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324749
    },
    {
        "content": "<p>but it does seem quite likely that you would have a random real number lying around and want to talk about whether or not it is an upper bound</p>",
        "id": 205702707,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324772
    },
    {
        "content": "<p>For example with the structure <code>ub</code> alone it's quite awkward to express \"<code>t</code> is not an upper bound of <code>S</code>\"</p>",
        "id": 205702713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324790
    },
    {
        "content": "<p>I see.</p>",
        "id": 205702722,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596324821
    },
    {
        "content": "<p>And somehow, talking about something not being an upper bound feels plausible in a way that talking about something not being a partition does not</p>",
        "id": 205702764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596324854
    },
    {
        "content": "<p>I believe the correct answer is \"you'll know which implementation is better as you go on proving things about it\"</p>",
        "id": 205702771,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596324943
    },
    {
        "content": "<p>you want to say, if <code>s</code> is an LUB of <code>A</code> and <code>t</code> of <code>B</code> then <code>s+t</code> of <code>A+B</code></p>",
        "id": 205702818,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596324976
    },
    {
        "content": "<p>which means the implementation without structure is better</p>",
        "id": 205702821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596324998
    },
    {
        "content": "<p>Alright. Just out of pure curiosity, is there a way to replace the ¬ ∀ s ∈ S, s ≤ t with the simpler statement that r is not an ub as previously defined?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- upper bound</span>\n<span class=\"kn\">structure</span> <span class=\"n\">ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_ub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- least upper bound</span>\n<span class=\"kn\">structure</span> <span class=\"n\">lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">ub</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_lub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205702887,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596325175
    },
    {
        "content": "<p>I imagine a similar question might come up in the definition of something else as a structure that makes more sense.</p>",
        "id": 205702991,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596325345
    },
    {
        "content": "<p>you can say \"there does not exist a <code>ub</code> whose <code>t</code> equals the given <code>t</code>\"</p>",
        "id": 205703013,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596325422
    },
    {
        "content": "<p>but as I mentioned above it's awkward</p>",
        "id": 205703019,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596325432
    },
    {
        "content": "<p>this awkwardness would disappear with the usual definition</p>",
        "id": 205703021,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596325441
    },
    {
        "content": "<p>Alright.</p>",
        "id": 205703064,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596325478
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 205703067,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596325491
    },
    {
        "content": "<p>Since we can prove the lub is unique, is a there a way to say the lub S instead of t is_lub S without the structure?</p>",
        "id": 205703220,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596325857
    },
    {
        "content": "<p>I end up defining things named lub_S to keep track that they are the lub of S. Just hoping there was a simpler way.</p>",
        "id": 205703382,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596326254
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon</span> <span class=\"err\">$</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 205703540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596326586
    },
    {
        "content": "<p>What does classical.epsilon $ is_lub S mean?</p>",
        "id": 205703591,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596326675
    },
    {
        "content": "<p><code>is_lub S</code> is a predicate on <code>\\R</code></p>",
        "id": 205703602,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596326730
    },
    {
        "content": "<p><code>classical.epsilon</code> means, if there's some <code>r : \\R</code> satisfying it, return <code>r</code></p>",
        "id": 205703605,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596326748
    },
    {
        "content": "<p>otherwise return a default element</p>",
        "id": 205703606,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596326754
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon</span> <span class=\"err\">$</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">is_lub_unique</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht₁</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht₂</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"bp\">=</span> <span class=\"n\">t₂</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">ht₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ht₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ht₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eq_lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">lub</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_lub_unique</span> <span class=\"n\">ht</span> <span class=\"err\">$</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon_spec</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 205703712,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596326951
    },
    {
        "content": "<p>any this is the API for <code>lub</code></p>",
        "id": 205703717,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596326968
    },
    {
        "content": "<p>so you can forget about its definition</p>",
        "id": 205703719,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596326972
    },
    {
        "content": "<p>What would happen if I used lub S in a proof, and one didn't exist? Would I get an error in Lean?</p>",
        "id": 205703779,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596327082
    },
    {
        "content": "<p>did you read the definition of <code>lub</code>? did you put it in your VSCode? do you know what classical.epsilon is?</p>",
        "id": 205703824,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596327159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/205703606\">said</a>:</p>\n<blockquote>\n<p>otherwise return a default element</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span></p>",
        "id": 205703877,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596327259
    },
    {
        "content": "<p>you wouldn't get any error</p>",
        "id": 205703884,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596327292
    },
    {
        "content": "<p>but you wouldn't be able to prove anything about it in that case</p>",
        "id": 205703885,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596327298
    },
    {
        "content": "<p>treat it as an unspecified constant</p>",
        "id": 205703893,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596327305
    },
    {
        "content": "<p>I guess it isn't any different than saying t is_lub S. The assumption that t exists is in the statement.</p>",
        "id": 205703896,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596327344
    },
    {
        "content": "<p>Why wouldn't I be able to prove anything about it?</p>",
        "id": 205703947,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596327418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/205703824\">said</a>:</p>\n<blockquote>\n<p>did you read the definition of <code>lub</code>? did you put it in your VSCode? do you know what classical.epsilon is?</p>\n</blockquote>\n<p>Yes, but did not understand the result.</p>",
        "id": 205704001,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596327551
    },
    {
        "content": "<p>ah, it looks like the docstring for classical.epsilon just tells you the math name for the concept</p>",
        "id": 205704064,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596327707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/205703947\">said</a>:</p>\n<blockquote>\n<p>Why wouldn't I be able to prove anything about it?</p>\n</blockquote>\n<p>because it has no definition</p>",
        "id": 205704167,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596327871
    },
    {
        "content": "<p>it uses <code>classical.choice</code></p>",
        "id": 205704168,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596327880
    },
    {
        "content": "<p>which produces an element of any type <code>A</code> from a proof of <code>nonempty A</code> by fiat</p>",
        "id": 205704170,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596327897
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 205704406,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596328363
    },
    {
        "content": "<p>I'm not sure I entirely follow. I guess my worry is that it is something like the definition of 0 - 1 = 0 if 0 and 1 are natural numbers. That is, I might prove something that I didn't expect I could.</p>",
        "id": 205704526,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596328622
    },
    {
        "content": "<p>if <code>S</code> doesn't have an LUB, then <code>lub S</code> will be some real number whose value is outside of your knowledge</p>",
        "id": 205704571,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596328693
    },
    {
        "content": "<p>it will behave like an arbiratry real number</p>",
        "id": 205704573,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596328708
    },
    {
        "content": "<p>I guess it isn't much different than saying t is_lub S then?</p>",
        "id": 205704628,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596328807
    },
    {
        "content": "<p>That is <code>t : \\R</code> and <code>t is_lub S</code>.</p>",
        "id": 205704631,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596328848
    },
    {
        "content": "<p>Or is it actually safer?</p>",
        "id": 205704640,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596328899
    },
    {
        "content": "<p>Because the arbitrary number won't have the properties of the lub to use?</p>",
        "id": 205704686,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596328958
    },
    {
        "content": "<p>How do I get at the properties of lub S? That is, use the fact that it is an ub of S and it is leq to any ub of S in a proof.</p>",
        "id": 205705628,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596331012
    },
    {
        "content": "<p>I guess I need to prove: <code>example (S : set ℝ) : is_lub S (lub S) :=</code> ?</p>",
        "id": 205709698,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596339259
    },
    {
        "content": "<p>that would mean every set has lub</p>",
        "id": 205709765,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596339386
    },
    {
        "content": "<p>How do I get at the properties of lub S?</p>",
        "id": 205709877,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596339666
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon</span> <span class=\"err\">$</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">is_lub_unique</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht₁</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht₂</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"bp\">=</span> <span class=\"n\">t₂</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">ht₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ht₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ht₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">is_lub_lub</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">lub</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon_spec</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eq_lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">lub</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_lub_unique</span> <span class=\"n\">ht</span> <span class=\"err\">$</span> <span class=\"n\">is_lub_lub</span> <span class=\"n\">ht</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 205716405,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596353558
    },
    {
        "content": "<p>is this enough API?</p>",
        "id": 205716406,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596353563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span></p>",
        "id": 205716407,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596353571
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 205737796,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596392115
    },
    {
        "content": "<p>I was curious about defining Riemann integration and started experimenting with it as well -- I was wondering whether it might be easier to define partitions as a vector of real numbers rather than a mapping from <code>fin</code>? If it's a vector, you can easily pull in some of the existing machinery for sorting lists; for example merging two partitions just reduces to a single library call</p>",
        "id": 205930211,
        "sender_full_name": "Daniel Shapero",
        "timestamp": 1596559412
    },
    {
        "content": "<p>That sounds simpler. I don't know though, I'm new at this.</p>",
        "id": 206189521,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596744036
    },
    {
        "content": "<p>I would also be interested in hearing opinions on this.</p>",
        "id": 206318611,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596841480
    },
    {
        "content": "<p>It may just largely be a matter of preference. After having used <code>fin</code> for one proof I realize that you need to have everything set up very well from the very beginning in order not to bump into nasty coercion problems. For people with computational background thinking in terms of <code>vector</code> will probably seem more natural. I'm curious what other people with more Lean experience have to say, but it's good to bear in mind that the interface/API (i.e. for <code>fin</code> and <code>vector</code>) is of utmost importance. Also, I don't think you'll have to \"sort\" in the classical computer-science meaning of the term, where you really handle list/vector elements (like in a \"quicksort\" algorithm, say). You'll just be dealing with proofs that your sequences are <code>monotone</code>.</p>",
        "id": 206321731,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596845050
    },
    {
        "content": "<p>I'm trying to fill in the first sorry in this theorem. By using a rewrite and <code>set.​mem_set_of_eq</code> I can get to<code>z ∈ Z = ∃ x ∈ X, ∃ y ∈ Y, z = x + y</code>, but then I get stuck. I'm wondering it it would be simpler if I had stated the theorem differently, but I'm not sure how.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_of_lub</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">Y</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">})</span>\n<span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">is_ub</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">s10</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">s10</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s100</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">s100</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 206329453,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596857814
    },
    {
        "content": "<p>I guess finish works. I don't understand the description of finish though.</p>",
        "id": 206330050,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596859063
    },
    {
        "content": "<p>I'm not sure what I have done wrong here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">Y</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">})</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">s2</span> <span class=\"o\">(</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">x&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">y&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"n\">y&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a4</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">+</span> <span class=\"n\">y&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">s4</span> <span class=\"o\">:</span> <span class=\"n\">is_ub</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h0</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">s5</span> <span class=\"o\">:</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s4</span> <span class=\"n\">x&#39;</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">s6</span> <span class=\"o\">:</span> <span class=\"n\">is_ub</span> <span class=\"n\">Y</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">s7</span> <span class=\"o\">:</span> <span class=\"n\">y&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s6</span> <span class=\"n\">y&#39;</span> <span class=\"n\">a3</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 206333403,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596865359
    },
    {
        "content": "<p><code>(Z = {z | ∃ x ∈ X, ∃ y ∈ Y, z = x + y})</code> is just incorrect</p>",
        "id": 206334756,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596868001
    },
    {
        "content": "<p>ok, incorrect is a bit strong, but it doesn't have its intended meaning?</p>",
        "id": 206334790,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596868078
    },
    {
        "content": "<p>Lean treats it as <code>(Z) (H : Z = {z | ∃ x ∈ X, ∃ y ∈ Y, z = x + y})</code></p>",
        "id": 206334833,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596868101
    },
    {
        "content": "<p>which I guess still works</p>",
        "id": 206334840,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596868116
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pointwise</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">s</span><span class=\"o\">⦄,</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"c1\">-- implicit argument</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">⦄,</span> <span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"c1\">-- we prefer `≤`; extra bracket removed; implicit</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">is_lub_add</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">Y</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- `X + Y := { z | ∃ x y, x ∈ X ∧ y ∈ Y ∧ x + y = z }`</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hz</span> <span class=\"k\">in</span>\n  <span class=\"n\">hxy</span> <span class=\"bp\">▸</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hy</span><span class=\"o\">),</span>\n<span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">add_le_of_le_sub_left</span> <span class=\"err\">$</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">le_sub</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">h0</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_sub_iff_add_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span>\n  <span class=\"n\">hr</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 206335059,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596868519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> deja vu?</p>",
        "id": 206335061,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596868523
    },
    {
        "content": "<p>Do you know why I get <code>type mismatch at application</code> for the  <code>exists.elim s2</code>?</p>",
        "id": 206336348,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596871173
    },
    {
        "content": "<p>don't use <code>exists.elim</code></p>",
        "id": 206336352,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596871184
    },
    {
        "content": "<p>use <code>let</code></p>",
        "id": 206336353,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596871192
    },
    {
        "content": "<p>That works on existential elimination?</p>",
        "id": 206336453,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596871373
    },
    {
        "content": "<p>Is there an example somewhere?</p>",
        "id": 206336460,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596871400
    },
    {
        "content": "<p>Another more natural choice is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#obtain\">tactic#obtain</a> , example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">lint</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">dest</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n<span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Hm</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">dest</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H₃</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span>                     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">of_nat_eq_coe</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>                       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>                           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Hn</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>                               <span class=\"o\">:</span> <span class=\"n\">Hm</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>                           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H₄</span> <span class=\"o\">:</span> <span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">H₃</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H₅</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>                 <span class=\"k\">from</span> <span class=\"n\">of_nat</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">H₄</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>                     <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_of_add_eq_zero_right</span> <span class=\"n\">H₅</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h₆</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>        <span class=\"o\">:</span> <span class=\"n\">Hn</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206336690,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596871922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/206336460\">said</a>:</p>\n<blockquote>\n<p>Is there an example somewhere?</p>\n</blockquote>\n<p>look at my proof</p>",
        "id": 206336844,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596872172
    },
    {
        "content": "<p>the <code>let</code> I used is the existential elimination</p>",
        "id": 206336847,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596872194
    },
    {
        "content": "<p>Bit higher level than Kenny's:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 206338859,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1596876157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/206335061\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> deja vu?</p>\n</blockquote>\n<p>?</p>",
        "id": 206356861,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596908170
    },
    {
        "content": "<p>Is there a way to make it more verbose? Something like <code>obtain (x : ℝ, hx : x ∈ X, y : ℝ, hy : y ∈ Y, h : z = x + y) from a1,</code>?</p>",
        "id": 206357641,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596909680
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>(untested)</p>",
        "id": 206362001,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1596916938
    },
    {
        "content": "<p>Sorry, I was thinking more along the lines of showing explicitly what <code>hx</code>, <code>hy</code>,  and <code>h</code> get assigned to in the <code>obtain</code> statement.</p>",
        "id": 206362169,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596917261
    },
    {
        "content": "<p>Yeah, I don't think that's possible</p>",
        "id": 206362533,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1596917879
    },
    {
        "content": "<p>:(</p>",
        "id": 206362585,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596917924
    },
    {
        "content": "<p>I might prefer the <code>exists.elim</code> then, as it shows more of the details in the proof itself. I'm still not sure why I get <code>type mismatch at application</code> for the <code>exists.elim s2</code> though.</p>",
        "id": 206362779,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596918275
    },
    {
        "content": "<p>That's definitely possible</p>",
        "id": 206362918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596918599
    },
    {
        "content": "<p>use <code>rcases a_eq : a1 with  ⟨x, hx, y, hy, h⟩</code></p>",
        "id": 206362974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596918625
    },
    {
        "content": "<p>I don't know if <code>obtain</code> has a similar syntax</p>",
        "id": 206362979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596918639
    },
    {
        "content": "<p>Sorry, I'm not sure I see the difference. I still need to go to the other window to read what x, hx, etc. are?</p>",
        "id": 206363057,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596918842
    },
    {
        "content": "<p>what's the mwe?</p>",
        "id": 206363096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596918860
    },
    {
        "content": "<p>Oh I misunderstood your question</p>",
        "id": 206363109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596918908
    },
    {
        "content": "<p>I've been planning to add support for type ascriptions in rcases/obtain, so that you could write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span> <span class=\"k\">from</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 206363160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596918990
    },
    {
        "content": "<p>Yes, that is what I meant. That would be great.</p>",
        "id": 206363170,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596919030
    },
    {
        "content": "<p>you might have to put parentheses around the type ascriptions, for consistency with other uses of type ascription</p>",
        "id": 206363181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596919066
    },
    {
        "content": "<p>it also might interact with <code>|</code> in a weird way if you have a notation that uses <code>|</code></p>",
        "id": 206363229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596919101
    },
    {
        "content": "<p>I don't mind using exists.elim, but I think I am applying it to the double exists wrong?</p>",
        "id": 206363550,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596919754
    },
    {
        "content": "<p>I think I got it!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pointwise</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_ub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">is_ub</span> <span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">is_lub_add</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">Y</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">is_ub</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n  <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">s1</span> <span class=\"o\">(</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span> <span class=\"bp\">∧</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n      <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">a2</span> <span class=\"o\">(</span>\n        <span class=\"k\">assume</span> <span class=\"n\">y&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n        <span class=\"k\">assume</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"n\">x&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"n\">y&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span> <span class=\"bp\">∧</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">+</span> <span class=\"n\">y&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">is_ub</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h0</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">s3</span> <span class=\"o\">:</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s2</span> <span class=\"n\">x&#39;</span> <span class=\"n\">a3</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">s4</span> <span class=\"o\">:</span> <span class=\"n\">is_ub</span> <span class=\"n\">Y</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">s5</span> <span class=\"o\">:</span> <span class=\"n\">y&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s4</span> <span class=\"n\">y&#39;</span> <span class=\"n\">a3</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">s6</span> <span class=\"o\">:</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">+</span> <span class=\"n\">y&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n        <span class=\"k\">show</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n      <span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 206364293,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596921259
    },
    {
        "content": "<p>Where does this error come from?<br>\n<a href=\"/user_uploads/3121/JpWWXTYgBcdKd0dmile1ToAF/Screenshot-from-2020-08-08-15-31-29.png\">Screenshot-from-2020-08-08-15-31-29.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/JpWWXTYgBcdKd0dmile1ToAF/Screenshot-from-2020-08-08-15-31-29.png\" title=\"Screenshot-from-2020-08-08-15-31-29.png\"><img src=\"/user_uploads/3121/JpWWXTYgBcdKd0dmile1ToAF/Screenshot-from-2020-08-08-15-31-29.png\"></a></div>",
        "id": 206366973,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596925958
    },
    {
        "content": "<p>Oh</p>",
        "id": 206366986,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596925987
    },
    {
        "content": "<p>I got this one quite a lot, I was about to ask the same thing</p>",
        "id": 206366993,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596926006
    },
    {
        "content": "<p>Well, I know why this happens : the hypothesis <code>is_ub (X+Y) r</code> in the implication is implicitly named <code>a</code>, shadowing the <code>a</code> you want</p>",
        "id": 206367067,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596926093
    },
    {
        "content": "<p>But the only way to avoid this I know is writing the implication as a forall, namely <code>\\for (h : is_ub (X+Y) r), ...</code>. This way you can name the hypothesis so no problem of shadowing. But this is quite ugly, so maybe there's a better solution ?</p>",
        "id": 206367153,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596926249
    },
    {
        "content": "<p>How are you able to tell that the hypothesis is implicitly named <code>a</code>?</p>",
        "id": 206367307,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596926467
    },
    {
        "content": "<p>By reading the error message <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> The type of <code>a</code> is exactly the left side of your implication, which means precisely that <code>a</code> is a proof of <code>is_ub (X+Y) r</code></p>",
        "id": 206367378,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596926618
    },
    {
        "content": "<p>I see. Well, changing <code>a</code> and <code>b</code> to <code>t0</code> and <code>t1</code> fixes it. That works I guess.</p>",
        "id": 206367435,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596926689
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 206367450,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1596926717
    },
    {
        "content": "<p>No problem ! It would be nice for this to be fixed at some point anyway, but maybe it's harder than I imagine</p>",
        "id": 206367538,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596926880
    },
    {
        "content": "<p>just use <code>guard_hyp</code></p>",
        "id": 206379893,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596950655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/206363160\">said</a>:</p>\n<blockquote>\n<p>I've been planning to add support for type ascriptions in rcases/obtain, so that you could write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span> <span class=\"k\">from</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>This works now, as of <a href=\"https://github.com/leanprover-community/mathlib/issues/3730\">#3730</a>, which is a significant rewrite of <code>rcases</code> to support some more flexible pattern syntax. You can now use parentheses like <code>(a | b) | c</code> in patterns instead of the previous strict alternation of and/or</p>",
        "id": 206380029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596950894
    },
    {
        "content": "<p>Build is failing.</p>",
        "id": 206388310,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596967597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/206379893\">said</a>:</p>\n<blockquote>\n<p>just use <code>guard_hyp</code></p>\n</blockquote>\n<p>Could you explain a bit more what you meant ?</p>",
        "id": 206409589,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597003347
    },
    {
        "content": "<p>you can use <code>guard_hyp</code> to assert that a hypothesis has a certain type</p>",
        "id": 206428801,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597036479
    },
    {
        "content": "<p>so if you want to assert that <code>hx</code> has type <code>x \\in X</code> then just use <code>guard_hyp</code></p>",
        "id": 206428809,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597036502
    },
    {
        "content": "<p>I'm trying to define a partition using a list. Is this a good definition?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_head</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">head&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_last</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mono</span>   <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I think the <code>x_head</code> and <code>x_last</code> constructors ensure that the list is not empty?<br>\nUsing that I am trying to define the norm. I looked at using <code>list.foldr</code> for taking the max, but it requires an initial accumulator value that I would like to avoid.</p>",
        "id": 209937624,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600012946
    },
    {
        "content": "<p>I think maybe I need something like the <code>foldr1</code> function in Haskell.</p>",
        "id": 209937832,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600013261
    },
    {
        "content": "<p>Is there a way to have an option to show the types in the mathlib generated documentation?</p>",
        "id": 209941127,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600018237
    },
    {
        "content": "<p>For example that <code>l</code> is a list in the definition of a vector?<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/core/data/vector.html#vector\">https://leanprover-community.github.io/mathlib_docs/core/data/vector.html#vector</a></p>",
        "id": 209941319,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600018534
    },
    {
        "content": "<p>If you click on \"source\" you see <code>def vector (α : Type u) (n : ℕ) := { l : list α // l.length = n }</code> . Does this answer your question?</p>",
        "id": 209941381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600018595
    },
    {
        "content": "<p>I was being lazy and thought it might be nice to have an option to avoid that :)</p>",
        "id": 209941401,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600018658
    },
    {
        "content": "<p>Sorry</p>",
        "id": 209941477,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600018777
    },
    {
        "content": "<p><code>#print vector</code> within a Lean file should also tell you everything about it</p>",
        "id": 209941485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600018800
    },
    {
        "content": "<p>Even more work :)</p>",
        "id": 209941548,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600018866
    },
    {
        "content": "<p>If you hover over <code>.length</code> in <code>l.length</code>, you can see that the URL ends in <code>list.length</code> which is a clue. But feel free to open an issue <a href=\"https://github.com/leanprover-community/doc-gen/issues\">here</a>.</p>",
        "id": 209941558,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600018884
    },
    {
        "content": "<p>Ok. Thank you.</p>",
        "id": 209941574,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600018915
    },
    {
        "content": "<p>Added: <a href=\"https://github.com/leanprover-community/doc-gen/issues/63\">https://github.com/leanprover-community/doc-gen/issues/63</a></p>",
        "id": 209942003,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600019543
    },
    {
        "content": "<p>If a vector is based on a list, how do you use the functions defined for lists on it? Do you have to cast it to a list first?</p>",
        "id": 209944740,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600023419
    },
    {
        "content": "<p>A vector is a pair consisting of a list and a proof.</p>",
        "id": 209944750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600023437
    },
    {
        "content": "<p><code> vector α n = {l // l.length = n}</code> defines a list and a proof?</p>",
        "id": 209944827,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600023520
    },
    {
        "content": "<p>The proof comes from the type somehow?</p>",
        "id": 209944839,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600023543
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html?highlight=subtype#inductively-defined-propositions\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html?highlight=subtype#inductively-defined-propositions</a></p>",
        "id": 209944914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600023616
    },
    {
        "content": "<p>the proof comes from the proof which you'll supply that l.length=n when you're making the term. vector is a subtype -- see the link above.</p>",
        "id": 209944929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600023647
    },
    {
        "content": "<p>So I should be able to get at the list by using <code>.val</code>?</p>",
        "id": 209946379,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600025665
    },
    {
        "content": "<p>Got it. Thank you.</p>",
        "id": 209946598,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600026091
    },
    {
        "content": "<p>Is there a function defined similar to <code>vector.head</code> for getting the last element of the vector where you don't have to worry about the vector being <code>nil</code>?</p>",
        "id": 209947869,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600028095
    },
    {
        "content": "<p>I'm trying to make something like this work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">x_zero</span> <span class=\"o\">:</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_last</span> <span class=\"o\">:</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">pointed_partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem_block</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">at</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Icc</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">at</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">at</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 209948965,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600030127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/209947869\">said</a>:</p>\n<blockquote>\n<p>Is there a function defined similar to <code>vector.head</code> for getting the last element of the vector where you don't have to worry about the vector being <code>nil</code>?</p>\n</blockquote>\n<p>I don't know the vector or list API's at all but why don't you just write the precise function you want and then ask whether this precise function is already there?</p>",
        "id": 209950071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600032046
    },
    {
        "content": "<p>I can write the type, but I'm having trouble defining it.</p>",
        "id": 209950089,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600032100
    },
    {
        "content": "<p>The same as this but returns the last element instead of the first:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span> <span class=\"o\">[],</span>    <span class=\"n\">h</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">contradiction</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 209950151,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600032193
    },
    {
        "content": "<p>It doesn't seem to exist already.  One way is to define it with <code>vector.nth</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">less_than_or_equal</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 209950326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600032497
    },
    {
        "content": "<p>Nice. Thank you.</p>",
        "id": 209950378,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600032607
    },
    {
        "content": "<p>Another is in terms of <code>list.last</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"o\">[],</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">contradiction</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 209950383,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600032644
    },
    {
        "content": "<p>In the first, should n be n + 1 in the body?</p>",
        "id": 209950397,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600032713
    },
    {
        "content": "<p>I don't think so, since if you have a vector of length n+1, since it's zero-indexed the last element will be indexed by n.</p>",
        "id": 209950455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600032783
    },
    {
        "content": "<p>Oh. Right.</p>",
        "id": 209950462,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600032799
    },
    {
        "content": "<p>I don't know how heavily you're invested in <code>vector</code>, but all of these things (I think) are already in the API for <code>fin n</code>, i.e. representations of <code>n</code>-tuples as <code>fin n \\to A</code>.</p>",
        "id": 209950589,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600032998
    },
    {
        "content": "<p>And data.matrix.notation has nice notation for those</p>",
        "id": 209950602,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600033041
    },
    {
        "content": "<p>Not completely invested. I just figured that since there is a lot of beginner documentation and tutorials on lists and vectors that I would understand it better by going with that.</p>",
        "id": 209950733,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600033207
    },
    {
        "content": "<p>For example I don't understand <code>(finset.univ : finset (fin P.n)).sup (λ j, (P.x j.cast_succ - P.x j.succ))</code></p>",
        "id": 209950769,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600033313
    },
    {
        "content": "<p>Where's that from?</p>",
        "id": 209950824,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600033385
    },
    {
        "content": "<p>Much earlier in the thread.</p>",
        "id": 209950877,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600033475
    },
    {
        "content": "<p>Oh, I see. In the link for the lean web editor? Note the commented out notation there :)</p>",
        "id": 209950939,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600033563
    },
    {
        "content": "<p>That should be approximately familiar mathematical notation.</p>",
        "id": 209950945,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600033579
    },
    {
        "content": "<p>Yeah. I'm going to have to prove things about it though.</p>",
        "id": 209951021,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600033709
    },
    {
        "content": "<p>This is another reason to use <code>fin n</code>if the API is more developed.</p>",
        "id": 209951036,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600033765
    },
    {
        "content": "<p>True.</p>",
        "id": 209951092,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600033858
    },
    {
        "content": "<p>If I understand the API :)</p>",
        "id": 209951100,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600033883
    },
    {
        "content": "<p>I'll probably move on to it at some point.</p>",
        "id": 209951165,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600033992
    },
    {
        "content": "<p>What is the * after Type by the way?</p>",
        "id": 209951440,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600034415
    },
    {
        "content": "<p>It tells lean to go and figure out the universe variable.</p>",
        "id": 209951447,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600034435
    },
    {
        "content": "<p>Ah.</p>",
        "id": 209951448,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600034446
    },
    {
        "content": "<p>The finset.univ line says that, for all values of (fin P.n), that is, from 0 to n-1.</p>",
        "id": 209952950,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600036826
    },
    {
        "content": "<p>Then the supremum of the set of all those values, under the map taking each such value j to P.x[j + 1] - P.x[j]</p>",
        "id": 209952971,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600036886
    },
    {
        "content": "<p>In python list accession syntax</p>",
        "id": 209952974,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600036898
    },
    {
        "content": "<p>finset.univ means a finset (a finite set) of all the terms for a given type</p>",
        "id": 209953096,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600037098
    },
    {
        "content": "<p>For my own understanding, this seemed to work? Is this right?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n\n<span class=\"kn\">inductive</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"c1\">-- a : element to prepend, n : length of vector to prepend to, v : vector to prepend to</span>\n<span class=\"c1\">-- note the use of n in the type of v</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">first</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">v1</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"n\">def</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">v1</span>\n<span class=\"n\">def</span> <span class=\"n\">v3</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">v2</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">first</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">v2</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">first</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">v3</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">last</span> <span class=\"n\">n</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 209962399,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600054246
    },
    {
        "content": "<p><code>first</code> and <code>last</code> didn't seem to need a proof that the vector wasn't empty like the ones in the library, so I'm a little unsure. I am guessing that is because of the way that <code>vector</code> was defined?</p>",
        "id": 209962464,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600054375
    },
    {
        "content": "<p>Functionally I think this is equivalent though?</p>",
        "id": 209962477,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600054415
    },
    {
        "content": "<p>The proof that it isn't empty in your definition is that the patterns you're matching on require a vector of length (n + 1)</p>",
        "id": 209962680,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600054781
    },
    {
        "content": "<p>If you want to play more with these definitions, you could make se arguments implicit, like making the length argument to cons or first or last implicit. Since it can be inferred from the type of vector.</p>",
        "id": 209962740,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600054876
    },
    {
        "content": "<p>Also, look into Pi types, which are type level foralls</p>",
        "id": 209962746,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600054901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/209962680\">said</a>:</p>\n<blockquote>\n<p>The proof that it isn't empty in your definition is that the patterns you're matching on require a vector of length (n + 1)</p>\n</blockquote>\n<p>That is what I was guessing.</p>",
        "id": 209962855,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600055063
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 209962858,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600055081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/formalizing.20definitions.20for.20real.20analysis/near/209952950\">said</a>:</p>\n<blockquote>\n<p>The finset.univ line says that, for all values of (fin P.n), that is, from 0 to n-1.</p>\n</blockquote>\n<p>I'm sorry, I'm still not sure I get this. Maybe if the steps were broken apart it would be easier to see? How would it look if we first took the differences and then the sup? What would be the least abstract way to build this up from just the definition of fin?</p>",
        "id": 210618445,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600526434
    },
    {
        "content": "<p><code>fin n</code> is the subtype of <code>nat</code> of nats which are less than <code>n</code>.<br>\n<code>finset (fin n)</code> is the type of all finite sets (unordered lists with no duplicates) whose members are all from <code>fin n</code>.<br>\n<code>univ</code> (or <code>finset.univ</code> if the namespace isn't open) is the term of <code>finset X</code> containing all terms of type <code>X</code> when <code>X</code> is a type with only finitely many terms (which <code>fin n</code> is).<br>\nIf you just type <code>#check finset.univ</code> lean doesn't know what you want a finset of so <code>(finset.univ : finset (fin n))</code> is the term representing the set of all the terms of <code>fin n</code>.<br>\n<code>finset.sup</code> then takes the supremum of the function <code>(λ j, (P.x j.cast_succ - P.x j.succ))</code> over the specified set, with the dot notation so it comes after the set, in this case <code>univ</code>.</p>",
        "id": 210619916,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600528410
    },
    {
        "content": "<p>I think this code is taking the differences first then the sup already. The <code>(λ j, (P.x j.cast_succ - P.x j.succ))</code> function is applied to each term of <code>fin P.n</code> and the sup is taken of those values as it goes.</p>",
        "id": 210620038,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600528566
    },
    {
        "content": "<p>So <code>finset (fin 3)</code> has the terms <code>[0, 1, 2], [0, 2, 1], [1, 0, 2]</code> etc.?</p>",
        "id": 210620251,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600528895
    },
    {
        "content": "<p>By unordered I mean the ordering doesn't matter, so its<br>\n<code>{}, {0}, {1}, {2}, {0,1}, {0,2}, {1,2}, {0,1,2}</code><br>\nand the last one there is <code>univ</code>.</p>",
        "id": 210620346,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600529023
    },
    {
        "content": "<p>I see.<br>\nWhat happens if the set has only one element? If I'm reading the definition of partition correctly, I think it allows that?</p>",
        "id": 210620567,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600529379
    },
    {
        "content": "<p>It looks like it is using some kind of fold. Maybe it defaults to some value?</p>",
        "id": 210621960,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600531299
    },
    {
        "content": "<p>If the partition has 1 element then <code>n = 0</code> as it is a map from <code>fin (n + 1) \\to \\R\\ge0</code> so I think in that case its the <code>sup</code> over the empty set, which defaults to the infimum of the whole target. Which version of the code are you using, it changed a bit throughout this thread.</p>",
        "id": 210623422,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600533312
    },
    {
        "content": "<p>I was thinking that since it is taking adjacent differences there would be a problem with the set of only one element, since that element does not have an adjacent element.</p>",
        "id": 210623971,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600533977
    },
    {
        "content": "<p>I had been looking at the following code, but now it gives an error next to the .sup:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_last</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">partition</span>\n\n<span class=\"n\">def</span> <span class=\"n\">norm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"c1\">-- := ⨆ i : fin P.n, P.x i.succ - P.x i.cast_succ</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">-</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">partition</span>\n</code></pre></div>",
        "id": 210624063,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600534098
    },
    {
        "content": "<p>Also, why is it <code>(finset.univ : finset (fin P.n))</code> instead of <code>(finset.univ (finset (fin P.n)))</code>?</p>",
        "id": 210624343,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600534547
    },
    {
        "content": "<p>the colon is specifying the type of the term on the left. <code>finset.univ</code> takes no explicit arguments, if you type <code>#check finset.univ</code> you should see <code>finset.univ : finset ?M_1</code>, so there are no arguments to be filled in, but there is a metavariable in the type, which means that lean doesn't know what sort of  finset the term <code> finset.univ</code>  is without extra hints, which is what the <code>: </code> is doing, telling lean what type you expect it to be.</p>",
        "id": 210624473,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600534727
    },
    {
        "content": "<p>You could instead tell lean you want to specify implicit arguments as arguments directly,  by using <code>@finset.univ</code>, the type of this is now  <code>finset.univ : Π {α : Type u_1} [_inst_1 : fintype α], finset α</code>, which we see has 2 arguments, the type and the fact it is a fintype, so we could write instead, <code>(@finset.univ (fin P.n)).sup ...</code></p>",
        "id": 210624540,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600534826
    },
    {
        "content": "<p>I see. Thank you.</p>",
        "id": 210624635,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600534959
    },
    {
        "content": "<p>The error next to the sup is discussed somewhere above in the thread, but its basically the issue you are worried about, if there is only one thing in the partition lean want to assign some default value to the norm, as its a sup over an empty set, but it doesn't have a sensible choice, as <code>\\R</code> has no minimal element. Thats why in the version I gave a while ago I switched it to <code> \\R\\ge0</code>, which has a minimal element!</p>",
        "id": 210624636,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600534959
    },
    {
        "content": "<p>When the partition has <code>n+1</code> points in it, the list of things we take the sup over only has <code>n</code>.</p>",
        "id": 210624713,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600535083
    },
    {
        "content": "<p>I see.</p>",
        "id": 210624803,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600535208
    }
]