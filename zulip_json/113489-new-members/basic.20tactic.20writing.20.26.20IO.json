[
    {
        "content": "<p>a slightly different question, is there any support for defining lean functions from standard input? For instance, is there a way to use <code>get_line</code> to read a string like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">ne</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n<p>and turn this into a lean expression, which could be used in a tactic? I looked around in <code>tactic.expr</code> and <code>system.io</code> but I can't seem to find anything of this kind. I  can write a simple parser for now, but it would be nice to know if there's a general function or something</p>",
        "id": 212102906,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1601658903
    },
    {
        "content": "<p>You can only do this from the <code>parser</code> monad</p>",
        "id": 212112689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601664297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span> Here's a proof of concept:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system.io</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span> <span class=\"n\">lean.parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">from_file</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">buf</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.unsafe_run_io</span> <span class=\"o\">(</span><span class=\"n\">io.fs.read_file</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"n\">prod.fst</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">with_input</span> <span class=\"n\">p</span> <span class=\"n\">buf.to_string</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">load_parser</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">types.texpr</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"n\">t</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">eval_expr</span> <span class=\"n\">string</span><span class=\"o\">),</span>\n  <span class=\"n\">from_file</span> <span class=\"n\">f</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.load</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">load_parser</span> <span class=\"n\">types.texpr</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">interactive.exact</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">load</span> <span class=\"s2\">\"foo.txt\"</span><span class=\"o\">,</span>\n<span class=\"c1\">-- foo : ℕ → Prop := λ (n : ℕ), n ≠ 0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>foo.txt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 212115035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601665532
    },
    {
        "content": "<p>That’s very helpful Mario, thank you very much!</p>",
        "id": 212115145,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1601665570
    },
    {
        "content": "<p>Here's a version that doesn't do any file IO and just does the string -&gt; expr part</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">lean</span> <span class=\"n\">lean.parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">parse_parser</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">types.texpr</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"n\">t</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">eval_expr</span> <span class=\"n\">string</span><span class=\"o\">),</span>\n  <span class=\"n\">prod.fst</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">with_input</span> <span class=\"n\">p</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.parse</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">parse_parser</span> <span class=\"n\">types.texpr</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">interactive.exact</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">parse</span> <span class=\"s2\">\"λ (n : ℕ), n ≠ 0\"</span><span class=\"o\">,</span>\n<span class=\"c1\">-- foo : ℕ → Prop := λ (n : ℕ), n ≠ 0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212115422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601665724
    },
    {
        "content": "<p>I'm not super familiar yet with monads as a programming structure, would it be hard to write a version of <code>io.iterate</code>  as a <code>tactic unit</code>? Just looking at how it's used in <a href=\"https://agentultra.github.io/lean-for-hackers/\">Lean 3 for Hackers</a>, it would be useful to have a counter of some kind in an iteration. </p>\n<p>Specifically, the proof I'm trying to automate is of the form </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system.io</span> <span class=\"n\">tactic</span> <span class=\"n\">data.list</span>\n<span class=\"kn\">open</span>  <span class=\"n\">io</span> <span class=\"n\">tactic</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aList</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">aList.length</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">aList.nth_le</span> <span class=\"n\">i.val</span> <span class=\"n\">i.property</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">aList</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>It seems that the simplest way to automate this would be to iterate a counter <code>i</code> from 0  to <code>aList.length</code> (for any <code>aList</code>)</p>\n<p><code>tactic.interactive.iterate</code> allows one to specify the size of the loop, but not to refer to the counter variable</p>",
        "id": 212251791,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1601863047
    },
    {
        "content": "<p>It's easy to do unbounded iteration using a recursive function</p>",
        "id": 212256322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601870933
    },
    {
        "content": "<p>you don't need <code>io</code> for that</p>",
        "id": 212256327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601870951
    },
    {
        "content": "<p>By the way, your proof looks a lot like <code>fin_cases</code></p>",
        "id": 212256346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601870988
    },
    {
        "content": "<p>Here's a really literal interpretation of how you could automate that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">aList.length</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">aList.nth_le</span> <span class=\"n\">i.val</span> <span class=\"n\">i.property</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">aList</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"s2\">\"h\"</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">),</span>\n    <span class=\"n\">tactic.interactive.</span><span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span> <span class=\"n\">h</span> <span class=\"n\">none</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">⟨</span><span class=\"bp\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩))),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212256664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601871506
    }
]