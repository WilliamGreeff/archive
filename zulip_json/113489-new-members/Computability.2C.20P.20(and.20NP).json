[
    {
        "content": "<p>Hi all,<br>\nMe and <span class=\"user-mention\" data-user-id=\"320867\">@Daan van Gent</span> have been working on trying to define problems, P and hopefully even NP. We were wondering how exactly this process of development should go, as we feel this subject is something that eventually should be in mathlib.</p>\n<p>Right now, our questions are: when is a first version ready to be pushed to mathlib? There are already some definitions and theorems that we believe to be of interest, could they already be PR'ed? Is there stuff that we need to do before it's ready to be PR'ed?  Basically, this is something we're having fun with and want to continue, but we don't know how the process works exactly.</p>\n<p>For the interested reader, the state of the project right now: we have forked mathlib to <a href=\"https://github.com/pimsp/mathlib\">this repository</a>, and while this is very much a work in progress (we're doing a partial refactoring now), we currently have</p>\n<ul>\n<li>A definition of problem</li>\n<li>A definition of reduction</li>\n<li>A definition of computable (in polytime) (using Turing machines)</li>\n<li>\n<p>A definition of P<br>\nand the lemma's</p>\n</li>\n<li>\n<p>A proof that the identity is (polytime) computable</p>\n</li>\n<li>A proof that the problem on <code>bool</code> with <code>tt</code> being the only yes-instance is in P<br>\nAlso, on the TM front we're working on increasing the functional power of a Turing machine, for example by making a call stack and formalising libraries (both still very much a work in progress).</li>\n</ul>\n<p>Our goals (in order of short term to long term):</p>\n<ul>\n<li>Prove that the composition of (polytime) computable functions is (polytime) computable (this will give that a problem reducing to a problem in P is itself in P)</li>\n<li>Prove that all four problems on <code>bool</code> are in P</li>\n<li>Prove that is_even is in P</li>\n<li>Prove that is_odd is in P by giving a reduction to is_even</li>\n<li>Define NP (this should be very doable already)</li>\n<li>Show that P is a subset of NP</li>\n<li>Define NPC</li>\n<li>Enhance the functional power of Turing machines further</li>\n<li>Prove that SAT is in NPC</li>\n</ul>",
        "id": 208327235,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598611236
    },
    {
        "content": "<p>Wow! That's a huge list. You make it seem like the LftCM workshop was ages ago!</p>",
        "id": 208328324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598612146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is probably the maintainer who knows best how and what and where this should go in mathlib. He wrote most of the compu/TM stuff that is in mathlib</p>",
        "id": 208328400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598612193
    },
    {
        "content": "<p>Concerning PR's, just to get a feeling for the process, I would start with a very small PR (say 30 lines).<br>\nIn general we encourage PRs to be at most (say, roughly) 300 lines. [Of course there are exceptions.]</p>",
        "id": 208328469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598612279
    },
    {
        "content": "<p>\"early and often\" is the advice for PRs, I think. As soon as something feels a bit stable (e.g. you've already been through one cycle of throwing it out in disgust and starting over, but this time the next few steps seem to work as well), try to split off that chunk of your work into a PR.</p>",
        "id": 208330901,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598614285
    },
    {
        "content": "<p>I would have suggested a PR by about the second item on the list</p>",
        "id": 208379437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598639608
    },
    {
        "content": "<p>it sounds like you have 5 or 6 PR's here</p>",
        "id": 208379464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598639624
    },
    {
        "content": "<p>oops, I missed that the second half is only goals and not completed stuff. I would suggest 2 PR's, one for the definition of P and one for work on the TM library</p>",
        "id": 208379842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598639796
    },
    {
        "content": "<p>Thanks for all the advice! I didn't mention this, but we work with self-defined encodings instead of encodables (the encodable seems to be better suited for partial recursive functions than Turing machines). This has already been refactored and used, so could that be the first PR? And for the second PR, we can probably do the definitions of (polytime) computable by a Turing machine and the definition of P. Does that make sense?</p>",
        "id": 208428822,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598699497
    },
    {
        "content": "<p>By the way, how do I PR something? Is there a link somewhere where it's explained?</p>",
        "id": 208428880,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598699552
    },
    {
        "content": "<p>You can start <a href=\"https://leanprover-community.github.io/contribute/index.html\">here</a>. Feel free to ask for clarification or help if anything is unclear!</p>",
        "id": 208428936,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598699644
    },
    {
        "content": "<p>Thanks, that's really useful! I see we do need write access to non-master branches of the mathlib repository, can we get that? Our usernames are MadPidgeon and pimsp</p>",
        "id": 208432480,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598705695
    },
    {
        "content": "<p>Invites sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 208432940,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598706353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319356\">@Pim Spelier</span> While I understand the reason you need a different encodable interface, I would like to only have one, so you should keep in mind how the existing encodable definitions can be retrofitted on a more TM friendly definition.</p>",
        "id": 208450116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598729718
    },
    {
        "content": "<p>What exactly do you mean with retrofitting the existing definitions? The difference between <code>encodable</code> and <code>encoding</code> is something we've been thinking about, and our plan was to eventually show that there are two functions <code>f: \\N \\to list \\Gamma\\0\\1</code> and <code>g: list \\Gamma\\0\\1 \\to \\N</code> such that $g\\circ f$ is primitive recursive and $f \\circ g$ is computable by a Turing machine. That should give a way to go from <code>encodable</code>s to <code>encoding</code>s and vice versa.</p>",
        "id": 208476911,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598780306
    },
    {
        "content": "<p>Does that sound like a good solution, or do you have other suggestions/comments?</p>",
        "id": 208476912,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598780310
    }
]