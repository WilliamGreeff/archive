[
    {
        "content": "<p>I thought not p and p-&gt; false were the same.  But:<br>\nIf I do <br>\nhave h30: ¬ (c ∈ p):= λ h, (h3 (h29 h)),        I get h30: ¬ (c ∈ p)<br>\nbut if I do <br>\nhave h30 := λ h, (h3 (h29 h),   I get h30: p -&gt; false.<br>\nWhat's up with that?<br>\n(This is not meant to be a working example.  And my proof is working, so it's just a question about <br>\nwhat is going on,  nothing needs to be fixed.)</p>",
        "id": 209595379,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599712855
    },
    {
        "content": "<p>They are defeq. I don't know what <code>c \\in p</code> in your example means, but it looks like it is the same as <code>p</code></p>",
        "id": 209595456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599712994
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 209595569,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599713158
    },
    {
        "content": "<p>They are not syntactically equal but they are definitionally equal. You can move between them with <code>change</code> and in term mode but tactics like <code>rw</code> are sensitive to the difference</p>",
        "id": 209599054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599717963
    },
    {
        "content": "<p>Here's a MWE:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span><span class=\"o\">:(</span><span class=\"bp\">¬</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">s</span><span class=\"o\">):=</span>\n\n   <span class=\"k\">begin</span>\n     <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n     <span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n     <span class=\"k\">have</span> <span class=\"n\">h5</span><span class=\"o\">:</span><span class=\"bp\">¬</span> <span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n     <span class=\"n\">exact</span> <span class=\"n\">h4</span><span class=\"o\">,</span>   <span class=\"c1\">-- or exact h5, both work</span>\n   <span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>So put your cursor before the exact h4 step and note the difference between h4 and h5.</p>",
        "id": 209599451,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599718451
    },
    {
        "content": "<p><code>exact</code> sees through definitional equality. I don't understand the question.</p>",
        "id": 209599490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599718532
    },
    {
        "content": "<p>The observation is that h4 gets type s-&gt; false rather than ¬ s:<br>\nThe question, if there is one here, is why that is?   Those two types are \"definitionally equal\",  which I think (but am not sure)<br>\nmeans \"have the same normal form after beta, eta, and delta reduction.\"   So which one IS the normal form, s-&gt;false or ¬ s ?  <br>\nI guess it is s -&gt; false and    then ¬ s reduces to s-&gt; false,  since that's the type you get from h4.   But when in h5,  you specify the <br>\ntype, then it  prints the type I specified (¬ s)  since they have a common reduct.   </p>\n<p>So the Lean type system is rather complex and with all those legal reductions it's problematic whether it really has <br>\nstrong normalization.   How do we know that it does?   Well,  that is a question that goes far beyond the original  curiosity so please feel free to ignore it.   I don't want to get distracted into theoretical stuff,  I'm trying to check a proof.</p>",
        "id": 209599752,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599718860
    },
    {
        "content": "<p>I am not a logician, I'm not sure I understand your question. Lean does not unfold definitions by default, but will do so if you ask it to.</p>",
        "id": 209599914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599719082
    },
    {
        "content": "<p>OK let's forget about this,  it's not interfering with my proof at all.</p>",
        "id": 209599943,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599719145
    },
    {
        "content": "<p>I deal with super-complex terms in eg commutative algebra and some terms might not even have a normal form, or if they do I don't want to see it</p>",
        "id": 209599945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599719147
    },
    {
        "content": "<p>Deciding whether to proceed by unfolding a definition or not is very situation-dependent</p>",
        "id": 209600000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599719177
    },
    {
        "content": "<p>I don't think lean does it by default</p>",
        "id": 209600007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599719186
    },
    {
        "content": "<p>or as I say, never unfold definitions</p>",
        "id": 209600010,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599719191
    },
    {
        "content": "<p>Right</p>",
        "id": 209600020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599719206
    },
    {
        "content": "<p>If you're unfolding definitions you could be writing API</p>",
        "id": 209600028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599719217
    },
    {
        "content": "<p>I read in the manual that you can tag your definitions with certain tags  (attributes)  to control when they will be unfolded during rewriting.  But so far I'm doing fine controlling it manually.  And I'm unfolding definitions all the time, usefully.</p>",
        "id": 209600037,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599719225
    },
    {
        "content": "<p>In case it's helpful, in <code>core.lean</code> the definition of logical negation is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"kn\">prefix</span> <span class=\"bp\">`¬`</span> <span class=\"o\">:=</span> <span class=\"n\">not</span>\n</code></pre></div>\n\n\n<p>(I think definitional equality in Lean works by trying to unify two lambda expressions, unfolding definitions as needed.  It's on a best-effort basis, and I think the only guarantees are (1) it notices when things are obviously the same and (2) it won't say two things are definitionally equal if they aren't.)</p>",
        "id": 209600222,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599719435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284844\">@Michael Beeson</span> I can tell you a list of rules, which you won't remember, or you can just learn it by osmosis the way everyone did</p>",
        "id": 209600320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599719552
    },
    {
        "content": "<blockquote>\n<p>So which one IS the normal form, s-&gt;false or ¬ s ?<br>\nI guess it is s -&gt; false and then ¬ s reduces to s-&gt; false, since that's the type you get from h4. But when in h5, you specify the<br>\ntype, then it prints the type I specified (¬ s) since they have a common reduct.</p>\n</blockquote>\n<p>The normal form is s -&gt; false. You can test this with <code>#reduce</code>. But, and this is important, when lean tests for definitional equality it does <em>not</em> reduce both sides to a normal form and test the result for equality. Semantically it's equivalent to that, but that would be far too expensive in most cases (and <code>#reduce</code> is pretty unusable for reasonable sized terms for this reason). Instead, it selectively unfolds definitions on both sides, and uses heuristics to try to luck out and find that two things are syntactically equal and hence defeq, or that they have different head constructors and cannot be defeq, with some edge cases that involve doing lots of unfolding, potentially as far as the normal form (which is the worst case scenario).</p>",
        "id": 209606830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599725088
    },
    {
        "content": "<blockquote>\n<p>So the Lean type system is rather complex and with all those legal reductions it's problematic whether it really has<br>\nstrong normalization.</p>\n</blockquote>\n<p>It doesn't</p>",
        "id": 209606893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599725139
    },
    {
        "content": "<p>Lean's consistency is based on a model theoretic argument, not a syntactic one</p>",
        "id": 209606915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599725160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284844\">@Michael Beeson</span></p>",
        "id": 209606994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599725195
    },
    {
        "content": "<p>Lean's <code>refl</code> isn't transitive (because it's decidable).</p>",
        "id": 209622215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599735284
    }
]