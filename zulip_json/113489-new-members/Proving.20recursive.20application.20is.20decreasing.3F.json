[
    {
        "content": "<p>I'm attempting to write the <code>flip</code> function on the following inductive type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span>     <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">M</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"n\">symm</span>     <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span>    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M&#39;&#39;</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M&#39;&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;&#39;</span>\n\n<span class=\"n\">def</span> <span class=\"n\">flip</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M&#39;&#39;</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">M&#39;&#39;</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M&#39;&#39;</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>However, I end up with <code>failed to prove recursive application is decreasing, well founded relation</code> in the <code>symm</code> and <code>trans</code> cases, requesting that I prove <code>M' &lt; M</code> and (even more problematically) <code>M &lt; M</code>.</p>\n<p>Does anyone have an idea as to how I could fix this? I tried <code>using_well_founded</code>, but I couldn't get it to work.</p>",
        "id": 209347200,
        "sender_full_name": "Harrison Grodin",
        "timestamp": 1599543042
    },
    {
        "content": "<p>By default equation compiler will try to prove your definition terminates by mapping the tuple of all arguments to a natural number using <code>has_sizeof</code>, and showing that number strictly decreases between recursive calls. Unfortunately, we can't assign a <code>has_sizeof</code> to <code>foo</code> by pattern-matching because again we cannot yet prove it will terminate.</p>\n<p>The solution is to use the recursion principle of <code>foo</code> directly, which is called <code>foo.rec_on</code>.</p>",
        "id": 209366894,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599559447
    },
    {
        "content": "<p>Isn't <code>flip</code> just <code>foo.symm</code>?</p>",
        "id": 209464357,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1599616189
    }
]