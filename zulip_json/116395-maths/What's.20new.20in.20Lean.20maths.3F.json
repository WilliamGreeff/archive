[
    {
        "content": "<p>This thread is for people to occasionally announce or flag code which they or others have written, which is publically available, finished / usable, and which might be of general use or interest to the lean community. I'm starting it because I find looking through mathlib commits confusing and time-consuming, and because there are things which are happening other than mathlib commits.</p>",
        "id": 133605485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536492685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> has proved quadratic reciprocity! This is a bit of a milestone because all proofs have some sort of a combinatorial / counting nature to them, and manipulating finite sets, whilst second nature to mathematicians, can be quite tough in Lean. The PR is still open; it's <a href=\"https://github.com/leanprover/mathlib/pull/327\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/327\">https://github.com/leanprover/mathlib/pull/327</a> . There's a bunch of other stuff too -- Fermat's Little Theorem, Wilson's Theorem, the Legendre symbol of course, multiplicative group of a finite field is cyclic and so on. This PR covers a serious chunk of the third year basic number theory course at Imperial College London.</p>",
        "id": 133605676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536493138
    },
    {
        "content": "<p>On a rather more mundane note, work of several people at <a href=\"https://github.com/leanprover/mathlib/commit/4421f46dc2e0ec818344bcd897c1ee75ff82cbad\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/4421f46dc2e0ec818344bcd897c1ee75ff82cbad\">https://github.com/leanprover/mathlib/commit/4421f46dc2e0ec818344bcd897c1ee75ff82cbad</a> and <a href=\"https://github.com/leanprover/mathlib/commit/085c0125015c29058ce5a418e88a791cb232ee4b\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/085c0125015c29058ce5a418e88a791cb232ee4b\">https://github.com/leanprover/mathlib/commit/085c0125015c29058ce5a418e88a791cb232ee4b</a> has given us the fact that submodules of the quotient module <code>M/N</code>biject with submodules of <code>M</code> containing <code>N</code> and we now also have basic definitions of Noetherian modules plus proofs that submodules and quotient modules of Noetherian modules are Noetherian.</p>",
        "id": 133605778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536493428
    },
    {
        "content": "<ul>\n<li><code>rcases</code> (and hence <code>rintros</code>) supports now also quotient types. This allows one to write <code>by rintro ⟨a⟩ ⟨b⟩; exact ...</code> instead of a sequence of <code>quotient.induction_on</code></li>\n<li>(small change) more uniform naming <code>filter.vmap</code> is now <code>filter.comap</code></li>\n<li>we have our first concrete categories in Lean: <code>CommRing</code>, <code>Top</code>, and <code>Meas</code>! Due to <span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> and <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></li>\n</ul>",
        "id": 133606251,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536494183
    },
    {
        "content": "<p>I think this thread is a very good idea. But we shouldn't forget to update documentation as well. Do we have an example of <code>rcases</code> using quotients in the tactic doc? I guess the quadratic reciprocity stuff should be mentioned in the theories folder of documentation</p>",
        "id": 133620485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536518095
    },
    {
        "content": "<p>It seems <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/tactics.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/tactics.md\">https://github.com/leanprover/mathlib/blob/master/docs/tactics.md</a> mentions quotients but there are not so many examples there</p>",
        "id": 133620495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536518131
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- `filter [t1, ⋯, tn]` replaces a goal of the form `s ∈ f.sets`</span>\n<span class=\"cm\">and terms `h1 : t1 ∈ f.sets, ⋯, tn ∈ f.sets` with `∀x, x ∈ t1 → ⋯ → x ∈ tn → x ∈ s`.</span>\n\n<span class=\"cm\">`filter [t1, ⋯, tn] e` is a short form for `{ filter [t1, ⋯, tn], exact e }`.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">filter_upwards</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">pexpr_list</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e&#39;</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">optional</span> <span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n</pre></div>\n\n\n<p>Since when did we have the <code>near</code> tactic?</p>",
        "id": 133625180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536527855
    },
    {
        "content": "<p>I was about to try to find this</p>",
        "id": 133625225,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536527886
    },
    {
        "content": "<p>But I was never able to use it :(</p>",
        "id": 133625233,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536527912
    },
    {
        "content": "<p>I recall Cyril showing a very nice version of this tactic in Coq</p>",
        "id": 133625255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536527986
    },
    {
        "content": "<p>I added this 6 month ago. It's just a cheap version of Cyril's near tactic. Its more a reimplementation of Isabelle's <code>eventually</code> tactic</p>",
        "id": 133632944,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536544466
    },
    {
        "content": "<p>Cross reference: <a href=\"#narrow/stream/113488-general/subject/abel.20tactic/near/133643278\" title=\"#narrow/stream/113488-general/subject/abel.20tactic/near/133643278\">abel tactic</a></p>",
        "id": 133643643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536564971
    },
    {
        "content": "<p>Oh this is great news. Summary: the situation before this tactic was that we could prove things like <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>x</mi><mo>+</mo><mi>y</mi><msup><mo>)</mo><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>x</mi><mi>y</mi><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">(x+y)^2=x^2+2xy+y^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mbin\">+</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">2</span><span class=\"mord mathit\">x</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span> were elements of a commutative ring (or even a commutative semiring) using the <code>ring</code> tactic, but for analogous questions about abelian groups the <code>ring</code> tactic did not work, and until now, if <code>simp</code> did not solve the goal, then one had to get one's hands dirty.</p>",
        "id": 133648808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536571511
    },
    {
        "content": "<p>We have <code>linarith</code>, a new tactic that <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> has written, which should definitely be mentioned here. It proves a bunch of things which hitherto were quite annoying / fiddly to prove. See it in action here: <a href=\"#narrow/stream/113489-new-members/subject/Feedback.20(Heine.20Borel.20in.20progress)/near/134050573\" title=\"#narrow/stream/113489-new-members/subject/Feedback.20(Heine.20Borel.20in.20progress)/near/134050573\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/subject/Feedback.20(Heine.20Borel.20in.20progress)/near/134050573</a> (e.g. proving that if <code>0 &lt;= x</code> then <code>x/2 &lt;= x</code>).</p>",
        "id": 134103969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537194437
    },
    {
        "content": "<p>Today Kevin Buzzard is turning 50 <span class=\"emoji emoji-1f382\" title=\"birthday\">:birthday:</span>. <a href=\"#narrow/stream/113488-general/subject/Happy.20birthday.2C.20Kevin!\" title=\"#narrow/stream/113488-general/subject/Happy.20birthday.2C.20Kevin!\">Congratulate him here</a>!<br>\nWith a group of people we have been hacking like crazy to give him some birthday presents:</p>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Made immense (really immense!) progress on his <code>exp</code> branch in the community fork. We now have <code>exp</code>, <code>cos</code>, <code>sin</code> (all both complex and real), basic identities like <code>sin_add</code>, a proof that these functions are continuous, the intermediate value theorem, and finally <code>pi</code>. Yeah! <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> <span class=\"emoji emoji-1f942\" title=\"clink\">:clink:</span> </li>\n<li>Other people have worked hard in a secret repository that is now public: <a href=\"https://github.com/semorrison/kbb\" target=\"_blank\" title=\"https://github.com/semorrison/kbb\">https://github.com/semorrison/kbb</a> (I sincerely apologize if you would have liked to participate but didn't know about this. I tried to contact as many people as I thought would be interested out of band, but of course I couldn't start a thread about this in the <code>#general</code> stream.)</li>\n<li>This repository contains a definition of <code>det</code> (determinant of matrices) and a proof that it is a monoid morphism. Thanks <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> </li>\n<li><span class=\"user-mention\" data-user-id=\"120536\">@Jack Crawford</span> has a bunch of stuff on a different implementation of matrices. Well done! (There seems to be a trade-off, the current implementation of matrices is nice to prove things with, his could well be better for computations.)</li>\n<li>A way to extract a matrix from a linear map between finite-dimensional vector spaces with bases.</li>\n<li>Characteristic polynomials of square matrices. (But no properties at all.)</li>\n<li>A proof that PID's are UFD's. Thanks <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> (This result might be helpful for constructing splitting fields, because you want to know that an arbitrary (nonzero) polynomial factors into a product of irreducibles.)</li>\n<li>A (admittedly ad-hoc) definition of the modular group, plus a boatload of facts about it (e.g., we have a finite set of representatives of the action of <code>SL2Z</code> on matrices (over <code>int</code>) with determinant <code>m &gt; 0</code>).</li>\n<li>A definition of complex derivatives, holomorphic function, modular forms.</li>\n<li>A proof that holomorphic functions form a subring of the ring of functions (on an arbitrary open domain in the complex numbers).</li>\n<li>A proof that modular forms form a submodule of functions on the upper half plane.</li>\n<li>An almost definition of Hecke operators. (Sorry Kevin, Lean was fighting back hard.)<br>\nCongratulations (and disucssions of about the maths!) can go <a href=\"#narrow/stream/113488-general/subject/Happy.20birthday.2C.20Kevin!\" title=\"#narrow/stream/113488-general/subject/Happy.20birthday.2C.20Kevin!\">here</a></li>\n</ul>",
        "id": 134356908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537506646
    },
    {
        "content": "<p>It's time for an update in this thread. And someone should also start the corresponding thread in <code>#general</code>.</p>",
        "id": 135037903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538489005
    },
    {
        "content": "<p>We now have Hensel's Lemma, thanks to <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span></p>",
        "id": 135037915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538489019
    },
    {
        "content": "<p>We also have <code>holor</code>. A <code>holor</code> is a generalisation of vectors and matrices. It is what the physicists would call a \"tensor\".</p>",
        "id": 135038009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538489084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Did a bunch of topology. Stuff on locally compact spaced. He also contributed groupoids.</p>",
        "id": 135038047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538489140
    },
    {
        "content": "<p>Quadratic reciprocity has been merged. Once again: thanks <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 135038119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538489178
    },
    {
        "content": "<p>For the sake of completeness, the <code>holor</code> library is from <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> based on his work in Isabelle: <a href=\"https://link.springer.com/chapter/10.1007/978-3-319-66107-0_4\" target=\"_blank\" title=\"https://link.springer.com/chapter/10.1007/978-3-319-66107-0_4\">https://link.springer.com/chapter/10.1007/978-3-319-66107-0_4</a></p>",
        "id": 135038132,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538489196
    },
    {
        "content": "<p>I don't see holors, locally compact spaces and quadratic reciprocity in <a href=\"https://github.com/leanprover/mathlib/tree/master/docs/theories\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/tree/master/docs/theories\">https://github.com/leanprover/mathlib/tree/master/docs/theories</a> <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 135039245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538490251
    },
    {
        "content": "<p>Thanks to Chris and Kenny, and inspired by work of my UROP students over the summer (especially <span class=\"user-mention\" data-user-id=\"120276\">@Morenikeji Neri</span> ) we now have determinants! <a href=\"https://github.com/leanprover/mathlib/issues/404\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/404\">#404</a></p>",
        "id": 135415885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539017814
    },
    {
        "content": "<p>next stop characteristic polynomials?</p>",
        "id": 135415959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539017903
    },
    {
        "content": "<p>Done in <code>kbb</code></p>",
        "id": 135415986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539017950
    },
    {
        "content": "<p>My birthday present just keeps on giving</p>",
        "id": 135416119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539018099
    },
    {
        "content": "<p>You only turn 50 once...</p>",
        "id": 135416125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539018114
    },
    {
        "content": "<p>Thanks to the hard work Johannes we now have a nice start on Lebesgue integration: <a href=\"https://github.com/leanprover/mathlib/commit/0fe284916a73ce92227f77826ad9655b1329eb83\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/0fe284916a73ce92227f77826ad9655b1329eb83\">https://github.com/leanprover/mathlib/commit/0fe284916a73ce92227f77826ad9655b1329eb83</a></p>",
        "id": 135843390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539621903
    },
    {
        "content": "<p>Patrick and Johannes have worked very hard on quotient topologies on algebraic structures: <a href=\"https://github.com/leanprover/mathlib/commit/2395183b5b424371d5170f6c7bca691a654ae5bb\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/2395183b5b424371d5170f6c7bca691a654ae5bb\">https://github.com/leanprover/mathlib/commit/2395183b5b424371d5170f6c7bca691a654ae5bb</a></p>",
        "id": 135843426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539621953
    },
    {
        "content": "<p>Chris proved that subgroups of cyclic groups are cyclic: <a href=\"https://github.com/leanprover/mathlib/commit/c5930f574c54e3fd157b1ef8b93da8b1f50c8ed4\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/c5930f574c54e3fd157b1ef8b93da8b1f50c8ed4\">https://github.com/leanprover/mathlib/commit/c5930f574c54e3fd157b1ef8b93da8b1f50c8ed4</a></p>",
        "id": 135843497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539621987
    },
    {
        "content": "<p>Uniform spaces have Hausdorff completions <a href=\"https://github.com/leanprover/mathlib/blob/80d688e3ae2a721ab61f4cd000ea3e336158b04f/analysis/topology/completion.lean#L535\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/80d688e3ae2a721ab61f4cd000ea3e336158b04f/analysis/topology/completion.lean#L535\">https://github.com/leanprover/mathlib/blob/80d688e3ae2a721ab61f4cd000ea3e336158b04f/analysis/topology/completion.lean#L535</a>. More precisely, there is a completion functor which is left-adjoint to the inclusion of complete Hausdorff spaces into all uniform spaces.</p>",
        "id": 135846567,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539625424
    },
    {
        "content": "<p>Abelian topological groups have a uniform space structure <a href=\"https://github.com/leanprover/mathlib/blob/80d688e3ae2a721ab61f4cd000ea3e336158b04f/analysis/topology/topological_groups.lean#L27\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/80d688e3ae2a721ab61f4cd000ea3e336158b04f/analysis/topology/topological_groups.lean#L27\">https://github.com/leanprover/mathlib/blob/80d688e3ae2a721ab61f4cd000ea3e336158b04f/analysis/topology/topological_groups.lean#L27</a> characterized by uniform continuity of substraction. The completion of such a topological group is a topological group with its canonical uniform structure (in particular the later is complete). Separated topological ring also have completions with the expected properties</p>",
        "id": 135846763,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539625604
    },
    {
        "content": "<p>I merged <a href=\"https://github.com/leanprover/mathlib/issues/386\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/386\">#386</a> Chris' PR about trigonometric functions. So we have pi, exp, etc now</p>",
        "id": 135954996,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539761153
    },
    {
        "content": "<p>looks like I messed up something. Could someone help reset <code>leanprover-community/mathlib</code>?</p>",
        "id": 135955257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539761536
    },
    {
        "content": "<p>fixed</p>",
        "id": 135955276,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539761627
    },
    {
        "content": "<p>thanks</p>",
        "id": 135955325,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539761700
    },
    {
        "content": "<p>each PID is a UFD is now in mathlib</p>",
        "id": 136026140,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539848677
    },
    {
        "content": "<p>Ok, who is up for a summary of today?</p>",
        "id": 146817351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541445868
    },
    {
        "content": "<p>First of all: the module refactor landed!</p>",
        "id": 146817362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541445882
    },
    {
        "content": "<p>Second: Perfect closure has been merged.</p>",
        "id": 146817368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541445893
    },
    {
        "content": "<p>This is a green light for algebraic closure and Galois theory</p>",
        "id": 146817388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541445910
    },
    {
        "content": "<p>We now have all facts about <code>irrational</code> numbers that you would ever want to know.</p>",
        "id": 146817519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541446012
    },
    {
        "content": "<p>(Ok, ok, we don't yet have irrationality op <code>pi</code>.)</p>",
        "id": 146817550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541446046
    },
    {
        "content": "<p>We have Stone-Cech compactification.</p>",
        "id": 146817557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541446051
    },
    {
        "content": "<p>Simon's monotonicity tactic has been merged in mathlib.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">monotonicity</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ac_mono</span><span class=\"bp\">*</span>\n</pre></div>",
        "id": 147997742,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542663755
    },
    {
        "content": "<p>We can combine with norm_num too:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">mono</span><span class=\"bp\">*</span> <span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 147998023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542664038
    },
    {
        "content": "<p>Great news! Thanks <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>! This is going to be very helpful. I really want to go back to the simplicial project now. Monotone functions are all over the place there.</p>",
        "id": 148016023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542688061
    },
    {
        "content": "<p>Please keep me posted of ups and downs of using the tactic :)</p>",
        "id": 148016136,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542688241
    },
    {
        "content": "<p>(co)limits, and (co)limits in the category of Types!</p>",
        "id": 150739441,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543790427
    },
    {
        "content": "<p>There's still more to come (support for all the special shapes, products, equalizers, etc).</p>",
        "id": 150739443,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543790442
    },
    {
        "content": "<p>Also recently: equivalences of categories, along with a new tactic <code>slice</code>, for <code>conv</code>ing your way into long compositions, without having to use <code>rw category.assoc</code> by hand.</p>",
        "id": 150739492,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543790534
    },
    {
        "content": "<p>Sébastien's bounded continuous function has been merged <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> Thank you so much Sébastien and Mario! This was a large PR, adding more than 600 lines to mathlib, even after getting Mario-compressed. </p>\n<blockquote>\n<p>The type of bounded continuous functions from a topological space to a metric space, with the corresponding uniform distance. We prove basic statements such as the completeness of the space when the target is complete, and the Arzela-Ascoli theorem saying that a set of functions with a common modulus of continuity is compact. When the target space is a normed space, we also put the canonical normed space structure on the space of bounded continuous functions, working pointwise and checking that everything is compatible with the distance.</p>\n</blockquote>",
        "id": 154468807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546685183
    },
    {
        "content": "<p>Thanks a lot Mario, this is awesome!</p>",
        "id": 154469138,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1546685981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> could you tell us something about this Giry monad?</p>",
        "id": 156374379,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547824052
    },
    {
        "content": "<p>Yep, with the newest commits the Giry monad is in mathlib In category speak, its the monad for the <code>measure</code> functor in the category of <code>measurable</code> spaces and functions. With this we get a straight forward way to construct product: <code>prod M1 M2 := do { x &lt;- M1, y &lt;- M2, return (x, y) }</code> <br>\nAlso I added measurable equivalences, which are helpful to adopt measurability proofs to different (but isomorphic) spaces</p>",
        "id": 156375691,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547825044
    },
    {
        "content": "<p>the Giry monad will be also important to write down probabilistic programs or constructions. Especially in the theorem of Ionescu-Tulcea it provides a construction mechanism for discrete-time stochastic processes out of Markov kernels</p>",
        "id": 156375770,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547825126
    },
    {
        "content": "<p>Can you use it in the category <code>types</code>?</p>",
        "id": 156396464,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1547842635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120726\">@Luca Gerolla</span> do you understand a word of this? Luca formalised some stochastic stuff in Lean</p>",
        "id": 156408538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547854467
    },
    {
        "content": "<p>I can understand the probability notions (after googling) - in class we just focused on Kolmogorov extension theorem since we only studied discrete time-homogeneous Markov processes. <br>\nFascinating to see this general approach to formalise discrete-time stochastic processes :-)</p>",
        "id": 156432294,
        "sender_full_name": "Luca Gerolla",
        "timestamp": 1547894579
    },
    {
        "content": "<p>the next step is to work on projective families, then Ionescu-Tulcea isn't far.</p>",
        "id": 156443607,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547916532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> no, we need the category of measurable spaces</p>",
        "id": 156443615,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547916572
    },
    {
        "content": "<p>Doesn't that limit the applicability to writing programs?</p>",
        "id": 156446651,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1547922303
    },
    {
        "content": "<p>Yes, the need to have a probability measure limits the program. Measurability is a very wide and adaptible concept. If you really want your program to be outside of measurability the Giry monad can't help you</p>",
        "id": 156458525,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547944698
    },
    {
        "content": "<p>I was wondering if you could embed it in type with a trick like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Giry</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 156489827,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548004927
    },
    {
        "content": "<p>That allows you to implement <code>pure</code>, <code>map</code> and (i believe) <code>bind</code></p>",
        "id": 156490029,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548005234
    },
    {
        "content": "<p>A scheme is a topological space equipped with some structure and satisfying some axioms. It makes sense to talk about morphisms of schemes (which are continuous maps on the topological spaces plus some other data involving the extra structure plus some axioms), and schemes form a category.</p>\n<p>The category of schemes has finite products. In short, if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span></span></span></span> are schemes, then there's a product scheme <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>×</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">S\\times T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mbin\">×</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span></span></span></span>, defined up to unique isomorphism, and satisfying the usual universal property. However the underlying topological space of a product of schemes is <em>not</em> the product of the underlying topological spaces (and the underlying type of a product is not the product of the underlying types).</p>\n<p>I have no idea what monads have got to do with measure theory, but it occurred to me last week when talking to Ramon that with our <code>scheme X</code> idea (this is \"unbundled\", right?) where <code>X</code> is the underlying type, one can't use instances like <code>scheme X -&gt; scheme Y -&gt; scheme X \\times Y</code> because that's the wrong product. Can I use monads in some crazy way to help here? <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>  seems to think that monads can help with products in this measurable situation...</p>\n<p>What do products look like when everything gets bundled? Oh -- it's just a map <code>scheme \\times scheme -&gt; scheme</code>, right?</p>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Why are you having trouble extending a sheaf on a basis to a sheaf on the space, when I managed to do it without using categories? Is this anything to do with bundling or is this just universe issues?</p>",
        "id": 156491890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548008367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> What is <code>Giry s</code> in your case? Is <code>x</code> a measure on <code>s</code>? And what is the measurable space on<code>a</code>?</p>",
        "id": 156502444,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548026032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I want to construct the usual product of the shape <code>measure A -&gt; measure B -&gt; measure (A x B)</code>. This would be the expected product from measure theory (assuming sigma finite measures). Here the Giry monad allows a factored proof.<br>\nI don't see how monads will help with your problem...</p>",
        "id": 156502565,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548026210
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 156542773,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1548083995
    },
    {
        "content": "<p>Johannes and Sander defined the <a href=\"https://github.com/leanprover/mathlib/commit/edfa2061547510a41db4d0d471130badcb92ef20\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/edfa2061547510a41db4d0d471130badcb92ef20\">rank of a linear map</a>!</p>",
        "id": 156618466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548175025
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover/mathlib/issues/553\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/553\">#553</a> was merged, we have now Lipschitz continuous functions, the Banach fixed-point theorem</p>",
        "id": 156682401,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548243802
    },
    {
        "content": "<p>We also have the point wise order on products as the canonical order structure</p>",
        "id": 156682413,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548243819
    },
    {
        "content": "<p>seqeuence spaces (PR <a href=\"https://github.com/leanprover/mathlib/issues/440\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/440\">#440</a>) is merged</p>",
        "id": 156688372,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548249947
    },
    {
        "content": "<p>Measures form a complete lattice now</p>",
        "id": 156778780,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548342449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> 's module refactoring is in mathlib now. A type can now have multiple modules over different base rings.</p>",
        "id": 157051157,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548703808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> splitting polynomials and <code>clear_aux_decl</code> are in mathlib now</p>",
        "id": 157100526,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548764483
    },
    {
        "content": "<p>This is great news! Thanks <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <br>\nThis means that we can now define all sorts of interesting extensions of  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span>. Number theory is getting closer and closer!</p>",
        "id": 157128654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548788491
    },
    {
        "content": "<p>no its not splitting fields, just the splitting polynomials. The splitting field PR is still a PR...</p>",
        "id": 157129032,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548788765
    },
    {
        "content": "<p>Aaah, too bad.</p>",
        "id": 157129051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548788785
    },
    {
        "content": "<p>Number theory is still getting closer. I don't want to take on a new project right now but I feel like Dedekind domains might be accessible now, and probably would be an excellent test for the new module refactor.</p>",
        "id": 157134402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548792960
    },
    {
        "content": "<p>That can happen independently of the Galois theory stuff happening at Imperial and of any number fields stuff, it's pure commutative algebra.</p>",
        "id": 157134499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548793030
    },
    {
        "content": "<p>Congratulations to <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>: his proof of the Hilbert basis theorem is now in mathlib!</p>",
        "id": 157171442,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548838246
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 157171453,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548838271
    },
    {
        "content": "<p>I tried to prove Hilbert basis in September with the old version of modules and it was basically \"impossible\" -- I know that's a silly word, but what I mean is that the natural proof needed more from modules than mathlib could give me. Since then I've been regarding the proof of this theorem as a good benchmark for the theory of rings and modules, and think it's great that this now works. Commutative algebra is a bit like finite group theory -- there are a bunch of basic techniques, and once you have them all, there is a whole world of theorems which are accessible. It is also the correct generality for proofs of results which number theorists, algebraic geometers etc are interested in. As people might know, at Imperial we are working on Galois theory (mostly the students, not me) and if we can prove the <a href=\"https://en.wikipedia.org/wiki/Fundamental_theorem_of_Galois_theory\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Fundamental_theorem_of_Galois_theory\">fundamental theorem of Galois theory</a> (FTG) then this will be an even more powerful indication that things are going in the right direction. I can do Hilbert basis in 30 minutes in a lecture and it only relies on the definition of a Noetherian ring, but FTG takes several lectures in total and also relies on a bunch of definitions like normal and separable field extensions.</p>",
        "id": 157182521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548850441
    },
    {
        "content": "<p>We have now <span class=\"user-mention\" data-user-id=\"130980\">@Jan-David Salchow</span>'s opeartor name, and <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s premetric spaces and fancy completion criteria. Also <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>'s <code>fold</code> theory is finally merged</p>",
        "id": 157678977,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1549447992
    },
    {
        "content": "<p>Congrats to all of you. Especially <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> that was quite a long delivery (-; <span aria-label=\"baby\" class=\"emoji emoji-1f476\" role=\"img\" title=\"baby\">:baby:</span></p>",
        "id": 157684720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549454983
    },
    {
        "content": "<p>Thanks! :D</p>",
        "id": 157688313,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549458746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s isometries and isometric isomorphisms are in mathlib!</p>",
        "id": 157773101,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1549542867
    },
    {
        "content": "<p>So now how do we prove that if X and Y are isometric metric spaces, and if for all epsilon &gt; 0 there's a covering of X by open discs of radius epsilon such that given any ten distinct discs in this covering, the intersection of these ten discs is empty, then the same is true for Y?</p>",
        "id": 157776914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549546814
    },
    {
        "content": "<p>Well, by hand, unfolding everything, business as usual. No transfer tactic yet. But now the question makes sense :)</p>",
        "id": 157778182,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549547984
    },
    {
        "content": "<p>Following the merge of <a href=\"https://github.com/leanprover/mathlib/issues/481\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/481\">#481</a> we now have a cleaner equivalence relation for localization, universal property of localization, and basic facts about ideals of localization.</p>",
        "id": 158713061,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550352501
    },
    {
        "content": "<p>But we don't have Neil's predicate. Will you PR it?</p>",
        "id": 158713618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550353387
    },
    {
        "content": "<p>Then we'll have cleaner proofs that A[1/fg]=A[1/f][1/g]</p>",
        "id": 158713624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550353404
    },
    {
        "content": "<p>Jeremy's derivatives PR <a href=\"https://github.com/leanprover/mathlib/issues/748\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/748\">#748</a> is merged. I believe this means that mathlib now has strictly more math than the Lean 2 library <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 159724743,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551455516
    },
    {
        "content": "<p>We missed a couple of highlights in this thread. I can see at least:</p>\n<ul>\n<li>Sébastien proved <a href=\"https://github.com/leanprover-community/mathlib/pull/816\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/816\">Baire's theorem</a></li>\n<li>Kenny proved <a href=\"https://github.com/leanprover-community/mathlib/pull/778\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/778\">Nakayma's lemma</a></li>\n<li>Alexander introduced <a href=\"https://github.com/leanprover-community/mathlib/pull/834\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/834\">convex sets and functions</a></li>\n</ul>",
        "id": 162080882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553890978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> defined the <a href=\"https://github.com/leanprover-community/mathlib/commit/e8bdc7fc14c6d56d4040892d16929f310e9d03d5\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/e8bdc7fc14c6d56d4040892d16929f310e9d03d5\">hyperreals</a></p>",
        "id": 162081370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553891346
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/851\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/851\">#851</a> Fundamental theorem of algebra has been merged. Kudos to <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 162795336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554708448
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/881\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/881\">#881</a> We now have dual vector spaces and a proof that <code>V</code> and <code>dual K V</code> are isomorphic for fin.dim <code>V</code>. Kudos to <span class=\"user-mention\" data-user-id=\"210057\">@Fabian Glöckle</span></p>",
        "id": 162808476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554723107
    },
    {
        "content": "<p>I showed Chris' proof to Chris' second year analysis lecturer (who taught him this theorem this term). He replied \"it's quite difficult to understand -- what is the benefit of writing it in this way instead of LaTeX?\"</p>",
        "id": 162809347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554724000
    },
    {
        "content": "<p>I agree. And I hope that this proof becomes more readable if we have more theory.</p>",
        "id": 162809451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554724095
    },
    {
        "content": "<p>Hi there! I'm a final year Maths and Computing student at Imperial and I'm doing my Master's project with Kevin. For the last few months, I've been working on redefining schemes in Lean. I've completely refactored the <code>lean-stacks-project</code> repository and, even though it's still a work in progress, I'm glad to announce that it's in a good enough state to be shared. You can find it here: <a href=\"https://github.com/ramonfmir/lean-scheme\" target=\"_blank\" title=\"https://github.com/ramonfmir/lean-scheme\">https://github.com/ramonfmir/lean-scheme</a>. :-)</p>\n<p>The main novelties are:</p>\n<ul>\n<li>Locally ringed spaces.</li>\n<li>Using the <code>is_localization</code> predicate to simplify the proof of the sheaf condition for the structure sheaf, avoiding all of the \"canonical isomorphism nonsense\".</li>\n<li>Having no files named <code>tagXXXX.lean</code>.</li>\n</ul>\n<p>In this time I've found quite a few definitions and lemmas that I believe should be in mathlib so I'll get them mathlib-ready and I'll start PR-ing them.</p>\n<p>Also, especially since I know that there are things here which overlap with stuff that some of you are working on, I'd really appreciate your feedback.</p>",
        "id": 163039673,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1554926063
    },
    {
        "content": "<p>Are you in some way suggesting that calling 20 files <code>tagABCD.lean</code> was in some way a bad idea? ;-)</p>",
        "id": 163039721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554926115
    },
    {
        "content": "<blockquote>\n<p>In this time I've found quite a few definitions and lemmas that I believe should be in mathlib </p>\n</blockquote>\n<p>This includes the definition of scheme, right?</p>",
        "id": 163048841,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554932517
    },
    {
        "content": "<p>Quite seriously, \"good enough to be shared\" is in my experience at most half the work of \"usable by other people because it's in mathlib\".</p>",
        "id": 163049087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554932723
    },
    {
        "content": "<p>This isn't meant to be discouraging --- I would really really like to see actual maths in mathlib, and with schemes we're finally breaking into the 2nd half of last century. :-)</p>",
        "id": 163049097,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554932741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span>, could we talk about refactoring this to use the category theory library? I would start at the file <code>presheaf.lean</code>, merging it with my PR <a href=\"https://github.com/leanprover-community/mathlib/issues/886\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/886\">#886</a>.</p>",
        "id": 163064523,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554950044
    },
    {
        "content": "<p>Hopefully it is not actually that much work.</p>",
        "id": 163064532,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554950073
    },
    {
        "content": "<p>yo people, this is an announce thread, take it somewhere else</p>",
        "id": 163065092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554950788
    },
    {
        "content": "<p>We now have <code>omega</code>! Kudos to <span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span>!</p>",
        "id": 163544044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555492374
    },
    {
        "content": "<p>This should also be in #general! :)</p>",
        "id": 163548525,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1555496840
    },
    {
        "content": "<p>Thanks! :)</p>",
        "id": 163556566,
        "sender_full_name": "Seul Baek",
        "timestamp": 1555505158
    },
    {
        "content": "<p>Some catching up for this thread:</p>\n<ul>\n<li>Michael Howes defined <a href=\"https://github.com/leanprover-community/mathlib/pull/1118\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1118\">group presentations</a></li>\n<li>Kenny defined <a href=\"https://github.com/leanprover-community/mathlib/pull/754\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/754\">direct limit of modules, abelian groups, rings, and fields</a> and constructed <a href=\"https://github.com/leanprover-community/mathlib/pull/1087\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1087\">integral closures</a> in commutative rings</li>\n<li>Sébastien proved the <a href=\"https://github.com/leanprover-community/mathlib/pull/900\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/900\">open mapping theorem</a></li>\n<li>Paul-Nicolas made a <a href=\"https://github.com/leanprover-community/mathlib/pull/988\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/988\">normalize cast tactic</a></li>\n<li>Scott defined <a href=\"https://github.com/leanprover-community/mathlib/pull/1002\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1002\">monoidal categories</a></li>\n<li>Joe defined the <a href=\"https://github.com/leanprover-community/mathlib/pull/1149\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1149\">Bochner integral</a></li>\n<li>Alexander refactored <a href=\"https://github.com/leanprover-community/mathlib/pull/943\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/943\">linear combinations</a></li>\n</ul>\n<p>Don't hesitate to add things I missed!</p>",
        "id": 169640897,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562240287
    },
    {
        "content": "<p>There is certainly a ton of stuff that has been flowing into mathlib, but most importantly: Sébastien's manifold PR just got merged!</p>",
        "id": 176803545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569638809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (Now you can update your blogpost from January or something <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>)</p>",
        "id": 176803560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569638877
    },
    {
        "content": "<p>It's a bit early to update this blogpost, we still don't have smooth manifold and the tangent functor.</p>",
        "id": 176814825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569656651
    },
    {
        "content": "<p>I was looking at that blog post only yesterday, and realised I was looking forward to updating it.</p>",
        "id": 176825019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569674916
    },
    {
        "content": "<p>I know we are very inconsistent in using this thread, but we now have a very nice opportunity: mathlib knows about Cayley-Hamilton! <a href=\"https://github.com/leanprover-community/mathlib/issues/3276\">#3276</a></p>",
        "id": 203481636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594369622
    },
    {
        "content": "<p>I see the Haar measure PR has been merged! This is a really nice addition to mathlib, and I wonder whether this has been formalized in any other proof assistant. Together with Yury's impressive work on integral refactoring and the fundamental theorem of calculus, it means measure theory and integration is turning into a really good shape.</p>",
        "id": 206550769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597134144
    },
    {
        "content": "<p>Yeah this is awesome. It means we can state <a href=\"https://en.wikipedia.org/wiki/Pontryagin_duality\">Pontryagin duality</a>. But what are we going to do about the fact that the textbook proof is 50 pages of functional analysis but that I need it to state the generalized Riemann Hypothesis?</p>",
        "id": 206551306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597134579
    },
    {
        "content": "<p>Surely we could state it already? Just talking about the dual group, or the evaluation map from the double dual to the original group, doesn't require knowing about Haar measure.</p>",
        "id": 206558254,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597140137
    },
    {
        "content": "<p>Kevin probably meant he wants Fourier transform.</p>",
        "id": 206558550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597140438
    },
    {
        "content": "<p>How far are we from having Fubini's theorem? With FTC+Fubini we could say that we have integration in mathlib (maybe we would need completeness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> spaces to be honest).</p>",
        "id": 206558656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597140526
    },
    {
        "content": "<p>But we should definitely do all the functional analysis in the vicinity of Pontryagin duality! My guess is that most of this material is going to be fairly pleasant to formalise.</p>",
        "id": 206558689,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597140556
    },
    {
        "content": "<p>I just PR'd a \"Fubini\" theorem that you will not appreciate. :-) <a href=\"https://github.com/leanprover-community/mathlib/issues/3732\">#3732</a></p>",
        "id": 206558794,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597140625
    },
    {
        "content": "<p>Yes, I saw that PR yesterday and clicking on the link broke my heart. But keep up the good work on categories, we really need sheaves with values in a category!</p>",
        "id": 206558941,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597140761
    },
    {
        "content": "<p>Yes sorry, I want L^2(G)=L^2(Ghat) etc</p>",
        "id": 206573023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597151870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/206718085\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/eb4b2a05384b2c8e096c8c2d61f6e949a031493f\">feat(field_theory/algebraic_closure): algebraic closure (#3733)</a></strong><br>\nfeat(field_theory/algebraic_closure): algebraic closure (<a href=\"https://github.com/leanprover-community/mathlib/issues/3733\">#3733</a>)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_alg_closed</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>TODO: Show that any algebraic extension embeds into any algebraically closed extension (via Zorn's lemma).</p>\n<p>Co-authored-by: Patrick Massot &lt;<a href=\"mailto:patrickmassot@free.fr\">patrickmassot@free.fr</a>&gt;<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/eb4b2a05384b2c8e096c8c2d61f6e949a031493f\">https://github.com/leanprover-community/mathlib/commit/eb4b2a05384b2c8e096c8c2d61f6e949a031493f</a></p>\n</blockquote>",
        "id": 206733087,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597257318
    },
    {
        "content": "<p>Reid would point out that you shouldn't have chosen an algebraic closure. It's not even unique up to unique isomorphism! You should have defined the category of algebraic closures of k and proved it's nonempty.</p>",
        "id": 206737332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597259391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/What's.20new.20in.20Lean.20maths.3F/near/206558656\">said</a>:</p>\n<blockquote>\n<p>How far are we from having Fubini's theorem? With FTC+Fubini we could say that we have integration in mathlib (maybe we would need completeness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> spaces to be honest).</p>\n</blockquote>\n<p>I'm working towards Fubini's theorem. It will still be some work, I'm currently at the stage \"define finitary products of measures\".</p>",
        "id": 206772626,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597282535
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/compare/measure-prod\">https://github.com/leanprover-community/mathlib/compare/measure-prod</a></p>",
        "id": 206772630,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597282541
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/116395-maths/topic/product.20measures\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/product.20measures</a></p>",
        "id": 206772689,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597282604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/What's.20new.20in.20Lean.20maths.3F/near/206737332\">said</a>:</p>\n<blockquote>\n<p>Reid would point out that you shouldn't have chosen an algebraic closure. It's not even unique up to unique isomorphism! You should have defined the category of algebraic closures of k and proved it's nonempty.</p>\n</blockquote>\n<p>that's <code>is_alg_closed</code> right; and inhabited implies nonempty?</p>",
        "id": 206786744,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597303003
    },
    {
        "content": "<p>I'm really thrilled to see that algebraic closure merged, for several reasons. The whole algebraic closure thing has become very embarrassing. And I'm also very happy to see a new very significant contribution by Kenny, after we failed to push through a number of attempts (collectively, the maintainer team and Kenny). Could we get a layman summary of what happened. Is this a new approach? Is this building on Chris's earlier work? Were there issues that Chris faced and were solved in the meantime?</p>",
        "id": 206874133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597354137
    },
    {
        "content": "<p>Did you see that Larry Paulson wrote alg  closures in Isabelle and wrote a paper about it, just a few months ago, crowing about how Isabelle was the first prover with alg closures?</p>",
        "id": 206881768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597359777
    },
    {
        "content": "<p>Hey, it would be nice to do real closed fields. I'm sure the model theorists and the people working on o-minimality would be happy.</p>",
        "id": 206881942,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597359879
    },
    {
        "content": "<p>And sounds like isabelle doesn't have it :)</p>",
        "id": 206881970,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597359908
    },
    {
        "content": "<p>You mean to construct the real closure?</p>",
        "id": 206883206,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597360871
    },
    {
        "content": "<p>Now that algebraic closures exist, proving Artin-Schreier would be a lot easier, because you can build your real closure in the default algebraic closure</p>",
        "id": 206883290,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597360952
    },
    {
        "content": "<p>I'm thinking of the fact that any ordered field embeds in a RCF.</p>",
        "id": 206883785,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597361405
    },
    {
        "content": "<p>Artin-Schreier would be great!</p>",
        "id": 206883796,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597361418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> That looks like a password.</p>",
        "id": 206908420,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597393801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Can you delete Chris' post?</p>",
        "id": 206908501,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597393868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Congrats with the Haar measure! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 206912696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597397950
    },
    {
        "content": "<p>I'm quite excited returning from my holidays and seeing that we now have Haar measures and algebraic closures.</p>",
        "id": 206912714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597397973
    },
    {
        "content": "<p>Welcome back Johan! By the way there about 20 things we need you to look at ;-)</p>",
        "id": 206912788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597398005
    },
    {
        "content": "<p>Here's some stuff you can look at for fun (given that we're in the what's new thread): My MSc student Jujian Zhang got transcendence of e sorry-free!  <a href=\"https://jjaassoonn.github.io/transcendental/\">https://jjaassoonn.github.io/transcendental/</a></p>",
        "id": 206912830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597398061
    },
    {
        "content": "<p>Euxodus reals (a construction of R from Z not going via Q) is at <a href=\"https://github.com/Lix0120/eudoxus/\">https://github.com/Lix0120/eudoxus/</a></p>",
        "id": 206912937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597398151
    },
    {
        "content": "<p>Thanks, I hope <code>transcendental</code> will be PR'd?</p>",
        "id": 206913636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597398771
    },
    {
        "content": "<p>About the 20 things, I would be happy if people would ping or PM me, and I'll try to look at everything over the next couple of days.</p>",
        "id": 206913658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597398801
    },
    {
        "content": "<p>Oh I just meant the PR queue :-)</p>",
        "id": 206913945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597399041
    },
    {
        "content": "<p>Shenyang Wu got group cohomology working: <a href=\"https://github.com/Shenyang1995/M4R\">https://github.com/Shenyang1995/M4R</a> although we had a shock at the last minute when he realised he hadn't defined H^0 :-) (because there are no -1-cochains in his set-up)</p>",
        "id": 206914050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597399111
    },
    {
        "content": "<p>I can't guarantee any of this stuff will end up in mathlib. Students do projects and then they leave to do other things. I'll work on Jujian :-)</p>",
        "id": 206914071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597399142
    },
    {
        "content": "<p>Can they at least open PRs and label them <code>please-adopt</code>?</p>",
        "id": 206947647,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597422086
    },
    {
        "content": "<p>Yes, please. That would be great.</p>",
        "id": 206948105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597422352
    },
    {
        "content": "<p>With all these recent additions, someone should update the <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml\">mathlib overview</a> and probably the <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/undergrad.yaml\">undergrad topics</a>!</p>",
        "id": 207022410,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597498749
    },
    {
        "content": "<p>I added the Haar measure already. I'll add algebraic closures. For FTC I'm waiting for what Yury calls FTC-2 (in particular this is the version that allows to actually compute integrals).</p>",
        "id": 207028813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597509265
    },
    {
        "content": "<p>I can easily add a weaker version assuming continuity of the derivative</p>",
        "id": 207091759,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597614753
    },
    {
        "content": "<p>The proof of the most general version for Lebesgue integral is far less trivial.</p>",
        "id": 207091769,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597614803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/207346742\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/5d2256da224ed7dfc5c20eb64cffb417d19377c5\">feat(miu_language): a formalisation of the MIU language described by …</a></strong><br>\nfeat(miu_language): a formalisation of the MIU language described by D. Hofstadter in \"Gödel, Escher, Bach\". (<a href=\"https://github.com/leanprover-community/mathlib/issues/3739\">#3739</a>)</p>\n<p>We define an inductive type <code>derivable</code> so that <code>derivable x</code>  represents the notion that the MIU string <code>x</code> is derivable in the MIU language. We show <code>derivable x</code> is equivalent to <code>decstr x</code>, viz. the condition that <code>x</code> begins with an <code>M</code>, has no <code>M</code> in its tail, and for which <code>count I</code> is congruent to 1 or 2 modulo 3.</p>\n<p>By showing <code>decidable_pred decstr</code>, we deduce that <code>derivable</code> is decidable.<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/5d2256da224ed7dfc5c20eb64cffb417d19377c5\">https://github.com/leanprover-community/mathlib/commit/5d2256da224ed7dfc5c20eb64cffb417d19377c5</a></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/207350756\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/425aee91dfe8d542ecc39e354228f3f661af4b26\">feat(analysis/calculus) : L'Hôpital's rule, 0/0 case (#3740)</a></strong><br>\nfeat(analysis/calculus) : L'Hôpital's rule, 0/0 case (<a href=\"https://github.com/leanprover-community/mathlib/issues/3740\">#3740</a>)</p>\n<p>This proves several forms of L'Hôpital's rule for computing 0/0 indeterminate forms, based on the proof given here : <a href=\"https://en.wikibooks.org/wiki/Calculus/L%27H%C3%B4pital%27s_Rule\">Wikibooks</a>. See module docstring for more details.<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/425aee91dfe8d542ecc39e354228f3f661af4b26\">https://github.com/leanprover-community/mathlib/commit/425aee91dfe8d542ecc39e354228f3f661af4b26</a></p>\n</blockquote>",
        "id": 207374421,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597818717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> Can we now fill this in? Or is there another variant that should be done first?<br>\n<a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/100.yaml#L193\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/100.yaml#L193</a></p>",
        "id": 207402370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597841274
    },
    {
        "content": "<p>Well there's only the 0/0 case for now, but I don't know if we should wait for the anything/infinity case. As I said in the PR I started working on it but I'm not focusing on it right now. Maybe we should have a look at which variations have been proven in other theorem provers to see if we should wait or not.</p>",
        "id": 207405562,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597842951
    },
    {
        "content": "<p>There is no hurry with adding things to that list</p>",
        "id": 207405699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597843004
    },
    {
        "content": "<p>So let's wait for the infty version</p>",
        "id": 207405730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597843021
    },
    {
        "content": "<p>I just checked and all entries on Freek's website are proving what Anatole proved. Given that we have no application in mind other than adding an item to this list, I don't see the point of waiting (and of working on other cases, but that's more debatable).</p>",
        "id": 207457980,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597868925
    },
    {
        "content": "<p>I would say to report it as soon as you have something that can plausibly be given the name</p>",
        "id": 207459209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597869674
    },
    {
        "content": "<p>don't wait until you have the most general thing that can plausibly be given the name because mathematicians are ridiculously liberal about applying old names to vast generalizations</p>",
        "id": 207459313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597869724
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/117\">https://github.com/leanprover-community/leanprover-community.github.io/pull/117</a></p>",
        "id": 207484273,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597892239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/207911384\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/d4d33deaa14500c982022408ad94b4979b7e337f\">feat(combinatorics): define simple graphs (#3458)</a></strong><br>\nfeat(combinatorics): define simple graphs (<a href=\"https://github.com/leanprover-community/mathlib/issues/3458\">#3458</a>)</p>\n<p>adds basic definition of <code>simple_graph</code>s</p>\n<p>Co-authored-by: Aaron Anderson &lt;<a href=\"mailto:awainverse@gmail.com\">awainverse@gmail.com</a>&gt;<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/d4d33deaa14500c982022408ad94b4979b7e337f\">https://github.com/leanprover-community/mathlib/commit/d4d33deaa14500c982022408ad94b4979b7e337f</a></p>\n</blockquote>",
        "id": 207922328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598327253
    },
    {
        "content": "<p>We finally have graphs!</p>",
        "id": 207922331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598327265
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> and other contributors, for your perseverance</p>",
        "id": 207922373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598327294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/208524767\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/b79fc0379ae786153fc22ce5ee6751505e36a3d9\">feature(algebraic_geometry/Scheme): the category of schemes (#3961)</a></strong><br>\nfeature(algebraic_geometry/Scheme): the category of schemes (<a href=\"https://github.com/leanprover-community/mathlib/issues/3961\">#3961</a>)</p>\n<p>The definition of a <code>Scheme</code>, and the category of schemes as the full subcategory of locally ringed spaces.</p>\n<p>Co-authored-by: Johan Commelin &lt;<a href=\"mailto:johan@commelin.net\">johan@commelin.net</a>&gt;</p>\n<p>Co-authored-by: Kevin Buzzard &lt;<a href=\"mailto:k.buzzard@imperial.ac.uk\">k.buzzard@imperial.ac.uk</a>&gt;<br>\nCo-authored-by: Scott Morrison &lt;<a href=\"mailto:scott.morrison@gmail.com\">scott.morrison@gmail.com</a>&gt;<br>\nCo-authored-by: Ashvni &lt;<a href=\"mailto:ashvni.n@gmail.com\">ashvni.n@gmail.com</a>&gt;<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/b79fc0379ae786153fc22ce5ee6751505e36a3d9\">https://github.com/leanprover-community/mathlib/commit/b79fc0379ae786153fc22ce5ee6751505e36a3d9</a></p>\n</blockquote>",
        "id": 208524791,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598856357
    },
    {
        "content": "<p>This is a tactic, not maths, but I hope mathematicians will enjoy <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>'s recently landed tactic:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">slim_check</span> <span class=\"c1\">-- found problems, n := 2</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">slim_check</span> <span class=\"c1\">-- found problems, n := 3</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">slim_check</span> <span class=\"c1\">-- gave up</span>\n</code></pre></div>",
        "id": 208758609,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599000388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> You're a boss!</p>",
        "id": 208776205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599017804
    },
    {
        "content": "<p><span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span></p>",
        "id": 208776369,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599018117
    },
    {
        "content": "<p>I'm glad it's already popular :) I hope to see the generators that you guys come up with</p>",
        "id": 208776414,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599018142
    },
    {
        "content": "<p>That's a great showcase example Scott :-)</p>",
        "id": 208784453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599028054
    },
    {
        "content": "<p>I'm embarrassed to say it's more realistic than it should have been --- In the second line I suspected <code>slim_check</code> before I suspected my parentheses. :-)</p>",
        "id": 208786198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599029835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/209261041\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/94b96cff7665a86d9ea806ecb62eb60849d798a9\">feat(algebraic_geometry/structure_sheaf): stalk_iso (#4047)</a></strong><br>\nfeat(algebraic_geometry/structure_sheaf): stalk_iso (<a href=\"https://github.com/leanprover-community/mathlib/issues/4047\">#4047</a>)</p>\n<p>Given a ring <code>R</code> and a prime ideal <code>p</code>, construct an isomorphism of rings between the stalk of the structure sheaf of <code>R</code> at <code>p</code> and the localization of <code>R</code> at <code>p</code>.</p>\n<p>Co-authored-by: Scott Morrison &lt;<a href=\"mailto:scott.morrison@gmail.com\">scott.morrison@gmail.com</a>&gt;<br>\nCo-authored-by: Johan Commelin &lt;<a href=\"mailto:johan@commelin.net\">johan@commelin.net</a>&gt;<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/94b96cff7665a86d9ea806ecb62eb60849d798a9\">https://github.com/leanprover-community/mathlib/commit/94b96cff7665a86d9ea806ecb62eb60849d798a9</a></p>\n</blockquote>",
        "id": 209286671,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599479271
    },
    {
        "content": "<p>In symbols: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">O</mi><mrow><mi mathvariant=\"normal\">Spec</mi><mo>⁡</mo><mi>R</mi><mo separator=\"true\">,</mo><mi mathvariant=\"fraktur\">p</mi></mrow></msub><mo>=</mo><msub><mi>R</mi><mi mathvariant=\"fraktur\">p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal O_{\\operatorname{Spec} R, \\mathfrak p} = R_{\\mathfrak p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mord mathrm mtight\">S</span><span class=\"mord mathrm mtight\">p</span><span class=\"mord mathrm mtight\">e</span><span class=\"mord mathrm mtight\">c</span></span><span class=\"mspace mtight\" style=\"margin-right:0.19516666666666668em;\"></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathfrak mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.965672em;vertical-align:-0.282342em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.21677199999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathfrak mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.282342em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 209286769,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599479331
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 209287414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599479860
    },
    {
        "content": "<p>Presumably we can state Gamma Spec Adjointness in the language of category theory already? Can we prove it?</p>",
        "id": 209288857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599480902
    },
    {
        "content": "<p>I would not expect <code>tidy</code> to do it but it's worth a try :-)</p>",
        "id": 209288909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599480923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> is it accessible?</p>",
        "id": 209288936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599480948
    },
    {
        "content": "<p>There's still a bit to do. <code>Spec</code> isn't even a functor yet.</p>",
        "id": 209291933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599482949
    },
    {
        "content": "<p>well, one way to make it a functor is to first prove it's adjoint to something <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 209293697,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599484129
    },
    {
        "content": "<p>Is global sections a functor?</p>",
        "id": 209295799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599485465
    },
    {
        "content": "<p>Spec being a functor doesn't sound hard</p>",
        "id": 209295827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599485491
    },
    {
        "content": "<p>do we have morphisms yet?</p>",
        "id": 209295830,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599485491
    },
    {
        "content": "<p>In which category?</p>",
        "id": 209295841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599485501
    },
    {
        "content": "<p>The category of locally ringed spaces I guess</p>",
        "id": 209295910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599485532
    },
    {
        "content": "<p>Morphisms of schemes are there.</p>",
        "id": 209295911,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599485532
    },
    {
        "content": "<p>As a full subcat of locally ringed spaces</p>",
        "id": 209295924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599485543
    },
    {
        "content": "<p>I see, so the content is getting the morphism of presheaves from the morphism of rings</p>",
        "id": 209295991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599485590
    },
    {
        "content": "<p>I think what Reid was saying is that it would be just as easy to prove that Spec is a functor as it would be to prove the universal property of Spec, which is already the adjointness property :)</p>",
        "id": 209296026,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599485611
    },
    {
        "content": "<p>One should prove that it's a morphism of the underlying function type sheaf first and then verify that it preserves the predicate</p>",
        "id": 209296048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599485632
    },
    {
        "content": "<p>If you want to state the adjunction for LRS, then it's easy. Because we have <code>Spec</code> as funtor to LRS</p>",
        "id": 209296114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599485662
    },
    {
        "content": "<p>Uuh, maybe only on objects</p>",
        "id": 209296128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599485674
    },
    {
        "content": "<p>But <code>Spec</code> as functor to schemes isn't done yet. We don't know that affine schemes are schemes.</p>",
        "id": 209296151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599485698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/What's.20new.20in.20Lean.20maths.3F/near/209296151\">said</a>:</p>\n<blockquote>\n<p>But <code>Spec</code> as functor to schemes isn't done yet. We don't know that affine schemes are schemes.</p>\n</blockquote>\n<p>Oh?</p>",
        "id": 209296163,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599485712
    },
    {
        "content": "<p>Oh I see!</p>",
        "id": 209296166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599485715
    },
    {
        "content": "<p>Wait</p>",
        "id": 209296175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599485720
    },
    {
        "content": "<p>I'm not sure i believe you</p>",
        "id": 209296200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599485735
    },
    {
        "content": "<p>Well, after Kenny's PR, I guess we can now do that as well</p>",
        "id": 209296229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599485757
    },
    {
        "content": "<p>The point was that we didn't know the stalks were local</p>",
        "id": 209296279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599485769
    },
    {
        "content": "<p>Huh, now I'm confused</p>",
        "id": 209296317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599485808
    },
    {
        "content": "<p>How did we define Spec as LRS before this PR?</p>",
        "id": 209296326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599485817
    },
    {
        "content": "<p>LRS should be RS</p>",
        "id": 209296368,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599485836
    },
    {
        "content": "<p>That's how it was done before.</p>",
        "id": 209296386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599485846
    },
    {
        "content": "<p>Yup, you're right</p>",
        "id": 209296479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599485886
    },
    {
        "content": "<p>Aah got it</p>",
        "id": 209296723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599486022
    },
    {
        "content": "<p>I have no idea how hard <code>Spec</code> as functor will be</p>",
        "id": 209297175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599486310
    },
    {
        "content": "<p>Showing that you get local morphisms on the stalks... might be painful</p>",
        "id": 209297202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599486328
    },
    {
        "content": "<p>As in... another PR of 200 lines?</p>",
        "id": 209297246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599486348
    },
    {
        "content": "<p>Here's the proof in stacks: <a href=\"https://stacks.math.columbia.edu/tag/01I1\">https://stacks.math.columbia.edu/tag/01I1</a></p>",
        "id": 209297776,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599486632
    },
    {
        "content": "<p>It looks like given a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi mathvariant=\"normal\">Γ</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><msub><mi mathvariant=\"script\">O</mi><mi>X</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A \\to \\Gamma(X,\\mathcal{O}_X)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Γ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, where X is a LRS, it shouldn't be too hard to construct the associated morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>S</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">X \\to Spec A </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>",
        "id": 209297857,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599486686
    },
    {
        "content": "<p>as ringed spaces, that is.</p>",
        "id": 209297873,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599486701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/209921649\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/5d35e626086c4e1639e49cd7cf574bc48592f554\">feat(algebraic_geometry/*): Gamma the global sections functor (#4126)</a></strong><br>\nfeat(algebraic_geometry/*): Gamma the global sections functor (<a href=\"https://github.com/leanprover-community/mathlib/issues/4126\">#4126</a>)<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/5d35e626086c4e1639e49cd7cf574bc48592f554\">https://github.com/leanprover-community/mathlib/commit/5d35e626086c4e1639e49cd7cf574bc48592f554</a></p>\n</blockquote>",
        "id": 209924957,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599994116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/209983105\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/1c2ddbcf800b070afddf1886e6329e400073b764\">feat(field_theory/fixed): dimension over fixed field is order of grou…</a></strong><br>\nfeat(field_theory/fixed): dimension over fixed field is order of group (<a href=\"https://github.com/leanprover-community/mathlib/issues/4125\">#4125</a>)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">dim_fixed_points</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">faithful_mul_semiring_action</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">findim</span> <span class=\"o\">(</span><span class=\"n\">fixed_points</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">G</span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/leanprover-community/mathlib/commit/1c2ddbcf800b070afddf1886e6329e400073b764\">https://github.com/leanprover-community/mathlib/commit/1c2ddbcf800b070afddf1886e6329e400073b764</a></p>\n</blockquote>",
        "id": 209983447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600076895
    },
    {
        "content": "<p>Galois theory is looming around the corner</p>",
        "id": 209983710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600077077
    },
    {
        "content": "<p>Chapeau <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span aria-label=\"clink\" class=\"emoji emoji-1f942\" role=\"img\" title=\"clink\">:clink:</span></p>",
        "id": 209984002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600077269
    },
    {
        "content": "<p>I didn't even notice that PR going by. This is lovely!</p>",
        "id": 209984032,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600077306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Can you sketch what's left in your opinion? I guess</p>\n<ul>\n<li>Define Galois group</li>\n<li>Add an instance of <code>faithful_mul_semiring_action (Gal L K) L</code> under the assumption that the extension is <code>normal</code> and <code>separable</code></li>\n<li>An isomorphism between <code>K</code> and <code>fixed_points (Gal L K) L</code></li>\n<li>...?</li>\n</ul>",
        "id": 209984218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600077471
    },
    {
        "content": "<p>Tentative plan:</p>\n<ol>\n<li>Show the equivalence between \"L/K is normal and separable\" and \"|Aut(L/K)| = [L:K]\", and call one of those conditions \"L/K is Galois\".</li>\n<li>Show that if L/E/K is Galois then L/E is Galois (via normal and separable).</li>\n<li>Define <code>Gal(L/E) : subgroup (Aut(L/K))</code> for <code>E : subalgebra K L</code>.</li>\n<li>Define <code>fixed H : subalgebra K L</code> for <code>H : subgroup (Aut(L/K))</code>.</li>\n<li>Then <code>|Gal(L/fixed H)| = [L : fixed H] = |H|</code> (2, <a href=\"https://github.com/leanprover-community/mathlib/issues/4125\">#4125</a>) so <code>Gal(L/fixed H) = H</code>.</li>\n<li>Then <code>[L : fixed (Gal(L/E))] = |Gal(L/E)| = [L:E]</code> (<a href=\"https://github.com/leanprover-community/mathlib/issues/4125\">#4125</a>, 2) so <code>fixed (Gal(L/E)) = E</code>.</li>\n<li>Show that the splitting field of a separable polynomial is Galois.</li>\n</ol>",
        "id": 209985687,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600078450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> and the other Berkeley people -- are you working on some of this stuff independently or are you all in sync and aware of each other's work?</p>",
        "id": 209985947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600078678
    },
    {
        "content": "<p>Right now, we're temporarily paused on the Galois theory as we try to get the primitive element theorem into mathlib (which might make the forward direction of part 1 a bit easier). I'll make sure to keep track of what Kenny's doing.</p>",
        "id": 210036734,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600104295
    },
    {
        "content": "<p>I learnt the primitive element theorem in my Galois theory course :-)</p>",
        "id": 210037104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600104509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/211381962\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/253b120d59045b6eaec35781711be1d756f02fb3\">feat(field_theory): prove primitive element theorem (#4153)</a></strong><br>\nfeat(field_theory): prove primitive element theorem (<a href=\"https://github.com/leanprover-community/mathlib/issues/4153\">#4153</a>)</p>\n<p>Proof of the primitive element theorem. The main proof is in <code>field_theory/primitive_element.lean</code>. Some lemmas we used have been added to other files. We have also changed the notation for adjoining an element to a field to be easier to use.</p>\n<p>Co-authored-by: Patrick Lutz &lt;<a href=\"mailto:pglutz@berkeley.edu\">pglutz@berkeley.edu</a>&gt;<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/253b120d59045b6eaec35781711be1d756f02fb3\">https://github.com/leanprover-community/mathlib/commit/253b120d59045b6eaec35781711be1d756f02fb3</a></p>\n</blockquote>",
        "id": 211395779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601177228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/211381963\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/d0b594766906c0e3ca9082228fffd8c9e0ff5435\">feat(algebra/universal_enveloping_algebra): construction of universal…</a></strong><br>\nfeat(algebra/universal_enveloping_algebra): construction of universal enveloping algebra and its universal property (<a href=\"https://github.com/leanprover-community/mathlib/issues/4041\">#4041</a>)</p>\n<h2>Main definitions</h2>\n<p>* <code>universal_enveloping_algebra</code><br>\n  * <code>universal_enveloping_algebra.algebra</code><br>\n  * <code>universal_enveloping_algebra.lift</code><br>\n  * <code>universal_enveloping_algebra.ι_comp_lift</code><br>\n  * <code>universal_enveloping_algebra.lift_unique</code><br>\n  * <code>universal_enveloping_algebra.hom_ext</code></p>\n<p>Co-authored-by: Eric Wieser &lt;<a href=\"mailto:wieser.eric@gmail.com\">wieser.eric@gmail.com</a>&gt;<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/d0b594766906c0e3ca9082228fffd8c9e0ff5435\">https://github.com/leanprover-community/mathlib/commit/d0b594766906c0e3ca9082228fffd8c9e0ff5435</a></p>\n</blockquote>",
        "id": 211395836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601177287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/211391915\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/5c957ec8b74ec01bad07c0f0455c31aa1795bc9f\">feat(analysis/convex/integral): Jensen's inequality for integrals (#4…</a></strong><br>\nfeat(analysis/convex/integral): Jensen's inequality for integrals (<a href=\"https://github.com/leanprover-community/mathlib/issues/4225\">#4225</a>)<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/5c957ec8b74ec01bad07c0f0455c31aa1795bc9f\">https://github.com/leanprover-community/mathlib/commit/5c957ec8b74ec01bad07c0f0455c31aa1795bc9f</a></p>\n</blockquote>",
        "id": 211395841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601177313
    },
    {
        "content": "<p>That was a good day for mathlib (-;</p>",
        "id": 211395851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601177330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/211885879\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/9ceb1141fab68a2cd3ec27621018539bf1139d87\">feat(analysis/normed_space/inner_product): Define the inner product b…</a></strong><br>\nfeat(analysis/normed_space/inner_product): Define the inner product based on <code>is_R_or_C</code> (<a href=\"https://github.com/leanprover-community/mathlib/issues/4057\">#4057</a>)<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/9ceb1141fab68a2cd3ec27621018539bf1139d87\">https://github.com/leanprover-community/mathlib/commit/9ceb1141fab68a2cd3ec27621018539bf1139d87</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> Congratulations on this!  I guess it's safe to formalize anything in Hilbert / Banach space theory now without worrying about duplication -- what will you do next?</p>",
        "id": 211987312,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601593853
    },
    {
        "content": "<p>This is really great! Let's make Banach/C-star/von Neumann algebras. :-)</p>",
        "id": 211990210,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601596459
    },
    {
        "content": "<p>I think the next step should be the Hilbert projection theorem!</p>",
        "id": 211990233,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601596497
    },
    {
        "content": "<p>Oops, I didn't mean that.  We already have it.</p>",
        "id": 211990259,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601596523
    },
    {
        "content": "<p>I meant its corollary, that the dual of a Hilbert space is isomorphic to itself!</p>",
        "id": 211990275,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601596554
    },
    {
        "content": "<p>I really don't know what we have in mathlib in this direction at the moment, but wish I did. Perhaps I should try to add something to learn. Any pointers or requests welcome. :-)</p>",
        "id": 211990354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601596611
    },
    {
        "content": "<p>Could you define the dual of a Hilbert space?  We have the dual of a Banach space: <br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/dual.html\">https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/dual.html</a><br>\nand probably need to do some terrible trick like the product-of-metric-spaces trick to make the dual of a Hilbert space defeq</p>",
        "id": 211990411,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601596683
    },
    {
        "content": "<p>But maybe I am speaking too soon, I feel like <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> should have first pick among all the new goodies available.</p>",
        "id": 211990492,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601596762
    },
    {
        "content": "<p>By the way, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, mathlib does have Banach algebras.<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_algebra\">docs#normed_algebra</a><br>\n(plus <code>complete_space</code>).  What do you want to do with them?</p>",
        "id": 211990858,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601597058
    },
    {
        "content": "<p>Oh! :-)</p>",
        "id": 211990873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601597074
    },
    {
        "content": "<p>I didn't realise we'd already made it that far! In a former life I worked on von Neumann algebras (well, the entirely non-analytic story of the representation theory of subfactors, but anyway...) so it's just a direction I'd love to see in mathlib.</p>",
        "id": 211990978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601597142
    },
    {
        "content": "<p>No particular concrete plans. I do have a branch where I prove Bell's inequality and Tsirelson's inequality, but I jump through some hoops to do them purely algebraically, rather than giving the natural C-star algebra proof.</p>",
        "id": 211991052,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601597185
    },
    {
        "content": "<p>I don't know anything about this!  But one could probably define a C-star algebra now, if that's the first step.</p>",
        "id": 211991302,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601597415
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> ! I agree that this dual business would be a natural next step. Working towards the spectral theorem would be nice also -- the finite dimensional case should be doable fairly soon now. <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>  was hoping to work on this also, I believe?</p>",
        "id": 211993723,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1601599995
    },
    {
        "content": "<p>Another question is whether/how to rewrite<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/hahn_banach.html\">https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/hahn_banach.html</a><br>\nusing the new class.  Maybe this can be done by identifying a core set of lemmas for the real case only, like you and Sébastien implemented with orthogonal projection.</p>",
        "id": 211993970,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601600322
    },
    {
        "content": "<p>Right, with some luck this might turn out to be pretty easy.</p>",
        "id": 211994063,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1601600426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/What's.20new.20in.20Lean.20maths.3F/near/211993723\">said</a>:</p>\n<blockquote>\n<p>Thanks <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> ! I agree that this dual business would be a natural next step. Working towards the spectral theorem would be nice also -- the finite dimensional case should be doable fairly soon now. <span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span>  was hoping to work on this also, I believe?</p>\n</blockquote>\n<p>Great work on the <code>is_R_or_C</code> front! Don't expect too much from me in the coming months, though. I need to focus on my PhD thesis.</p>",
        "id": 212040332,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1601623460
    },
    {
        "content": "<p>BTW, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I wouldn't mind having a look at that branch with the Bell and Tsirelson inequalities, I actually have no idea how to do this without at least C*-algebras!</p>",
        "id": 212075276,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1601645981
    },
    {
        "content": "<p>There's nothing much to it. We define a star_ordered_ring as an ordered ring with a star structure, and a guarantee that <code>star X * X</code> is nonnegative. Then both the CHSH and Tsirelson inequalities can be proved by appropriate sums-of-squares decompositions. I actually can't remember for Tsirelson whether I found the relevant SOS decomposition somewhere, or found it myself in mathematica.</p>",
        "id": 212143968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601685076
    },
    {
        "content": "<p>It's on the <code>bell</code> branch.</p>",
        "id": 212143976,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601685093
    },
    {
        "content": "<p>I'll PR soon.</p>",
        "id": 212143983,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601685108
    },
    {
        "content": "<p>Ah I see! Is this star ordered ring something that's in common use somewhere, or did you come up with it for the occasion?</p>",
        "id": 212146203,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1601688136
    },
    {
        "content": "<p>I don't recall seeing it used. It seemed a reasonable intermediate step on the way to Cstar algebras.</p>",
        "id": 212146395,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601688541
    },
    {
        "content": "<p>When you see people talking about the interaction of *-structures and orderings, sometimes instead people say that only the self-adjoint elements are  ordered. I'm not sure why, however; it's still only a partial order.</p>",
        "id": 212146407,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601688602
    },
    {
        "content": "<p>Yeah, I don't think I've ever seen anyone extend the ordering to non-self-adjoint elements.</p>",
        "id": 212146951,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1601689490
    },
    {
        "content": "<p>(Until today I guess!)</p>",
        "id": 212146961,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1601689507
    }
]