[
    {
        "content": "<p>Bors has failed building <a href=\"https://github.com/leanprover-community/mathlib/issues/4444\">#4444</a> twice now, and it seems to be a deterministic timeout in <code>mv_polynomial</code>.  The PR touches <code>control/traversable</code>, but only by adding documentation and reordering a definition.</p>\n<p><code>/home/runner/work/mathlib/mathlib/src/data/mv_polynomial/basic.lean:414:0: error: (deterministic) timeout</code></p>",
        "id": 212391723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601968384
    },
    {
        "content": "<p>I guess the first thing to do is to try merging master on that branch and letting the CI run</p>",
        "id": 212391974,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601968583
    },
    {
        "content": "<p>Hereâ€™s the line referenced in the error: <a href=\"https://github.com/leanprover-community/mathlib/blob/523bddb4f0cbfdc401b3b2f943ca6eba92ad90cc/src/data/mv_polynomial/basic.lean#L414\">https://github.com/leanprover-community/mathlib/blob/523bddb4f0cbfdc401b3b2f943ca6eba92ad90cc/src/data/mv_polynomial/basic.lean#L414</a></p>",
        "id": 212392281,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601968804
    },
    {
        "content": "<p>Ok, I've merged master and pushed it.  Is the CI just to see if it can still build?</p>",
        "id": 212392685,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601969101
    },
    {
        "content": "<p>I'm having the same issue with <a href=\"https://github.com/leanprover-community/mathlib/issues/4461\">#4461</a></p>",
        "id": 212392844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601969180
    },
    {
        "content": "<p>The problem is <code>coeff_mul</code></p>",
        "id": 212393028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601969328
    },
    {
        "content": "<p>It's known to be slow... I guess we need to work on it</p>",
        "id": 212393044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601969341
    },
    {
        "content": "<p>So it's not <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span>'s docstrings that broke the build? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 212393374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601969552
    },
    {
        "content": "<p>Is the deterministic timeout actually nondeterministic? (at least when it comes to building all of mathlib?)  It seems sort of improbable that a commit with only documentation comments would change much...</p>",
        "id": 212394460,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601970464
    },
    {
        "content": "<p>Yeah, I'm not sure what deterministic really means here. For what it's worth, I ran <code>lean --make src/data/mv_polynomial/basic.lean</code> on the <a href=\"https://github.com/leanprover-community/mathlib/issues/4444\">#4444</a> branch of mathlib and didn't get a timeout when opening the file in VS Code, even though it should be enforcing the same <code>-T100000</code> limit. </p>\n<p>According to the profiler, the tactic execution in <code>mv_polynomial.coeff_mul</code> is taking 19.7 seconds, so it's definitely ripe for reworking. I don't know how to interpret the more detailed output though:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>elaboration: tactic execution took 19.7s\nnum. allocated objects:  7835\nnum. allocated closures: 10779\n19748ms   100.0%   tactic.istep\n19748ms   100.0%   _interaction\n19748ms   100.0%   tactic.istep._lambda_1\n19748ms   100.0%   scope_trace\n19748ms   100.0%   _interaction._lambda_2\n19748ms   100.0%   tactic.step\n19667ms    99.6%   tactic.solve1\n19525ms    98.9%   _interaction._lambda_19\n19140ms    96.9%   tactic.interactive.propagate_tags\n18716ms    94.8%   interaction_monad_orelse\n18665ms    94.5%   _interaction._lambda_17\n18615ms    94.3%   tactic.interactive.simp_core\n18554ms    94.0%   tactic.interactive.simp_core_aux\n18550ms    93.9%   tactic.simplify\n18550ms    93.9%   tactic.try\n18502ms    93.7%   tactic.interactive.simpa._lambda_6\n18501ms    93.7%   tactic.interactive.simpa\n17747ms    89.9%   tactic.simp_target\n17747ms    89.9%   tactic.interactive.simp_core_aux._lambda_5\n13118ms    66.4%   _interaction._lambda_16\n13061ms    66.1%   _interaction._lambda_14\n 5162ms    26.1%   _interaction._lambda_10\n 1697ms     8.6%   interaction_monad.monad._lambda_9\n  807ms     4.1%   tactic.interactive.simp_core_aux._lambda_4\n  807ms     4.1%   tactic.interactive.simp_core_aux._lambda_2\n  525ms     2.7%   rw_core\n  524ms     2.7%   interactive.loc.apply\n  521ms     2.6%   interaction_monad.orelse'\n  492ms     2.5%   _private.3291397495.rw_goal._lambda_4\n  481ms     2.4%   _private.3291397495.rw_goal._lambda_2\n  415ms     2.1%   tactic.rewrite_target\n  415ms     2.1%   tactic.rewrite\n  414ms     2.1%   tactic.rewrite_core\n  368ms     1.9%   tactic.mk_instance\n  287ms     1.5%   _interaction._lambda_12\n  286ms     1.4%   tactic.apply_instance\n  268ms     1.4%   tactic.all_goals'\n  268ms     1.4%   all_goals'_core\n  268ms     1.4%   _private.3677394557.all_goals'_core._main._lambda_2\n  268ms     1.4%   tactic.to_expr\n  235ms     1.2%   _interaction._lambda_18\n  147ms     0.7%   _interaction._lambda_7\n  142ms     0.7%   _interaction._lambda_4\n  139ms     0.7%   tactic.interactive.have._lambda_1\n   99ms     0.5%   tactic.interactive.concat_tags._lambda_5\n   98ms     0.5%   repeat_aux\n   98ms     0.5%   tactic.try_core\n   98ms     0.5%   tactic.repeat\n   98ms     0.5%   _interaction._lambda_3\n   98ms     0.5%   _private.1616170719.repeat_aux._main._lambda_1\n   94ms     0.5%   _interaction._lambda_11\n   93ms     0.5%   tactic.interactive.by_cases._lambda_2\n   93ms     0.5%   tactic.interactive.by_cases\n   84ms     0.4%   tactic.interactive.to_expr'\n   83ms     0.4%   tactic.by_cases\n   59ms     0.3%   tactic.mk_simp_set_core\n   59ms     0.3%   tactic.mk_simp_set\n   57ms     0.3%   tactic.interactive.convert\n   57ms     0.3%   tactic.focus1\n   54ms     0.3%   tactic.congr'\n   52ms     0.3%   _interaction._lambda_13\n   39ms     0.2%   _interaction._lambda_8\n   39ms     0.2%   simp_lemmas.add_pexpr\n   39ms     0.2%   simp_lemmas.append_pexprs\n   39ms     0.2%   tactic.mk_simp_set_core._lambda_5\n   36ms     0.2%   tactic.apply_eq_congr_core\n   36ms     0.2%   tactic.congr_core'\n   35ms     0.2%   tactic.congr'._main._lambda_3\n   32ms     0.2%   tactic.mk_specialized_congr_lemma\n   31ms     0.2%   rw_hyp\n   30ms     0.2%   _private.859230899.rw_hyp._main._lambda_3\n   23ms     0.1%   _private.859230899.rw_hyp._main._lambda_2\n   23ms     0.1%   tactic.apply_core\n   21ms     0.1%   tactic.rewrite_hyp\n   21ms     0.1%   _interaction._lambda_5\n   20ms     0.1%   tactic.seq'\n   18ms     0.1%   tactic.join_user_simp_lemmas\n   18ms     0.1%   simp_lemmas.mk_default\n   17ms     0.1%   relation_tactic\n   17ms     0.1%   _interaction._lambda_6\n   16ms     0.1%   _private.1624076617.relation_tactic._lambda_1\n   16ms     0.1%   tactic.exact\n   15ms     0.1%   tactic.congr'._main._lambda_4\n   14ms     0.1%   tactic.replace_target\n   10ms     0.1%   tactic.interactive.simpa._lambda_1\n   10ms     0.1%   tactic.replace_hyp\n   10ms     0.1%   _private.3291397495.rw_goal._lambda_3\n    9ms     0.0%   tactic.save_info_with_widgets\n    8ms     0.0%   tactic.apply\n    8ms     0.0%   tactic.mk_eq_mpr\n    8ms     0.0%   tactic.save_widget\n    7ms     0.0%   tactic.save_type_info\n    6ms     0.0%   tactic.assert\n    6ms     0.0%   tactic.interactive.apply._lambda_1\n    5ms     0.0%   tactic.assumption._lambda_1\n    5ms     0.0%   tactic.find_same_type\n    5ms     0.0%   tactic.refine\n    4ms     0.0%   tactic.apply_congr_core\n    4ms     0.0%   tactic.mk_eq_mp\n    3ms     0.0%   tactic.rintro\n    3ms     0.0%   tactic.find_same_type._main._lambda_1\n    3ms     0.0%   simp_lemmas.resolve_and_add\n    3ms     0.0%   tactic.unify\n    3ms     0.0%   tactic.assert_core\n    3ms     0.0%   _private.3676539765.simp_lemmas.resolve_and_add._lambda_2\n    3ms     0.0%   tactic.interactive.rintro\n    3ms     0.0%   tactic.infer_type\n    3ms     0.0%   tactic.rintro._lambda_3\n    3ms     0.0%   simp_lemmas.add_simp\n    2ms     0.0%   tactic.mk_app\n    2ms     0.0%   simp_lemmas.erase\n    2ms     0.0%   tactic.rcases_core._main._lambda_5\n    2ms     0.0%   tactic.interactive.exact\n    2ms     0.0%   tactic.rcases_core._main._lambda_9\n    2ms     0.0%   tactic.rcases_core\n    2ms     0.0%   tactic.mk_id_eq\n    2ms     0.0%   tactic.rcases.continue\n    2ms     0.0%   tactic.cases_core\n    2ms     0.0%   _interaction._lambda_9\n    1ms     0.0%   tactic.has_opt_auto_param._lambda_2\n    1ms     0.0%   tactic.clear_goals._lambda_5\n    1ms     0.0%   tactic.apply_congr_core._lambda_1\n    1ms     0.0%   tactic.applyc\n    1ms     0.0%   tactic.mk_const\n    1ms     0.0%   tactic.has_opt_auto_param_for_apply._lambda_2\n    1ms     0.0%   tactic.intro_core\n    1ms     0.0%   tactic.get_eqn_lemmas_for\n    1ms     0.0%   tactic.i_to_expr_for_apply\n    1ms     0.0%   tactic.interactive.get_rule_eqn_lemmas\n    1ms     0.0%   tactic.clear\n    1ms     0.0%   format.join\n    1ms     0.0%   environment.get_ext_eqn_lemmas_for\n    1ms     0.0%   tactic.interactive.dsimp\n    1ms     0.0%   tactic.save_info_thunk\n    1ms     0.0%   tactic.dsimp_target\n    1ms     0.0%   tactic.interactive.get_rule_eqn_lemmas._lambda_3\n    1ms     0.0%   tactic.clear_goals\n    1ms     0.0%   tactic.assertv\n    1ms     0.0%   expr.get_app_fn\n    1ms     0.0%   resolve_name'\n    1ms     0.0%   tactic.clear'\n    1ms     0.0%   expr.is_napp_of\n    1ms     0.0%   list.foldl\n    1ms     0.0%   tactic.mk_const._lambda_1\n    1ms     0.0%   tactic.intro\n    1ms     0.0%   expr.const\n    1ms     0.0%   simp_lemmas.dsimplify\n    1ms     0.0%   format.compose\n    1ms     0.0%   expr.is_app_of\n    1ms     0.0%   tactic.swap\n    1ms     0.0%   tactic.instantiate_mvars\n    1ms     0.0%   _interaction._lambda_15\n    1ms     0.0%   tactic.assertv_core\n    1ms     0.0%   tactic.congr'._main._lambda_2\n</code></pre></div>",
        "id": 212395338,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601971144
    },
    {
        "content": "<p>I think that is saying <code>simpa</code> is the culprit.</p>",
        "id": 212395712,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601971436
    },
    {
        "content": "<p>Indeed, changing the two <code>simpa</code>s to <code>simpa only</code> speeds it up to 2.64 seconds!</p>",
        "id": 212395880,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601971539
    },
    {
        "content": "<p>I almost have a PR ready</p>",
        "id": 212396003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601971634
    },
    {
        "content": "<p>I'm restructuring it a bit more</p>",
        "id": 212396015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601971641
    },
    {
        "content": "<p>Ah, OK. I was just about to submit one myself (with just the <code>simpa only</code> change).</p>",
        "id": 212396103,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601971687
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4469\">#4469</a></p>",
        "id": 212396284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601971817
    },
    {
        "content": "<p>It's below 2s on my box now</p>",
        "id": 212396295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601971829
    },
    {
        "content": "<p>oops, I did it as well...</p>",
        "id": 212397381,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601972516
    },
    {
        "content": "<p>I'll close.</p>",
        "id": 212397434,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601972528
    },
    {
        "content": "<p>Hmm, <code>coeff_mul</code> just caused the most recent <code>bors</code> batch to fail again: <a href=\"https://github.com/leanprover-community/mathlib/runs/1213623252\">https://github.com/leanprover-community/mathlib/runs/1213623252</a></p>\n<p>So maybe we should see if we can try and merge that first.</p>",
        "id": 212398549,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601973280
    },
    {
        "content": "<p>Yup, we might want to cancel everything, and squeeze this in first.</p>",
        "id": 212398705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601973372
    },
    {
        "content": "<p>I just added <a href=\"https://github.com/leanprover-community/mathlib/issues/4469\">#4469</a> to the queue. Even if the currently running batch fails, <a href=\"https://github.com/leanprover-community/mathlib/issues/4469\">#4469</a> should be in the next batch and then everything should be good, I think.</p>",
        "id": 212399224,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601973799
    },
    {
        "content": "<p><code>bors r+ p=10</code> will give it higher priority</p>",
        "id": 212402301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601975685
    },
    {
        "content": "<p>I considered doing that but since <a href=\"https://github.com/leanprover-community/mathlib/issues/4469\">#4469</a> won't conflict with any of the other PRs, it should be more efficient just to have it run in a batch.</p>",
        "id": 212402461,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601975794
    },
    {
        "content": "<p>Also, the batch including <a href=\"https://github.com/leanprover-community/mathlib/issues/4469\">#4469</a> is now running, since the batch that was running failed again. I went ahead and reconsolidated those PRs along with <a href=\"https://github.com/leanprover-community/mathlib/issues/4444\">#4444</a> into a new batch.</p>",
        "id": 212402645,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601975934
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4472\">#4472</a> is not critical for bors, but it brings <code>coeff_mul</code> down into the 1.0s - 1.2s range, and shortens the proof.</p>",
        "id": 212404257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601976997
    }
]