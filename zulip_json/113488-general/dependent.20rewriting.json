[
    {
        "content": "<p>I just wrote a tactic for dependent rewriting. Is there any interest in having it in mathlib?</p>\n<p>Here is what it does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℤ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">foo'</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dep_rw</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"c1\">--   i j : ℕ,</span>\n<span class=\"c1\">-- v : vector ℤ (j - i),</span>\n<span class=\"c1\">-- h : i ≤ j - i,</span>\n<span class=\"c1\">-- h' : ∀ (i : ℕ), j - i = i</span>\n<span class=\"c1\">-- ⊢ foo' i i (cast _ v) (cast _ h)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p><code>f</code> has a dependent type and rewriting <code>j</code> requires to add a cast to <code>v</code> and <code>h</code> at the same time which is pretty tricky to do. That's why dependent rewriting can be handy in those situations. The norm in mathlib is to try to avoid this kind dependent function type. When you have to use them though, it's good to have a tactic that accommodates them.</p>",
        "id": 212320315,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601913680
    },
    {
        "content": "<p>Yes, this would be extremely useful.</p>",
        "id": 212325085,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601915874
    },
    {
        "content": "<p>Would it be practical to make <code>rw</code> itself do this?</p>",
        "id": 212325212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601915926
    },
    {
        "content": "<p>I don't believe so. I think <code>rw</code> does its job by finding occurrences of the lhs and abstracting them so you don't need a complex tree rewriting. In order to make it dependent, I need to use the congruence lemmas that <code>congr</code> generates</p>",
        "id": 212325804,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601916254
    },
    {
        "content": "<p>Unless you use dependent rewriting as a sort of plan B if the motive is not type correct</p>",
        "id": 212325828,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601916275
    },
    {
        "content": "<p>If it's not practical to make <code>rw</code> do this automatically then perhaps we can at least change the \"motive is not type correct\" error to mention <code>dep_rw</code>.</p>",
        "id": 212328064,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601917377
    },
    {
        "content": "<p>That makes sense. We should probably get it into core in that case</p>",
        "id": 212328142,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601917418
    }
]