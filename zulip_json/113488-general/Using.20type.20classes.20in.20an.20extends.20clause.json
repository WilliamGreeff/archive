[
    {
        "content": "<p>I'm finding that this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">-- works fine without this</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"sd\">/-- A semigroup is a type with an associative op. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">base_semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op_assoc'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">mul_semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">base_semigroup</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>gives me the weird error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span> <span class=\"n\">G</span> <span class=\"n\">mul</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">mul</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_mul</span> <span class=\"n\">G</span>\n</code></pre></div>\n\n<p>If I remove <code>old_structure_cmd</code> then it works fine.</p>",
        "id": 212324362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601915492
    },
    {
        "content": "<p>Using <code>(@has_mul.mul G ‹has_mul G›)</code> doesn't help either, it still infers an object of the wrong type</p>",
        "id": 212324645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601915647
    }
]