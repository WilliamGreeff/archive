[
    {
        "content": "<p>After running <code>rw</code> in  conv mode with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.sum_map_domain_index\">docs#finsupp.sum_map_domain_index</a> (which requires two assumptions), I end up with one <code>|</code> goal and two <code>⊢</code> goals.</p>\n<p>I already know how to handle the <code>|</code> goal, and can discard it with <code>skip</code>. I'm then left with two <code>⊢</code> goals, but:</p>\n<ul>\n<li>I'm still in <code>conv</code> mode, so don't have any tactics to help me</li>\n<li>If I leave conv mode, the <code>|</code> goal does not take effect</li>\n</ul>\n<p>Is there a way to drop back into tactic mode in conv mode?</p>",
        "id": 212181256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601746047
    },
    {
        "content": "<p>Good question! Does <code>conv</code> mode have an <code>exact</code> tactic?</p>",
        "id": 212181315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601746130
    },
    {
        "content": "<p>No!</p>",
        "id": 212181321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601746141
    },
    {
        "content": "<p>If not, I guess it should get it for situations like these.</p>",
        "id": 212181328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601746150
    },
    {
        "content": "<p>But indeed, then I could use <code>exact by { }</code> which would hopefully do the trick</p>",
        "id": 212181333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601746164
    },
    {
        "content": "<p>Furthermore, if I attempt a term-mode proof as an argument to <code>sum_map_domain_index</code>, if I get it wrong the error is silenced and the <code>conv</code> does nothing</p>",
        "id": 212181346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601746201
    },
    {
        "content": "<p>almost- <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (needs some variables from monoid_algebra.lean):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- in master shortly</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_add_equiv</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">multiplicative.to_add</span><span class=\"o\">,</span> <span class=\"n\">multiplicative.of_add</span><span class=\"o\">,</span> <span class=\"n\">of_add_to_add</span><span class=\"o\">,</span> <span class=\"n\">to_add_of_add</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_monoid_algebra.to_multiplicative</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"bp\">≃+*</span> <span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">finsupp.dom_congr</span> <span class=\"n\">to_add_equiv</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_def</span><span class=\"o\">],</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">map_domain_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">map_domain_single</span><span class=\"o\">,</span>\n    <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span>\n      <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">finsupp.sum</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">finsupp.sum_map_domain_index</span><span class=\"o\">,</span>\n        <span class=\"n\">skip</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp.dom_congr</span><span class=\"o\">,</span> <span class=\"n\">map_domain_add</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"bp\">..</span><span class=\"n\">finsupp.dom_congr</span> <span class=\"n\">to_add_equiv</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 212181403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601746256
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">conv.interactive.exact</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">interactive.parse</span> <span class=\"n\">interactive.types.texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.interactive.exact</span> <span class=\"n\">q</span>\n</code></pre></div>\n\n<p>seems to do the job, although I wonder if it warrants some special casing to only allow its use on <code>⊢</code> goals</p>",
        "id": 212184838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601750901
    },
    {
        "content": "<p>In fact even this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">conv.interactive.exact</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.interactive.exact</span>\n</code></pre></div>",
        "id": 212184876,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601750998
    },
    {
        "content": "<p>Should I PR the above?</p>\n<p>Or should we change <code>conv</code> so that unsolved goals remain outside of the <code>conv</code> block?</p>",
        "id": 212311026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601909850
    },
    {
        "content": "<p>And If I did use the above definition of exact, is there anything to stop the user closing a <code>|</code> goal with it nonsensically?</p>",
        "id": 212311145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601909884
    }
]