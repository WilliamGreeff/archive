[
    {
        "content": "<p>As we discussed today, one option for the rest of the seminar is to try to complete some larger project together, perhaps with the goal of formalizing some catchy-sounding theorems. This thread is for discussion of project ideas: theorems that we could try to prove, ideas about how to organize it, etc.</p>",
        "id": 204264661,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595023206
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 204264691,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595023237
    },
    {
        "content": "<p>contribute to sphere eversion? pick off something from freek's list? from the <a href=\"https://leanprover-community.github.io/undergrad_todo.html\">undergrad_todo list</a>?</p>",
        "id": 204265886,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595024129
    },
    {
        "content": "<p>Try and figure out why algebraic closures still aren't done? Prove that a short exact sequence of complexes induces a long exact sequence of cohomology in an abelian category?</p>",
        "id": 204267294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595025307
    },
    {
        "content": "<p>Define fundamental group of a topological space?</p>",
        "id": 204267338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595025351
    },
    {
        "content": "<p>Higher homotopy groups even?</p>",
        "id": 204267384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595025365
    },
    {
        "content": "<p>Make a basic API for locally ringed spaces?</p>",
        "id": 204267437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595025423
    },
    {
        "content": "<p>Define Picard groups?</p>",
        "id": 204267458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595025441
    },
    {
        "content": "<p>Ext and Tor?</p>",
        "id": 204267466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595025446
    },
    {
        "content": "<p>Sorry, I got interrupted when writing the original message. I meant to explain a bit more</p>",
        "id": 204274272,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032065
    },
    {
        "content": "<p>Some of the possible topics we discussed were:</p>",
        "id": 204274316,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032084
    },
    {
        "content": "<p>1) Fourier analysis. Goal: prove theorem about rate of decay of fourier series of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> functions</p>",
        "id": 204274338,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032122
    },
    {
        "content": "<p>2) Fundamental Group. Goal: prove Galois connection between subgroups and covering spaces</p>",
        "id": 204274347,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032143
    },
    {
        "content": "<p>3) Fundamental theorem of calculus</p>",
        "id": 204274353,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032155
    },
    {
        "content": "<p>4) Galois Theory. Goal: prove Galois connection</p>",
        "id": 204274365,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032172
    },
    {
        "content": "<p>(4) seemed like the most popular option brought up so far</p>",
        "id": 204274372,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032195
    },
    {
        "content": "<p>but it would obviously involve figuring out how to do algebraic closures</p>",
        "id": 204274420,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032212
    },
    {
        "content": "<p>(or I guess assuming algebraic closures exist as an axiom and working from there)</p>",
        "id": 204274436,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032236
    },
    {
        "content": "<p>However, we haven't made any definite decisions. So this thread is for discussion of what topics sound most interesting, how feasible they are, what would be involved in completing different projects, and how to organize the project</p>",
        "id": 204274496,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032322
    },
    {
        "content": "<p>Thanks for the suggestions <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>! :)</p>",
        "id": 204274548,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032377
    },
    {
        "content": "<p>Since there seems to be the most interest in Galois theory, do either of you know anything about why algebraic closure is not in mathlib? Is it especially hard to do for some reason?</p>",
        "id": 204274581,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032429
    },
    {
        "content": "<p>And do either of you have any advice about how to organize this kind of project?</p>",
        "id": 204274624,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032449
    },
    {
        "content": "<p>(a) does Galois theory need the existence of algebraic closures? (b) one option would be to have algebraic closures start off as an axiom and get proved as a side project</p>",
        "id": 204276046,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1595034408
    },
    {
        "content": "<p>I think successful past projects have started with a detailed exposition in latex or markdown</p>",
        "id": 204276145,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595034571
    },
    {
        "content": "<p>We have some Galois theory, written by Imperial undergrads, in some ImperialCollegeLpndon repo on GitHub.</p>",
        "id": 204286755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052725
    },
    {
        "content": "<p>The fundamental theorem is still not in Lean</p>",
        "id": 204286762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052744
    },
    {
        "content": "<p>If you do work on Galois theory your aim should not just be to prove FTG but to finish the job and get it into mathlib</p>",
        "id": 204286769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052780
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/P11-Galois-Theory\">https://github.com/ImperialCollegeLondon/P11-Galois-Theory</a></p>",
        "id": 204286833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052853
    },
    {
        "content": "<p>You're more than welcome to use that material or add to it. The job is still far from done</p>",
        "id": 204286840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052891
    },
    {
        "content": "<p>Kenny Lau has had some interesting ideas about how to deal with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>⊆</mo><mi>L</mi><mo>⊆</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">K\\subseteq L\\subseteq M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span></p>",
        "id": 204286861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052954
    },
    {
        "content": "<p>He was live streaming a proof of the tower law on Discord last week</p>",
        "id": 204286907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> How much work are Imperial undergrads currently doing on this repository? It looks like the last commit was 24 days ago, but you mentioned Kenny Lau live streaming something last week.</p>",
        "id": 204361084,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595179122
    },
    {
        "content": "<p>Oh, work comes and goes</p>",
        "id": 204361094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595179147
    },
    {
        "content": "<p>Also, if we want to contribute to this project, would it be better for us to push directly to the master branch of the repo, make another branch, or fork the entire repo?</p>",
        "id": 204361097,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595179163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> what do you think?</p>",
        "id": 204361101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595179173
    },
    {
        "content": "<p>I think it's about time we got some Galois theory in Lean</p>",
        "id": 204361105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595179190
    },
    {
        "content": "<p>sure</p>",
        "id": 204361127,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595179203
    },
    {
        "content": "<p>and I am spread quite thin at the minute, I'm trying to supervise a bunch of summer projects</p>",
        "id": 204361151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595179207
    },
    {
        "content": "<p>Also, is there any kind of written stuff about the organization of the project, what the different files mean, etc?</p>",
        "id": 204361152,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595179212
    },
    {
        "content": "<p>It looks like there's quite a few files with just one or two small theorems in them. Is there some reason for that?</p>",
        "id": 204361163,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595179245
    },
    {
        "content": "<p>Do all of the projects (<a href=\"https://github.com/ImperialCollegeLondon/P11-Galois-Theory/projects\">https://github.com/ImperialCollegeLondon/P11-Galois-Theory/projects</a>) represent things that still need to be done?</p>",
        "id": 204361182,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595179303
    },
    {
        "content": "<p>yeah mainly</p>",
        "id": 204361185,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595179321
    },
    {
        "content": "<p>I assume files like <code>cardinal.lean</code> are intended to be added to the similar-named files in mathlib. Is there any reason not to just turn these into mathlib PRs and remove them from the Galois theory repo?</p>",
        "id": 204361305,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595179482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> In your opinion, what's the best way to understand what's been done so far in the Galois theory project? Like, what are the best files to look at first to get a sense of how it's organized? And what are the next things to do to make progress on the project?</p>",
        "id": 204361968,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595180455
    },
    {
        "content": "<p>what's happening is that I'm slowly making new PR's to mathlib</p>",
        "id": 204386619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595221010
    },
    {
        "content": "<p>for example, <a href=\"https://github.com/leanprover-community/mathlib/pull/3355\">https://github.com/leanprover-community/mathlib/pull/3355</a> has just been merged</p>",
        "id": 204386703,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595221184
    },
    {
        "content": "<p>(tower law)</p>",
        "id": 204386704,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595221194
    },
    {
        "content": "<p>We've started an overleaf document to write up the definitions and theorems that need to be formalized to get the fundamental theorem of galois theory in lean. For now, ask Thomas Browning to get access to the document</p>",
        "id": 204628026,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595389784
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> is it okay if we coordinate with you about this project further in this thread going forward (like, in the next few weeks)?</p>",
        "id": 204628080,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595389839
    },
    {
        "content": "<p>go ahead</p>",
        "id": 204630981,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595394698
    },
    {
        "content": "<p>Are we including particular applications of Galois theory to number fields? Does mathlib already have Gauss' Lemma and the Eisenstein criterion? If not I think we should include them too, though not strictly necessary for the Galois correspondence.</p>",
        "id": 204870436,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1595552847
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/eisenstein_criterion.html\">https://leanprover-community.github.io/mathlib_docs/ring_theory/eisenstein_criterion.html</a></p>",
        "id": 204870873,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595553431
    },
    {
        "content": "<p>I found this by putting <code>eisenstein</code> in the search bar here <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 204870890,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595553453
    },
    {
        "content": "<p>Anyone interested-in-Galois-theory want to have a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/3568\">#3568</a>? It's always great to have people helping out with the pull-request review process!</p>",
        "id": 205084173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595829762
    },
    {
        "content": "<p>Unfortunately, I'm not super familiar with how these pull requests work. But it will be good to have is_separable in mathlib.</p>",
        "id": 205130396,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1595863040
    },
    {
        "content": "<p>Scott is just suggesting that people look at the code in the link, to see if they have any comments of the form \"why not prove this lemma as well\" or \"this docstring has a typo\" or anything</p>",
        "id": 205131504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595863558
    },
    {
        "content": "<p>Is there anything in mathlib/the imperial repo/our repo showing that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is a finite extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> then every element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is integral over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>?</p>",
        "id": 205307181,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595983285
    },
    {
        "content": "<p>I'm going to try to prove the case of the primitive element theorem of an extension by adjoining two elements today. In case anyone else is working on it. (If someone is, I'm happy to collaborate). Although maybe it will take me more time to finish it</p>",
        "id": 205307839,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595984118
    },
    {
        "content": "<p>I think there's a lot about integrality in mathlib</p>",
        "id": 205324466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596006616
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/7cd1e268ef09e4f24c18b63079ee61f917ce7836/src/ring_theory/integral_closure.lean#L133-L134\">https://github.com/leanprover-community/mathlib/blob/7cd1e268ef09e4f24c18b63079ee61f917ce7836/src/ring_theory/integral_closure.lean#L133-L134</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">is_integral_of_mem_of_fg</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 205326076,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596008049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/205307839\">said</a>:</p>\n<blockquote>\n<p>I'm going to try to prove the case of the primitive element theorem of an extension by adjoining two elements today. In case anyone else is working on it. (If someone is, I'm happy to collaborate). Although maybe it will take me more time to finish it</p>\n</blockquote>\n<p>Lol, this is probably going to take a while actually. But we now have the primitive element theorem for finite fields.</p>",
        "id": 205425389,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596065158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I think we should change the statement of the theorem in <code>root_construction.lean</code> to first define the isomorphism between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F[x]/f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>α</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">F[\\alpha]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span></span></span></span> (where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is the minimal polynomial of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>) and then prove the properties of this isomorphism, for instance that it takes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>.</p>",
        "id": 205533061,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596143413
    },
    {
        "content": "<p>See the changes that I've made to the file for reference</p>",
        "id": 205533092,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596143438
    },
    {
        "content": "<p>Also, something is messed up with the statement of <code>primitive_element_inf_aux</code> in <code>primitive_element.lean</code>. The statement being proved by induction is not strong enough to carry out the induction. We should be quantifying over the field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> after quantifying over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> instead of before. But when I try to do this I run into the problem that Lean no longer knows how to do the type inferences correctly, which is quite annoying. For more details, see <a href=\"#narrow/stream/113489-new-members/topic/Problems.20with.20induction.20and.20type.20inference\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Problems.20with.20induction.20and.20type.20inference</a> where I try to turn this into a question that doesn't mention galois theory/etc.</p>",
        "id": 205533972,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596143999
    },
    {
        "content": "<p>Also, I'm starting to think that we should combine all of <code>adjoin_set.lean</code>, <code>adjoin_simple.lean</code> and <code>root_construction.lean</code> into a single <code>adjoin.lean</code> file just to keep things simpler.</p>",
        "id": 205535165,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596144726
    },
    {
        "content": "<p>I'd be happy to combine them, although keeping them separate (for now) has two potential advantages: files don't get too long, and merge conflicts are more rare</p>",
        "id": 205539679,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596147828
    },
    {
        "content": "<p>Okay, let's leave them separate for now but consider combining them once they're a bit more complete</p>",
        "id": 205540228,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596148268
    },
    {
        "content": "<p>I've made a change to how the results in adjoin_set and adjoin_simple are stated. The E is now implicit. I think this makes sense since E can always be deduced from what you're adjoining. Now you would write \"adjoin_simple F a\" rather than \"adjoin_simple F E a.\"</p>",
        "id": 205547356,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596155195
    },
    {
        "content": "<p>I've moved stuff to adjoin.lean, so use that rather than adjoin_set.lean or adjoin_simple.lean</p>",
        "id": 205642886,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596230478
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3654\">#3654</a> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 205668596,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596264772
    },
    {
        "content": "<p>Does mathlib have a way to restrict group actions to a subgroup? It seems like it should be there, but I cannot find such a construction.</p>",
        "id": 205862136,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1596500790
    },
    {
        "content": "<p>Not sure, but you will need to assume that the subgroup is stable under the group action</p>",
        "id": 205862509,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596501230
    },
    {
        "content": "<p>What do you mean? I am talking about restricting the acting group, not the set being acted upon</p>",
        "id": 205862671,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1596501401
    },
    {
        "content": "<p>oh right, I see what you mean</p>",
        "id": 205862867,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596501666
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- An action of `α` on `β` and a monoid homomorphism `γ → α` induce an action of `γ` on `β`. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">comp_hom</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_monoid_hom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">mul_action</span> <span class=\"n\">γ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">one_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 205862956,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596501787
    },
    {
        "content": "<p>That might be enough for you, because you can apply it to H-&gt;G</p>",
        "id": 205862961,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596501804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>  How easy is it to transfer facts about adjoining elements to a subfield <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> of a field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, thought of as an algebra map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, to the subfield of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> given by the image of this algebra map? Basically, how easy is it to fill in the sorries in <code>primitive_element_inf</code>?</p>",
        "id": 205982711,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596595282
    },
    {
        "content": "<p>Not super easy. It might be worth constructing an isomorphism, and proving that those properties are preserved by isomorphism.</p>",
        "id": 205986225,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596599719
    },
    {
        "content": "<p>I'll prove the isomorphism in adjoin.lean, since it might come up later as well</p>",
        "id": 205986311,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596599838
    },
    {
        "content": "<p>By the way, if you have time it might be nice to write comments documenting what the different stuff in <code>adjoin.lean</code> is doing.</p>",
        "id": 205986446,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600019
    },
    {
        "content": "<p>but it's not a big deal</p>",
        "id": 205986452,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600034
    },
    {
        "content": "<p>sure. actually, I just realized that this isomorphim doesn't belong in adjoin.lean at all since it doesn't involve adjoining. Where should it go?</p>",
        "id": 205986457,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596600052
    },
    {
        "content": "<p>make a new file for properties of subfields?</p>",
        "id": 205986464,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596600070
    },
    {
        "content": "<p>Sure. Or if you want it can go in <code>primitive_element.lean</code> for now. Either way is fine with me</p>",
        "id": 205986477,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600103
    },
    {
        "content": "<p>Also, I added two lemma statements about the degree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>α</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">F[\\alpha]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span></span></span></span>. Right now they're in <code>primitive_element.lean</code> but if you think we should, they could be moved to <code>adjoin.lean</code></p>",
        "id": 205986542,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600165
    },
    {
        "content": "<p>Also, I'm curious if you have an opinion on how hard they are to prove. One of them says that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is a finite extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is also a finite extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>α</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">F[\\alpha]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span></span></span></span> and the other says that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> is not in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> then the degree strictly decreases.</p>",
        "id": 205986567,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600232
    },
    {
        "content": "<p>One annoying part is that here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is again a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>. Though maybe not so bad here, especially for the first of the lemmas</p>",
        "id": 205986612,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600298
    },
    {
        "content": "<p>well, those are true about any subfields, and I don't expect them to be hard to prove (since we have the power law).</p>",
        "id": 205986675,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596600385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/205986675\">said</a>:</p>\n<blockquote>\n<p>well, those are true about any subfields, and I don't expect them to be hard to prove (since we have the power law).</p>\n</blockquote>\n<p>Yeah, okay I think you're right that it shouldn't make it any more difficult here.</p>",
        "id": 205986744,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600515
    },
    {
        "content": "<p>Actually, maybe I should remove that assumption from the lemma statements</p>",
        "id": 205986757,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600546
    },
    {
        "content": "<p>Just for the first of the two lemmas I mean</p>",
        "id": 205986766,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600578
    },
    {
        "content": "<p>The second doesn't totally make sense without it</p>",
        "id": 205986768,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600586
    },
    {
        "content": "<p>unless you replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo mathvariant=\"normal\">∉</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha \\notin F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo mathvariant=\"normal\">∉</mo></mrow><annotation encoding=\"application/x-tex\">\\alpha \\notin</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span></span></span></span> <code>set.range (algebra.map F E)</code></p>",
        "id": 205986821,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600639
    },
    {
        "content": "<p>the second can also be rephrased as saying that if F and F' are two subfields, and F is a proper subset of F' then the dimension decreases</p>",
        "id": 205986825,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596600648
    },
    {
        "content": "<p>True. Would any of those be useful to have later? Right now those lemmas are only needed to prove the primitive element theorem.</p>",
        "id": 205986849,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600715
    },
    {
        "content": "<p>maybe, but I would guess not for this project</p>",
        "id": 205986954,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596600851
    },
    {
        "content": "<p>Just to let you know that mathlib has subsemirings (bundled) and subrings (unbundled) but we plan on bundling subrings soon (there's a branch bundled-subrings or bundled_subrings) and then I guess the idea would be to bundle subfields, although some people might say that it's better to have subfields as a predicate on subrings</p>",
        "id": 205995714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596612998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/205995714\">said</a>:</p>\n<blockquote>\n<p>Just to let you know that mathlib has subsemirings (bundled) and subrings (unbundled) but we plan on bundling subrings soon (there's a branch bundled-subrings or bundled_subrings) and then I guess the idea would be to bundle subfields, although some people might say that it's better to have subfields as a predicate on subrings</p>\n</blockquote>\n<p>Yeah, we noticed that subgroups were just bundled. I think bundling subfields would be nice, having them as a predicate is also probably fine.</p>",
        "id": 206052429,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596648540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/205982711\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span>  How easy is it to transfer facts about adjoining elements to a subfield <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> of a field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, thought of as an algebra map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, to the subfield of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> given by the image of this algebra map? Basically, how easy is it to fill in the sorries in <code>primitive_element_inf</code>?</p>\n</blockquote>\n<p>One sorry down</p>",
        "id": 206083907,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596665143
    },
    {
        "content": "<p>By the way, if <code>f</code> is a polynomial over <code>F</code> and <code>E</code> is an algebra over <code>F</code>, does mathlib already have a definition of the set of roots of <code>f</code> in <code>E</code>? It's easy to define using <code>polynomial.eval\\2</code> but I'm wondering if it's already done somewhere</p>",
        "id": 206086460,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596667046
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 206087070,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596667532
    },
    {
        "content": "<p>Also, do we have anything saying that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>⊆</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">S \\subseteq T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> then <code>adjoin F S</code> is a subset of <code>adjoin F T</code>?</p>",
        "id": 206088223,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596668408
    },
    {
        "content": "<p>No, but I just added it: adjoin.mono</p>",
        "id": 206088666,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596668770
    },
    {
        "content": "<p>Actually, I realized I might not need it. But it might be good to have anyway</p>",
        "id": 206089096,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596669175
    },
    {
        "content": "<p>Finished the last sorry in \"primitive_element_inf\", and I might try to take care of the sorry in \"primitive_element_inf_aux\"</p>",
        "id": 206099806,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596682006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206099806\">said</a>:</p>\n<blockquote>\n<p>Finished the last sorry in \"primitive_element_inf\", and I might try to take care of the sorry in \"primitive_element_inf_aux\"</p>\n</blockquote>\n<p>You mean the one about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> being a separable extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>α</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">F[\\alpha]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span></span></span></span> (I think that's the only one left in that proof)? If so, I made a statement that would suffice in <code>separable.lean</code></p>",
        "id": 206099890,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596682136
    },
    {
        "content": "<p>proved it</p>",
        "id": 206107843,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596694039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206107843\">said</a>:</p>\n<blockquote>\n<p>proved it</p>\n</blockquote>\n<p>Nice! Soon the only parts of the primitive element theorem that are left will be the hard parts</p>",
        "id": 206166281,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596732352
    },
    {
        "content": "<p>does \"hard parts\" mean \"parts with mathematical content\"?</p>",
        "id": 206176045,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596736968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206176045\">said</a>:</p>\n<blockquote>\n<p>does \"hard parts\" mean \"parts with mathematical content\"?</p>\n</blockquote>\n<p>More or less.</p>",
        "id": 206176136,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596737017
    },
    {
        "content": "<p>Basically the two sorries in <code>primitive_element_two_inf</code> and <code>primitive_element_two_aux</code> in the code <a href=\"https://github.com/pglutz/galois_theory/blob/master/src/primitive_element.lean\">here</a></p>",
        "id": 206176387,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596737122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> Should we introduce some notation for <code>adjoin</code> and <code>adjoin_simple</code>? It might be nice to be able to write <code>F[\\a]</code> rather than <code>adjoin_simple F \\a</code></p>",
        "id": 206186880,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596742628
    },
    {
        "content": "<p>That does sound like a good idea, I'm still not totally sure about how to correctly introduce notation but I think that trying to introduce notation that conforms to normal mathematical usage will make everything much easier to understand</p>",
        "id": 206188482,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1596743510
    },
    {
        "content": "<p>Okay, I've tried adding notation. You should now be able to write <code>F[\\a]</code> for <code>adjoin_simple F \\a</code> and <code>F[\\a, \\b]</code> for <code>adjoin F {\\a, \\b}</code>. Let me know if the notation ever doesn't work correctly</p>",
        "id": 206197595,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596748383
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> can you take a look at the stuff I added to adjoin.lean <a href=\"https://github.com/pglutz/galois_theory/commit/fe67482bcaf328292e7d095738ee62d2545037ef\">here</a> to make sure it's not redundant/there aren't any other problems with it</p>",
        "id": 206197845,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596748518
    },
    {
        "content": "<p>looks good to me</p>",
        "id": 206200613,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596750179
    },
    {
        "content": "<p>I've tried changing stuff to use the new notation. One thing that is slightly annoying is that you often still need to write <code>(F[a])</code> in situations where you'd rather just write <code>F[a]</code> (e.g. when it is an argument to some other theorem). I imagine that this has to do with how strong the binding power is in the declaration of the notation but I don't know how this stuff works or how to change it effectively.</p>",
        "id": 206201371,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596750668
    },
    {
        "content": "<p>Does it sound reasonable to define <code>F[a, b]</code> as <code>F[a][b]</code> rather than as <code>F[{a, b}]</code>? I think that notation would be a lot easier to define</p>",
        "id": 206209102,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596756062
    },
    {
        "content": "<p>oh, it's kind of cool that now VSCode displays the type of things using the notation <code>F[a]</code></p>",
        "id": 206209235,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596756191
    },
    {
        "content": "<p>It looks like it's not that hard to get notation that does the following: <code>F[a, b, c, d]</code> turns into <code>adjoin_simple (adjoin_simple (adjoin_simple (adjoin_simple F a) b) c) d</code> and so on, for any number of arguments. But I can't figure out how to set up notation so that <code>F[a, b, c, d]</code> turns into <code>adjoin F {a, b, c, d}</code></p>",
        "id": 206210857,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596757745
    },
    {
        "content": "<p>Also it might be nice to have notation for <code>adjoin F S</code>. But if I just define <code>F[S]</code> to be <code>adjoin F S</code> and <code>F[a]</code> to be <code>adjoin_simple F a</code> then lean complains to me that it can't figure out which one to use in which situation.</p>",
        "id": 206210936,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596757817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/205668596\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3654\">#3654</a> <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span></p>\n</blockquote>\n<p>merged</p>",
        "id": 206213167,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596760046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206210857\">said</a>:</p>\n<blockquote>\n<p>It looks like it's not that hard to get notation that does the following: <code>F[a, b, c, d]</code> turns into <code>adjoin_simple (adjoin_simple (adjoin_simple (adjoin_simple F a) b) c) d</code> and so on, for any number of arguments. But I can't figure out how to set up notation so that <code>F[a, b, c, d]</code> turns into <code>adjoin F {a, b, c, d}</code></p>\n</blockquote>\n<p>You could do something hacky where you manually define notation for each possible number of elements</p>",
        "id": 206214308,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596761457
    },
    {
        "content": "<p>The PRs <a href=\"https://github.com/leanprover-community/mathlib/issues/3720\">#3720</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/3717\">#3717</a> which were just made should help make some of our proofs shorter once they are merged. I think we should consider temporarily copying the code from those PRs into our project and removing it once the changes are merged</p>",
        "id": 206279342,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596818083
    },
    {
        "content": "<p>I've added some stuff from those PRs to our code, which we can take out once they are merged.</p>",
        "id": 206281957,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596819467
    },
    {
        "content": "<p>We now have slightly better notation. You should now be able to write just <code>F[a]</code> instead of having to write <code>(F[a])</code> all the time because I have increased the binding power of <code>[</code> in that notation to be <code>std.prec.max_plus</code> (i.e. I've turned the amp to 11)</p>",
        "id": 206326743,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596852940
    },
    {
        "content": "<p>I think I can also probably figure out how to make <code>F[a, b, c]</code> mean <code>adjoin F {a, b, c}</code> but I'm not quite there yet.</p>",
        "id": 206326785,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596852990
    },
    {
        "content": "<p>I think that when proving the PET, we don't need to consider the splitting field of f*g, but just the splitting field of g (since all of the roots of the gcd lie in the splitting field of g).</p>",
        "id": 206336032,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596870536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206336032\">said</a>:</p>\n<blockquote>\n<p>I think that when proving the PET, we don't need to consider the splitting field of f*g, but just the splitting field of g (since all of the roots of the gcd lie in the splitting field of g).</p>\n</blockquote>\n<p>Yeah, I think you're right.</p>",
        "id": 206336089,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596870652
    },
    {
        "content": "<p>By the way, I thought I was close to proving <code>adjoin_dim_lt</code> but I think I need to understand <code>smul_tower</code> better actually. I can't seem to escape wanting to know that if you change the base field to an isomorphic one then the dimension stays the same.</p>",
        "id": 206336156,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596870755
    },
    {
        "content": "<p>The result is reduced to showing that dimension of F[alpha]/F is greater than 1, so why do you need to deal with changing the base field?</p>",
        "id": 206336174,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596870822
    },
    {
        "content": "<p>It seems to me like the crux of the matter is dealing with a basis of cardinality 1.</p>",
        "id": 206336247,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596870948
    },
    {
        "content": "<p>I want to use <code>findim_lt</code> from <a href=\"https://github.com/leanprover-community/mathlib/issues/3720\">#3720</a></p>",
        "id": 206336248,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596870959
    },
    {
        "content": "<p>If you use reasoning about the basis directly then it shouldn't be a problem</p>",
        "id": 206336287,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596870978
    },
    {
        "content": "<p>oh I see</p>",
        "id": 206336291,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596870999
    },
    {
        "content": "<p>But I was trying to be clever and use the fact that the dimension of <code>F</code> over itself is 1</p>",
        "id": 206336293,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596871002
    },
    {
        "content": "<p>Maybe I should just do it the other way. But I wanted to avoid dealing with <code>fintype</code></p>",
        "id": 206336296,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596871024
    },
    {
        "content": "<p>Actually, I think I may have just been misunderstanding <code>submodule</code></p>",
        "id": 206336404,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596871299
    },
    {
        "content": "<p>maybe it's not so bad</p>",
        "id": 206336406,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596871304
    },
    {
        "content": "<p>Okay, maybe actually it is lol</p>",
        "id": 206337051,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596872627
    },
    {
        "content": "<p>Instead of copying the code, just make your local mathlib dependency the branch</p>",
        "id": 206353617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596902781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> That's good advice for the future. For now, the PR has been merged so I'll just delete the extra stuff.</p>",
        "id": 206357878,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596910171
    },
    {
        "content": "<p><code>adjoin_findim_lt</code> is done</p>",
        "id": 206374973,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596940503
    },
    {
        "content": "<p>It turned out that mathlib had some lemmas for dealing with linearly indepdent singletons and for singletons which span the whole space.</p>",
        "id": 206374978,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596940546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206374973\">said</a>:</p>\n<blockquote>\n<p><code>adjoin_findim_lt</code> is done</p>\n</blockquote>\n<p>I actually meant <code>adjoin_dim_lt</code></p>",
        "id": 206375913,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596942441
    },
    {
        "content": "<p>I'm thinking about changing the definition for the roots in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> of a polynomial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> to be <code>roots f E</code> rather than the current <code>roots F E f</code>. Does that seem reasonable?</p>",
        "id": 206376980,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596944750
    },
    {
        "content": "<p>Seems reasonable to me</p>",
        "id": 206378959,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596948684
    },
    {
        "content": "<p>We're at 150 commits btw</p>",
        "id": 206380724,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596952267
    },
    {
        "content": "<p>Okay, I changed the definition of <code>roots</code>. You should now write <code>roots f E</code> for the roots of the polynomial <code>f</code> in the field <code>E</code></p>",
        "id": 206401826,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596990645
    },
    {
        "content": "<p>I was just watching Kenny live stream the definition of algebraic closure on the Discord</p>",
        "id": 206407860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597000290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206407860\">said</a>:</p>\n<blockquote>\n<p>I was just watching Kenny live stream the definition of algebraic closure on the Discord</p>\n</blockquote>\n<p>What is the discord?</p>",
        "id": 206407930,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597000365
    },
    {
        "content": "<p>There's a Xena project discord server. Kenny is live streaming Galois theory with some other Imperial undergraduates</p>",
        "id": 206407948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597000409
    },
    {
        "content": "<p><a href=\"https://discord.gg/cNGnzX\">https://discord.gg/cNGnzX</a></p>",
        "id": 206407996,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597000456
    },
    {
        "content": "<p>I'm not at a computer right now so can't generate an invite</p>",
        "id": 206407998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597000457
    },
    {
        "content": "<p>I'm going to turn this invite off in a few days</p>",
        "id": 206408005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597000482
    },
    {
        "content": "<p>this invite link expires in 1 day</p>",
        "id": 206408018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597000506
    },
    {
        "content": "<p>just like any other</p>",
        "id": 206408022,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597000510
    },
    {
        "content": "<p>Oh ok the link on my Twitter never expired but I just removed it from my bio</p>",
        "id": 206408083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597000596
    },
    {
        "content": "<p>We have finished proving the primitive element theorem!</p>",
        "id": 206440068,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597049681
    },
    {
        "content": "<p><a href=\"https://github.com/pglutz/galois_theory/blob/5b8a97dd884568aa76d0cb40a99df7b8ab92cb29/src/primitive_element.lean#L622\">https://github.com/pglutz/galois_theory/blob/5b8a97dd884568aa76d0cb40a99df7b8ab92cb29/src/primitive_element.lean#L622</a></p>",
        "id": 206440096,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597049722
    },
    {
        "content": "<p>Nice! You should get it into mathlib! This is like saying you proved a theorem on paper but couldn't be bothered to write it up properly. In a year's time you have lost the piece of paper, and your code doesn't compile any more with mathlib master</p>",
        "id": 206455321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597063004
    },
    {
        "content": "<p>Mathlib master gets fixed when breaking changes to mathlib are made</p>",
        "id": 206455345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597063028
    },
    {
        "content": "<p>And lean 4 mathlib will initially use automation to transfer lean 3 statements over</p>",
        "id": 206455367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597063060
    },
    {
        "content": "<p>So your proof is guaranteed to live</p>",
        "id": 206455375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597063070
    },
    {
        "content": "<p>I'm sure this was your plan anyway but years of experience of my own mistakes in this matter have made me very vocal in making sure that others don't make the same mistakes as I do</p>",
        "id": 206455465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597063135
    },
    {
        "content": "<p>Do you have any advice about how we should go about getting it into mathlib? We were planning to make a series of smaller PRs</p>",
        "id": 206472098,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597072298
    },
    {
        "content": "<p>Basically, there are some smaller lemmas which might have good homes in mathlib, but apart from that there are two big files (adjoin.lean and primitive_element.lean) which would probably need to stay as their own files. (Just general info for someone answering your question Patrick).</p>",
        "id": 206472263,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597072387
    },
    {
        "content": "<p>The goal with splitting up PRs is to make them easier to review</p>",
        "id": 206479360,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597075811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206455465\">said</a>:</p>\n<blockquote>\n<p>I'm sure this was your plan anyway but years of experience of my own mistakes in this matter have made me very vocal in making sure that others don't make the same mistakes as I do</p>\n</blockquote>\n<p>As a collaborator on some of Kevin's mistakes, I can only add my voice to his: PR before it's too late or you'll only have regrets and dead code.</p>",
        "id": 206494404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597083711
    },
    {
        "content": "<p>PR's of the form \"here are some random additions to random mathlib files\" are fine, and if they are short then they are often not hard to review. PR's of the form \"here is one big new standalone file\" are probably also preferred to monster PR's which achieve one big goal by making lots of changes to lots of files.</p>",
        "id": 206520365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597098085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> <span class=\"user-mention\" data-user-id=\"304588\">@Rahul Dalal</span> As I mentioned last week, I can't go to our regular meeting tomorrow. We can either reschedule to later in the day or I can skip the meeting.</p>",
        "id": 206540186,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597121721
    },
    {
        "content": "<p>Later works for me (I just have office hours 7pm-8pm)</p>",
        "id": 206540487,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597122199
    },
    {
        "content": "<p>How about 5 pm?</p>",
        "id": 206540852,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597122769
    },
    {
        "content": "<p>I think I might also not be able to make it. I am very behind where I wanted to be on some stuff I really need to finish today. Sorry for the very late notice. I was hoping to be done by now.</p>",
        "id": 206621010,
        "sender_full_name": "Rahul Dalal",
        "timestamp": 1597174637
    },
    {
        "content": "<p>Does the adjoin file have anything in it that explicitly states that F[alpha] is a vector space over F? We have that it is an algebra, but I cannot find a statement that it is a vector space and library_search hasn't given me any way to convert something from an algebra over a field to a vector space</p>",
        "id": 206863380,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597349029
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 206865515,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597349976
    },
    {
        "content": "<p><code>vector_space</code> is a class</p>",
        "id": 206865550,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597349988
    },
    {
        "content": "<p>you don't refer to the instances by name</p>",
        "id": 206865582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597349999
    },
    {
        "content": "<p>Lean just figures them out using typeclass inference</p>",
        "id": 206865633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597350005
    },
    {
        "content": "<p>that's ring_theory.adjoin, but the same holds for the field adjoin. Lean should be able to figure it out automatically.</p>",
        "id": 206868899,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597351485
    },
    {
        "content": "<p>What time were we going to meet today? 4pm?</p>",
        "id": 206968565,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597433579
    },
    {
        "content": "<p>that was your suggestion. I'm not sure we ever decided on a time</p>",
        "id": 206969851,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597433996
    },
    {
        "content": "<p>somewhere between 3-5 is best for me</p>",
        "id": 206969957,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597434012
    },
    {
        "content": "<p>(as the starting time for the meeting)</p>",
        "id": 206970015,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597434025
    },
    {
        "content": "<p>though I'm not sure how much we have to talk about</p>",
        "id": 206970100,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597434043
    },
    {
        "content": "<p>I'm still in the middle of grading my final exam, so maybe it's best to hold off until Tuesday at the usual time?</p>",
        "id": 206986175,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597441895
    },
    {
        "content": "<p>sounds good</p>",
        "id": 206987375,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597442818
    },
    {
        "content": "<p>Lean seems to not recognize <a href=\"http://adjoin_root.mk\">adjoin_root.mk</a>, even though I imported ring_theory.adjoin_root; is there something else I need to import?</p>",
        "id": 207079960,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597598374
    },
    {
        "content": "<p>I think it's just <code>adjoin_root (polynomial)</code></p>",
        "id": 207084480,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597604557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306638\">Jordan Brown</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/207079960\">said</a>:</p>\n<blockquote>\n<p>Lean seems to not recognize <a href=\"http://adjoin_root.mk\">adjoin_root.mk</a>, even though I imported ring_theory.adjoin_root; is there something else I need to import?</p>\n</blockquote>\n<p>Explicit error message or it didn't happen.</p>",
        "id": 207085524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597605645
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/adjoin_root.mk\">docs#adjoin_root.mk</a></p>",
        "id": 207085556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597605715
    },
    {
        "content": "<p>Thomas, I think that just gives the resulting ring; I want to use the quotient homomorphism to the ring</p>",
        "id": 207102682,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597633497
    },
    {
        "content": "<p>The error message is \"invalid 'begin-end' expression, ',' expected\", which makes me think that it just does not recognize <a href=\"http://adjoin_root.mk\">adjoin_root.mk</a> at all</p>",
        "id": 207102694,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597633522
    },
    {
        "content": "<p>post the code that gives the message?</p>",
        "id": 207102969,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597633947
    },
    {
        "content": "<p>''' import subfield_stuff<br>\nimport group_theory.subgroup<br>\nimport field_theory.minimal_polynomial<br>\nimport linear_algebra.dimension<br>\nimport linear_algebra.finite_dimensional<br>\nimport ring_theory.adjoin_root<br>\nimport data.zmod.basic<br>\nimport data.polynomial.basic<br>\nimport adjoin</p>\n<p>variables (F : Type<em>) [field F] {E : Type</em>} [field E] [algebra F E] (S : set E)(α : E) (h : is_integral F α)</p>\n<p>lemma adjunction_degree_finite : finite_dimensional F (adjoin_root (minimal_polynomial h)) :=<br>\nbegin<br>\n    let minimal:=minimal_polynomial h,<br>\n    let degree:=polynomial.nat_degree minimal,<br>\n    let x:polynomial F:= polynomial.X,<br>\n    let S:= {n: ℕ| n&lt;degree},<br>\n    let η := λ n:S, adjoin_root.​mk (x^(n:ℕ)),<br>\n    sorry<br>\nend'''</p>",
        "id": 207104359,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597635915
    },
    {
        "content": "<p>(I intend to just add it to adjoin itself eventually, but that should not affect this particular issue)</p>",
        "id": 207104446,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597636065
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 207108765,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597643152
    },
    {
        "content": "<p>That error means you've made a syntax error, not that lean doesn't recognise some definition or theorem</p>",
        "id": 207115961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597651009
    },
    {
        "content": "<p>But code posted without backticks is hard to read because all the _ and * get initerpreted as syntax highlighting</p>",
        "id": 207116012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597651080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> Are you sure that you want to be using <a href=\"http://adjoin_root.mk\">adjoin_root.mk</a> (x^n) here? <a href=\"http://adjoin_root.mk\">adjoin_root.mk</a> (x^n) seems like it would give the ring homomorphism F[x] -&gt; F[x]/(x^n) which I don't think is what you want. Also, one issue might be that lean can't figure out the field/ring that you are working over when you write <code>let η := λ n:S, adjoin_root.​mk (x^(n:ℕ))</code></p>",
        "id": 207167504,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597682898
    },
    {
        "content": "<p>Ah yes, it seems like it works if I specify the polynomial I am taking the quotient of before applying the function to x^n</p>",
        "id": 207213667,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597712029
    },
    {
        "content": "<p>And thanks for the reminders about backticks, I seem to always forget how to use them correctly</p>",
        "id": 207213714,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597712071
    },
    {
        "content": "<p>Ok, I've removed the subfield assumption from primitive_element_two_inf_key</p>",
        "id": 207358797,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597797022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> What's next in the quest for subfield removal?</p>",
        "id": 207358811,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597797039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/207358811\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> What's next in the quest for subfield removal?</p>\n</blockquote>\n<p>I'll push the stuff from the other branch. Also, I had another idea about this. Maybe instead of (or in addition to) having stuff about the isomorphism between F and its image we could (1) show that <code>ulift F</code> is an isomorphism and (2) show that everything in the statement of the primitive element theorem is invariant under isomorphism</p>",
        "id": 207362111,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597800963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Okay, I've pushed the stuff I did</p>",
        "id": 207362768,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597802040
    },
    {
        "content": "<p>I think it still needs some cleaning up though</p>",
        "id": 207362808,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597802050
    },
    {
        "content": "<p>and if it's okay with you, I would prefer to make <code>adjoin_simple_is_separable</code> it's own lemma</p>",
        "id": 207362812,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597802073
    },
    {
        "content": "<p>maybe in the <code>adjoin.lean</code> file</p>",
        "id": 207362815,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597802083
    },
    {
        "content": "<p>sure, go for it</p>",
        "id": 207363495,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597803068
    },
    {
        "content": "<p>hmmm, I think replacing <code>my_roots</code> with <code>(f.map (algebra_map F E)).roots</code> may actually be a little annoying. But maybe just because I don't really understand how to use <code>finset</code>s.</p>",
        "id": 207367367,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597808543
    },
    {
        "content": "<p>It looks like if <code>s</code> and <code>t</code> are finsets I'm not allowed to do things like <code>s × t → α</code>: Lean complains that it expected <code>s</code> and <code>t</code> to have type <code>Type u</code> but instead they have type <code>finset E</code></p>",
        "id": 207367420,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597808643
    },
    {
        "content": "<p>could you replace <code>my_roots</code> with <code>↑(polynomial.map ϕ f).roots</code> to preserve the type?</p>",
        "id": 207368383,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597810265
    },
    {
        "content": "<p>Lean doesn't seem to understand the type coercion there</p>",
        "id": 207368441,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597810350
    },
    {
        "content": "<p>I've asked a question about this on the new members stream though</p>",
        "id": 207368448,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597810368
    },
    {
        "content": "<p>so I'll see what they say</p>",
        "id": 207368452,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597810376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I have removed all references to <code>my_roots</code> from <code>primitive_element_two_aux</code> (which I've renamed to <code>primitive_element_two_aux'</code> to make the code still compile). If you also change <code>primitive_element_two_inf_key</code> then we can remove <code>my_roots</code> completely.</p>",
        "id": 207375795,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597820232
    },
    {
        "content": "<p>I think I've finished taking out my_roots</p>",
        "id": 207436047,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597857499
    },
    {
        "content": "<p>I propose that we move <code>submodule_restrict_field</code>, <code>adjoin_findim_of_findim</code>, <code>adjoin_findim_of_findim_base</code>, <code>algebra_findim_lt</code>, <code>adjoin_dim_lt</code> and <code>adjoin_inf_of_inf</code> from <code>primitive_element.lean</code> to <code>adjoin.lean</code></p>",
        "id": 207447129,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597863257
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 207449261,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597864262
    },
    {
        "content": "<p>I wonder if we should totally get rid of <code>adjoin_simple</code> and just <code>adjoin.</code> We don't have to write <code>adjoin F {a}</code> everywhere because we can keep the notation <code>F[a]</code>.</p>",
        "id": 207453398,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597866465
    },
    {
        "content": "<p>And we could probably get rid of a bunch of duplicate lemmas</p>",
        "id": 207453415,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597866477
    },
    {
        "content": "<p>It's a little annoying that we have two versions of so many things: one for <code>adjoin</code> and one for <code>adjoin_simple</code></p>",
        "id": 207453480,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597866504
    },
    {
        "content": "<p>although I guess sometimes it's nice to be able to avoid writing <code>{a}</code> when invoking a theorem.</p>",
        "id": 207454393,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597867014
    },
    {
        "content": "<p>I guess that's fair since there is subfield.closure if you want a more general version</p>",
        "id": 207457180,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597868481
    },
    {
        "content": "<p>One question though, how do you plan on handling adjoining two elements? Just as (F[a])[b] ?</p>",
        "id": 207654831,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598027323
    },
    {
        "content": "<p>You can <code>adjoin {a,b}</code> as well</p>",
        "id": 207655654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598027810
    },
    {
        "content": "<p>And the two are not defeq (-;</p>",
        "id": 207655662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598027817
    },
    {
        "content": "<p>Oh nevermind. I thought that Patrick was advocating keeping just adjoin_simple, rather than keeping just adjoin. I totally understand now.</p>",
        "id": 207657591,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598028927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I'm going to be away camping during the next few days, so I won't be able to attend the Tuesday meeting</p>",
        "id": 207740776,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598127856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Okay, let's just skip Tuesday this week then.</p>",
        "id": 207751087,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598148014
    },
    {
        "content": "<p>Sure. By the way, I've pushed an initial chunk to mathlib at <a href=\"https://github.com/leanprover-community/mathlib/issues/3913\">#3913</a><br>\nDo you have permissions to make changes while I'm gone?</p>",
        "id": 207751279,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598148375
    },
    {
        "content": "<p>everyone who asks for mathlib permissions gets permission to push to every non-master branch of mathlib. pushing to the relevant branch is how you update a PR.</p>",
        "id": 207755271,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1598156058
    },
    {
        "content": "<p>Ah, makes sense. That's good to hear.</p>",
        "id": 207755538,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598156544
    },
    {
        "content": "<p>Ok, I've refactored primitive_element  so that the \"same-universe version\" doesn't require subfield_stuff</p>",
        "id": 208403155,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598655128
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> , it looks like Lint failed again on the new notation</p>",
        "id": 208403243,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598655231
    },
    {
        "content": "<p>Actually, I'm not entirely sure why the linter is given an error. The error message is super weird.</p>",
        "id": 208410022,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598664145
    },
    {
        "content": "<p>Also, there isn't any error when I put #lint at the end of the file in my VScode</p>",
        "id": 208411763,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598666942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Yeah, I don't get the lint error at all.</p>",
        "id": 208411901,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598667184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> do you have any idea what could cause this? We're getting a linter error in this pull request: <a href=\"https://github.com/leanprover-community/mathlib/issues/3913\">#3913</a></p>",
        "id": 208411907,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598667210
    },
    {
        "content": "<p>It looks like it has something to do with <code>set.insert</code></p>",
        "id": 208412154,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598667607
    },
    {
        "content": "<p>I don't know anything about the linter and I'm on mobile and can't figure out how to see the output. I would just ask the experts</p>",
        "id": 208421302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598684999
    },
    {
        "content": "<p>hah I've now looked at the output. Yeah, you broke the linter :-) You get an achievement! Definitely beyond my pay grade!</p>",
        "id": 208443324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598720148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I made a comment on github saying that I think to address the problems with notation we should pick one of the brackets <a href=\"http://xahlee.info/comp/unicode_matching_brackets.html\">here</a> to use for field extensions. It's not a great solution and I would be happy to hear alternatives. I would like to avoid something bizarre like <code>F[ (a) ]</code> or <code>F-(a)-</code>. I might be willing to accept <code>F(⟨α⟩)</code> though.</p>",
        "id": 208496505,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598809824
    },
    {
        "content": "<p>I kind of miss just being able to type <code>F[a]</code></p>",
        "id": 208496517,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598809865
    },
    {
        "content": "<p>I think your idea makes the most sense. Some sort of curved bracket would be fine?</p>",
        "id": 208497065,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598810729
    },
    {
        "content": "<p>You could find some exotic unicode square bracket if you want to use <code>F[a]</code>. You can't use <code>[</code> and <code>]</code>, they are already over-used by CS aspects of Lean :-(</p>",
        "id": 208497562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598811384
    },
    {
        "content": "<p>Ok, I've pushed some new brackets</p>",
        "id": 208499720,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598814739
    },
    {
        "content": "<p>This might be a bit out there, but you might consider something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">adjoin</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>Then you could write <code>F {a}</code> (or <code>F{a}</code>) for <code>adjoin F {a}</code></p>",
        "id": 208500044,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598815231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208500044\">said</a>:</p>\n<blockquote>\n<p>This might be a bit out there, but you might consider something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">adjoin</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>Then you could write <code>F {a}</code> (or <code>F{a}</code>) for <code>adjoin F {a}</code></p>\n</blockquote>\n<p>I'm a little worried this could create problems down the line if a field and a set occur as arguments to a theorem and Lean tries to interpret them as a field extension.</p>",
        "id": 208501551,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598817474
    },
    {
        "content": "<p>That shouldn't be a problem, but the opposite problem might: if you intended to pass a field extension as an argument, but it'll be interpreted as a field and a set as two separate arguments unless you use parentheses: <code>foo (F{a})</code></p>",
        "id": 208501695,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598817634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208497562\">said</a>:</p>\n<blockquote>\n<p>You could find some exotic unicode square bracket if you want to use <code>F[a]</code>. You can't use <code>[</code> and <code>]</code>, they are already over-used by CS aspects of Lean :-(</p>\n</blockquote>\n<p>Surprisingly, <code>F[a]</code> didn't cause any problems (with either compiling mathlib or the linter). It was only discarded because it conflicts with the standard math notation where <code>F(a)</code> should mean adjoining <code>a</code> to <code>F</code> as a field and <code>F[a]</code> should mean adjoining <code>a</code> to <code>F</code> as a ring. The Lean problems actually only came from the notations <code>F(a)</code> and <code>F[(a)]</code></p>",
        "id": 208501759,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598817724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208501695\">said</a>:</p>\n<blockquote>\n<p>That shouldn't be a problem, but the opposite problem might: if you intended to pass a field extension as an argument, but it'll be interpreted as a field and a set as two separate arguments unless you use parentheses: <code>foo (F{a})</code></p>\n</blockquote>\n<p>Yeah, but we set the precedence very high to deal with that, which leads to the other type of problem.</p>",
        "id": 208501772,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598817748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208501772\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208501695\">said</a>:</p>\n<blockquote>\n<p>That shouldn't be a problem, but the opposite problem might: if you intended to pass a field extension as an argument, but it'll be interpreted as a field and a set as two separate arguments unless you use parentheses: <code>foo (F{a})</code></p>\n</blockquote>\n<p>Yeah, but we set the precedence very high to deal with that, which leads to the other type of problem.</p>\n</blockquote>\n<p>With what I was saying, you don't change the precedence of anything, because the notation is simply function application notation.  The instance gives fields an interpretation as a function whose domain is sets of elements to adjoin.</p>",
        "id": 208502055,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598818178
    },
    {
        "content": "<p>It's fine to reject the idea -- I just want to make sure you're rejecting what I'm proposing (it's a solution that uses <code>has_coe_to_fun</code> rather than <code>notation</code>)</p>",
        "id": 208502194,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598818328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Yeah, I think I understand your proposal. It may be reasonable, but I personally find it annoying to have to frequently put parentheses around <code>F{a}</code> and the curly brackets are not typically used in normal math for this kind of thing (although there is a certain appeal to  writing the closure of <code>F</code> and <code>S</code> as the concatenation <code>F S</code>).  This seems to me to be a situation where the ideal option is not available and every alternative has some advantages and disadvantages. I personally favor using unicode variants of the round parentheses, but I'm not sure if that is actually the best choice.</p>",
        "id": 208505011,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598822845
    },
    {
        "content": "<p>With my previous reply I meant that with the precedence set low, <code>F[a]</code> has the same issue you described where you often have to write <code>(F[a])</code> but with the precedence set high, Lean may start thinking that other things mean <code>field extension</code> even when they don't.</p>",
        "id": 208505070,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598822941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> There's something going on in the adjoin file that I just noticed. Remember all those ( _ : set E)'s? Those are actually casting from a subalgebra type to a subset type, I think. So some of the lemmas are equalities of subalgebras (like adjoin_singleton), whereas some of the lemmas are equalities of subsets (like adjoin_adjoin_left).</p>",
        "id": 208506971,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598825884
    },
    {
        "content": "<p>Is there anything bad about this?</p>",
        "id": 208506977,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598825908
    },
    {
        "content": "<p>adjoin_adjoin_left is a little weird because it's basically saying that something of type <code>subalgebra (adjoin F E) E</code> equals something of type <code>subalgebra F E</code> (I think), which is why there's this casting to set E</p>",
        "id": 208506988,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598825961
    },
    {
        "content": "<p>I don't immediately see anything bad about it, but I wouldn't necessarily know if there was. If you know that two things are equal as <code>subalgebra</code>s then presumably you also know they are equal as <code>set</code>s. But in cases where two things can't be equal as <code>subalgebra</code>s for type reasons (as in the case of <code>adjoin_adjoin_left</code> (or <code>adjoin_twice</code> as I still think of it)), it doesn't seem unreasonable to me to instead just prove they are equal as <code>sets</code>s. The main downside that I see is that from a UX perspective it's not great to sometimes have to type <code>( : set E)</code>. But maybe there is a better way to do things that I don't know about.</p>",
        "id": 208507677,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598827299
    },
    {
        "content": "<p>I guess ultimately the hope is to replace all of this stuff with the <code>intermediate_field</code> type? So <code>adjoin F S</code> and <code>adjoin (F S) T</code> can be equal as things of type <code>intermediate_field F E</code>. But I'm not sure if I've understood that correctly.</p>",
        "id": 208507735,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598827440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Now that the basic adjoin lemmas are in mathlib, what's the best plan for refactoring the rest of what we have? I was thinking that it might be a good idea to make a new primitive element theorem file, and copy over the proof in terms of the new mathlib field adjoin, and add any lemmas that we don't have yet.</p>",
        "id": 208832456,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599057079
    },
    {
        "content": "<p>Yeah, that sounds okay. We'll probably need to modify some of the remaining theorems in <code>adjoin.lean</code></p>",
        "id": 208852140,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599064503
    },
    {
        "content": "<p>Also, should we prove that <code>F(a)</code> is equal to <code>\\top</code> in the lattice of subalgebras rather than subsets?</p>",
        "id": 208853444,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599065111
    },
    {
        "content": "<p>I've started a new file in the repo for this purpose</p>",
        "id": 208860462,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599068319
    },
    {
        "content": "<p>Make sure to upgrade mathlib to use it</p>",
        "id": 208860471,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599068329
    },
    {
        "content": "<p>There are still lots of errors also</p>",
        "id": 208860486,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599068337
    },
    {
        "content": "<p>and it seems like we may end up having to write <code>(F(a) : set E)</code> in a lot more places, which is annoying</p>",
        "id": 208860527,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599068365
    },
    {
        "content": "<p>oops, turns out I forgot to <code>git add</code> the new file</p>",
        "id": 208871793,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599073335
    },
    {
        "content": "<p>I'll take a stab at some of the errors</p>",
        "id": 208883847,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599078948
    },
    {
        "content": "<p>Oh, I've also been working on this</p>",
        "id": 208885862,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599079866
    },
    {
        "content": "<p>let me push my changes</p>",
        "id": 208885874,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599079872
    },
    {
        "content": "<p>I've taken care of the first error</p>",
        "id": 208885894,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599079888
    },
    {
        "content": "<p>will this conflict with your stuff?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">last_step</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">β</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">γ</span><span class=\"err\">⟯</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">last_step</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 208885986,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599079926
    },
    {
        "content": "<p>no I don't think so</p>",
        "id": 208886073,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599079986
    },
    {
        "content": "<p>I just pushed</p>",
        "id": 208886116,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080015
    },
    {
        "content": "<p>Try pulling and let me know if there are any problems</p>",
        "id": 208886138,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080025
    },
    {
        "content": "<p>One very annoying thing I've discovered:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">β_in_Fαβ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"err\">⟯</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">subset_adjoin</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">β</span> <span class=\"err\">∅</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_of_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span> <span class=\"n\">β</span> <span class=\"err\">∅</span><span class=\"o\">)),</span>\n</code></pre></div>",
        "id": 208886218,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080047
    },
    {
        "content": "<p>The only way I can see to show that <code>b \\in F(a, b)</code> is pretty long</p>",
        "id": 208886271,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080077
    },
    {
        "content": "<p>It would only get worse for <code>c \\in F(a, b, c)</code></p>",
        "id": 208886307,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080091
    },
    {
        "content": "<p>oh dear</p>",
        "id": 208886321,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599080098
    },
    {
        "content": "<p>Not sure what to do about it though</p>",
        "id": 208886322,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080098
    },
    {
        "content": "<p>Also, I'm having to write <code>(F(a) : set E)</code> everywhere</p>",
        "id": 208886596,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080212
    },
    {
        "content": "<p>If you are fine with underscores:<br>\n<code>have β_in_Fαβ : β ∈ F⟮α, β⟯ := field.subset_adjoin F _ (set.mem_insert_of_mem α _),</code></p>",
        "id": 208886712,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599080268
    },
    {
        "content": "<p>It's definitely a bit better</p>",
        "id": 208887049,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080406
    },
    {
        "content": "<p>The whole thing where <code>F(a, b)</code> doesn't mean <code>adjoin F {a, b}</code> is kind of irritating though</p>",
        "id": 208887093,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080429
    },
    {
        "content": "<p>I really wish we could get notation that did that</p>",
        "id": 208887117,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080447
    },
    {
        "content": "<p>we haven't asked on maths about this yet have we?</p>",
        "id": 208887197,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599080487
    },
    {
        "content": "<p>there might be some foldr guru who knows how to do it</p>",
        "id": 208887293,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599080523
    },
    {
        "content": "<p>Yeah, that's a good idea</p>",
        "id": 208887348,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080540
    },
    {
        "content": "<p>Do you want to, or should I?</p>",
        "id": 208887853,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080817
    },
    {
        "content": "<p>I can do it if you want</p>",
        "id": 208887905,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599080855
    },
    {
        "content": "<p>sure</p>",
        "id": 208889108,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081408
    },
    {
        "content": "<p>done. feel free to add anything.</p>",
        "id": 208889332,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599081523
    },
    {
        "content": "<p>Okay, I think after my push just now, all the sorries in <code>new_primitive_element.lean</code> represent theorems that are not yet included in mathlib's <code>field_theory.adjoin</code> (and there are no more errors)</p>",
        "id": 208889378,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081566
    },
    {
        "content": "<p>still, a number of things got uglier :(</p>",
        "id": 208889399,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081575
    },
    {
        "content": "<p>the separable lemma (and maybe others?) doesn't really belong in field_theory.adjoin since it's much more general</p>",
        "id": 208889573,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599081679
    },
    {
        "content": "<p>Yeah, for sure</p>",
        "id": 208889595,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081691
    },
    {
        "content": "<p>I just meant that all the sorries represent things not yet in mathlib</p>",
        "id": 208889625,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081709
    },
    {
        "content": "<p>sure</p>",
        "id": 208889685,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599081724
    },
    {
        "content": "<p>because currently <code>new_primitive_element</code> only imports from mathlib</p>",
        "id": 208889703,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081733
    },
    {
        "content": "<p>also, I changed all the statements to be showing that <code>F(a)</code> is equal to <code>top</code> as subalgebras rather than subsets of E</p>",
        "id": 208889750,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081772
    },
    {
        "content": "<p>not sure how you feel about that</p>",
        "id": 208889757,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081778
    },
    {
        "content": "<p>It doesn't seem to make anything harder</p>",
        "id": 208889776,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081796
    },
    {
        "content": "<p>By the way, it doesn't seem like we use <code>ne_zero_of_ne_zero</code></p>",
        "id": 208890147,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599082042
    },
    {
        "content": "<p>hmm, that might be true</p>",
        "id": 208890788,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599082452
    },
    {
        "content": "<p>It was probably used at some point and then the proof was changed</p>",
        "id": 208890814,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599082467
    },
    {
        "content": "<p>What's the best way to incorporate the new notation? Should we make a branch? If so, is it possible for both of us to contribute to the branch?</p>",
        "id": 208893418,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599083899
    },
    {
        "content": "<p>A branch of mathlib or a branch of the galois theory repo?</p>",
        "id": 208893454,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083926
    },
    {
        "content": "<blockquote>\n<p>If so, is it possible for both of us to contribute to the branch?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 208893475,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083940
    },
    {
        "content": "<p>of mathlib</p>",
        "id": 208893496,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599083954
    },
    {
        "content": "<p>Yeah, that sounds reasonable</p>",
        "id": 208893514,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083969
    },
    {
        "content": "<p>make a branch of mathlib, push it to the mathlib github and I can get it</p>",
        "id": 208893545,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083990
    },
    {
        "content": "<p>but don't make a PR yet</p>",
        "id": 208893558,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083999
    },
    {
        "content": "<p>will do</p>",
        "id": 208893655,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599084036
    },
    {
        "content": "<p>does \"don't make a PR yet\" mean: use \"git push\" rather than \"git push origin\"?</p>",
        "id": 208893763,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599084100
    },
    {
        "content": "<p>Pushing shouldn't change. Just don't make a pull request on mathlib</p>",
        "id": 208893866,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084135
    },
    {
        "content": "<p>a pull request is a request to merge the branch with the master branch</p>",
        "id": 208893897,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084151
    },
    {
        "content": "<p>the first time you push you should do <code>git push -u origin name_of_branch_goes_here</code> and in subsequent times you should only need to do <code>git push</code></p>",
        "id": 208893966,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084191
    },
    {
        "content": "<p>as usual</p>",
        "id": 208893971,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084195
    },
    {
        "content": "<p>but that doesn't have anything to do with making a PR</p>",
        "id": 208894007,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084211
    },
    {
        "content": "<p>what step of this process (<a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a>) is the request to merge? Is it the \"Visit mathlib on GitHub to see an invitation to open a PR based on what you just did\" step?</p>",
        "id": 208894019,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599084223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208893866\">said</a>:</p>\n<blockquote>\n<p>Pushing shouldn't change. Just don't make a pull request on mathlib</p>\n</blockquote>\n<p>I meant github not mathlib</p>",
        "id": 208894038,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208894019\">said</a>:</p>\n<blockquote>\n<p>what step of this process (<a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a>) is the request to merge? Is it the \"Visit mathlib on GitHub to see an invitation to open a PR based on what you just did\" step?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 208894104,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084249
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 208894135,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599084270
    },
    {
        "content": "<p>I guess I understand why it's confusing if you're just looking at those instructions</p>",
        "id": 208894193,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084309
    },
    {
        "content": "<p>\"Pull request\" is a term in version control and on github it only happens when you click the button on github that says \"Pull Request\" (or something like that)</p>",
        "id": 208894375,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084418
    },
    {
        "content": "<p>Ok, I think that there should be a \"primitive_element_theorem\" branch now</p>",
        "id": 208895002,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599084819
    },
    {
        "content": "<p>Yeah, I see it</p>",
        "id": 208896976,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599086001
    },
    {
        "content": "<p>Is there any way we could get <code>F(a)(b)</code> to have a coercion to type <code>subalgebra F E</code>?</p>",
        "id": 208898256,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599086881
    },
    {
        "content": "<p>I was hoping for the same thing</p>",
        "id": 208899322,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599087656
    },
    {
        "content": "<p>basically, you need <code>subalgebra F(a) E</code> to have a coercion to <code>subalgebra F E</code></p>",
        "id": 208899365,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599087690
    },
    {
        "content": "<p>that sounds doable, I think</p>",
        "id": 208899375,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599087696
    },
    {
        "content": "<p>but it's not already in mathlib?</p>",
        "id": 208899562,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599087838
    },
    {
        "content": "<p>oh wait, dumb question probably</p>",
        "id": 208899619,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599087858
    },
    {
        "content": "<p>well, if you know <code>E</code> and <code>L</code> are <code>F</code> algebras and <code>K</code> is a subalgebra of <code>E</code> over <code>L</code> then does mathlib already know <code>K</code> is also a subalgebra of <code>E</code> over <code>F</code>?</p>",
        "id": 208899715,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599087956
    },
    {
        "content": "<p>(assuming that L is an algebra over F)?</p>",
        "id": 208899843,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088028
    },
    {
        "content": "<p>\"if you know <code>E</code> and <code>L</code> are <code>F</code> algebras\"</p>",
        "id": 208899952,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088101
    },
    {
        "content": "<p>although I guess we need some compatability condition on the algebra maps</p>",
        "id": 208899990,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088137
    },
    {
        "content": "<p>:/</p>",
        "id": 208900008,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088146
    },
    {
        "content": "<p>for now, I think it's fine to make a special instance for adjoin</p>",
        "id": 208900039,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088170
    },
    {
        "content": "<p>sounds good</p>",
        "id": 208900058,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088183
    },
    {
        "content": "<p>I pushed a new commit to the mathlib branch that removes all sorries except for stuff about being separable and <code>inclusion.whatever</code> stuff. Some of the proofs are pretty ugly though and the induction proof of primitive element theorem for infinite fields is unfathomably slow</p>",
        "id": 209028380,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599166536
    },
    {
        "content": "<p>I realized a bunch of hypotheses of <code>primitive_element_two_aux</code> were not actually being used, so I removed them</p>",
        "id": 209038528,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599173535
    },
    {
        "content": "<p>cool</p>",
        "id": 209041552,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599176404
    },
    {
        "content": "<p>however, a lot of this dimension stuff really should be generalized and put in tower.lean, I think</p>",
        "id": 209041571,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599176423
    },
    {
        "content": "<p>In particular: <code>adjoin_findim_of_findim</code> <code>adjoin_findim_of_findim_base</code></p>",
        "id": 209041625,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599176478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/209041625\">said</a>:</p>\n<blockquote>\n<p>In particular: <code>adjoin_findim_of_findim</code> <code>adjoin_findim_of_findim_base</code></p>\n</blockquote>\n<p>Yeah, that's probably true. Do you want to do it or should I?</p>",
        "id": 209042321,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599177181
    },
    {
        "content": "<p>If you could do it, that would be great. I recently added a vector_space.dim version to field.tower, so it shouldn't be too hard to extract the statements about finite_dimensional from that</p>",
        "id": 209042439,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599177314
    },
    {
        "content": "<p>By the way, we seem to need this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">submodule_restrict_field</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">,</span>\n    <span class=\"n\">zero_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">zero_mem&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">add_mem&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_mem&#39;</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">smul_def</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">is_scalar_tower</span><span class=\"bp\">.</span><span class=\"n\">algebra_map_eq</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">comp_apply</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">smul_def</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">smul_mem&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Saying that a submodule of <code>E</code> as an <code>F(a)</code>-module is also a submodule of <code>E</code> as an <code>F</code>-module. It should also probably be proved in more generality than just adjoin</p>",
        "id": 209042447,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599177322
    },
    {
        "content": "<p>Most of the remaining sorries can be resolved if we just construct a <code>is_scalar_tower F (set.range (algebra_map F E)) E</code> instance, I think</p>",
        "id": 209049900,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599186823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I'm currently not able to compile any lean files in the mathlib branch (the orange bars never go away). Are you experiencing anything similar?</p>",
        "id": 209585999,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599698767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I didn't have that problem but then I pulled your most recent changes and now I do</p>",
        "id": 209589765,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704104
    },
    {
        "content": "<p>Let me try to look into it</p>",
        "id": 209589768,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Try <code>leanproject get-cache</code> from the command line</p>",
        "id": 209589860,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704243
    },
    {
        "content": "<p>For me that seemed to fix the problem</p>",
        "id": 209589869,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704252
    },
    {
        "content": "<p>Not sure why we normally don't have to do that though</p>",
        "id": 209589875,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704261
    },
    {
        "content": "<p>Ohh, it's because you made a change to a pretty basic file.</p>",
        "id": 209589933,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704345
    },
    {
        "content": "<p>So if you don't do <code>get-cache</code> it's trying to recompile everything that depends on that file.</p>",
        "id": 209589939,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704369
    },
    {
        "content": "<p>Normally when we only change <code>primitive_element_theorem.lean</code> it only needs to try to compile that file.</p>",
        "id": 209589970,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704392
    },
    {
        "content": "<p><code>leanproject get-cache</code> updates the oleans files (I think copying from the compiled files from the last successful push to github). And apparently VS Code (or whatever) is smart enough to only recompile files that have changed since the oleans files were last updated</p>",
        "id": 209590036,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704469
    },
    {
        "content": "<p>I think running <code>leanproject hooks</code> will mean that you never have to manually run <code>leanproject get-cache</code> again though</p>",
        "id": 209590051,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704517
    },
    {
        "content": "<p>but I'm not entirely certain about that</p>",
        "id": 209590091,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704525
    },
    {
        "content": "<p>ahhh, that solved it. I was wondering if that was the problem, but I didn't think so because the bottom of my VSCode seemed to indicate that it was only checking the file that I had open.</p>",
        "id": 209590098,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599704564
    },
    {
        "content": "<p>I think to check the file currently open it has to always check all files it depends on for which it doesn't have olean files</p>",
        "id": 209590115,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704605
    },
    {
        "content": "<p>You can always compile the file on the command line with <code>lean --make path/to/file.lean</code> and see how much other stuff lean wanta to compile before it compiles yours</p>",
        "id": 209598697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599717527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Is there anything left to do before making the PR?</p>",
        "id": 210054904,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600113297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210054904\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> Is there anything left to do before making the PR?</p>\n</blockquote>\n<p>Did you ever figure out what the deal was with the \"dangerous instance\"? And did we ever put the contents of <code>primitive_element.lean</code> in some namespace (probably <code>field</code>)?</p>",
        "id": 210055912,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600113774
    },
    {
        "content": "<p>well, I think this is what's going on with the dangerous instance. If it's trying to figure out that E/K is finite dimensional, then it might try to apply that instance, but it can't deduce what the base-field F is, so it could get confused or even get into an infinite loop. I changed the instance to a lemma and used haveI in the one spot where it was needed. If you still wanted to have an instance, then you could have it for subalgebras (so that the base-field can be deduced).</p>",
        "id": 210057131,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600114458
    },
    {
        "content": "<p>we haven't added a namespace yet</p>",
        "id": 210057166,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600114480
    },
    {
        "content": "<p>(field would be fine, I think)</p>",
        "id": 210057204,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600114501
    },
    {
        "content": "<p>Okay, I guess let's add the namespace and then make the PR.</p>",
        "id": 210057582,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600114710
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4153\">#4153</a></p>",
        "id": 210060752,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600116316
    },
    {
        "content": "<p>Unfortunately, there seems to be a conflict already</p>",
        "id": 210061234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600116553
    },
    {
        "content": "<p>is it just that other stuff has been added to tower.lean?</p>",
        "id": 210061453,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600116659
    },
    {
        "content": "<p>It was with <code>tower.lean</code> yes, but I didn't check what exactly</p>",
        "id": 210061615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600116732
    },
    {
        "content": "<p>I'm glancing at it now, and it appears that it might just be that the PR somehow didn't include recent additions to tower.lean</p>",
        "id": 210061688,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600116766
    },
    {
        "content": "<p>I would hope that this can be resolved by just including both</p>",
        "id": 210061916,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600116860
    },
    {
        "content": "<p>you should merge master into your branch maybe?</p>",
        "id": 210062724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600117257
    },
    {
        "content": "<p>Okay, I just merged master into our branch</p>",
        "id": 210063874,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600117949
    },
    {
        "content": "<p>hopefully everything should work okay now</p>",
        "id": 210063887,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600117961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> It looks like the mathlib build failed because of some problem with <code>separable.lean</code>. I tried looking at it and it seems that there is a <code>rw</code> that no longer applies, perhaps because it follows a <code>dsimp</code> and changing mathlib can change what the goal looks like after <code>dsimp</code> (which I believe is why there is a recommendation against using nonterminal <code>simp</code>s and <code>dsimp</code>s without <code>only</code>). Anyway, I can't quickly figure out how to fix it so can you take a look?</p>",
        "id": 210070416,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600122473
    },
    {
        "content": "<p>Also I think some of the formatting in our PR is not consistent with mathlib guidelines as described <a href=\"https://leanprover-community.github.io/contribute/style.html\">here</a>. I think the conventions are also supposed to include putting subgoals within proofs inside brackets (so each <code>have</code> which is not proved in one line should be followed by <code>{...}</code>) which the proof in <code>separable.lean</code> that broke doesn't seem to follow</p>",
        "id": 210070715,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600122686
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 210071020,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600122954
    },
    {
        "content": "<p>Hopefully the separable.lean proofs are fixed now</p>",
        "id": 210071538,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600123405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> It looks like there's a problem with some of the finset stuff. (Line 86 in primitive_element.lean)</p>",
        "id": 210073066,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600124564
    },
    {
        "content": "<p>Do you mind if I take a pass to mathlibify things a bit more?</p>",
        "id": 210073859,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600125179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210073859\">said</a>:</p>\n<blockquote>\n<p>Do you mind if I take a pass to mathlibify things a bit more?</p>\n</blockquote>\n<p>Go for it. That would be great.</p>",
        "id": 210077003,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600127785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210073066\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> It looks like there's a problem with some of the finset stuff. (Line 86 in primitive_element.lean)</p>\n</blockquote>\n<p>Okay, I fixed it. It turned out that a few days ago, <code>polynomial.roots</code> was changed from a <code>finset</code> to a <code>multiset</code></p>",
        "id": 210078268,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600128967
    },
    {
        "content": "<p>I'm surprised that didn't break more stuff</p>",
        "id": 210078303,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600129011
    },
    {
        "content": "<p>pushed some things <a href=\"https://github.com/leanprover-community/mathlib/pull/4153/commits/d07896f26bfeeabb6af5a836e46ed5d2c6281a19\">https://github.com/leanprover-community/mathlib/pull/4153/commits/d07896f26bfeeabb6af5a836e46ed5d2c6281a19</a></p>\n<p>Tried to keep lines from being too long, fixed some indentation, removed some (all?) non-terminal simps, removed <code>field.infinite_of_infinite</code> because you only used it once and this seems ok:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">Fα_inf</span> <span class=\"o\">:</span> <span class=\"n\">infinite</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"err\">⟯</span> <span class=\"o\">:=</span> <span class=\"n\">infinite</span><span class=\"bp\">.</span><span class=\"n\">of_injective</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"err\">⟯</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n</code></pre></div>\n\n\n<p>It seems like <code>primitive_element_two_inf_key</code> could stand to be simplified.  Are there any interesting sub-lemmas here?</p>",
        "id": 210082755,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600133979
    },
    {
        "content": "<p>Any reason you didn't use <code>open_locale classical</code> in <code>primitive_element.lean</code>? I switch it to that and it seems to work fine.</p>",
        "id": 210082888,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600134134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210082755\">said</a>:</p>\n<blockquote>\n<p>pushed some things <a href=\"https://github.com/leanprover-community/mathlib/pull/4153/commits/d07896f26bfeeabb6af5a836e46ed5d2c6281a19\">https://github.com/leanprover-community/mathlib/pull/4153/commits/d07896f26bfeeabb6af5a836e46ed5d2c6281a19</a></p>\n<p>Tried to keep lines from being too long, fixed some indentation, removed some (all?) non-terminal simps, removed <code>field.infinite_of_infinite</code> because you only used it once and this seems ok:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">Fα_inf</span> <span class=\"o\">:</span> <span class=\"n\">infinite</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"err\">⟯</span> <span class=\"o\">:=</span> <span class=\"n\">infinite</span><span class=\"bp\">.</span><span class=\"n\">of_injective</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"err\">⟯</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n</code></pre></div>\n\n\n<p>It seems like <code>primitive_element_two_inf_key</code> could stand to be simplified.  Are there any interesting sub-lemmas here?</p>\n</blockquote>\n<p>Thanks Kyle! We've thought about trying to break off some sublemmas from primitive_element_two_inf_key, but I haven't had much success.</p>",
        "id": 210083267,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600134664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210082888\">said</a>:</p>\n<blockquote>\n<p>Any reason you didn't use <code>open_locale classical</code> in <code>primitive_element.lean</code>? I switch it to that and it seems to work fine.</p>\n</blockquote>\n<p>I don't recall, maybe <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> did that? It could have been because it was faster at some point.</p>",
        "id": 210083723,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600135247
    },
    {
        "content": "<p>Just wanting to make sure I didn't break anything by changing it!</p>",
        "id": 210084588,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600136400
    },
    {
        "content": "<p>Looks like bundled subfields and <code>intermediate_field</code> are coming soon: <a href=\"https://github.com/leanprover-community/mathlib/issues/4159\">#4159</a></p>",
        "id": 210206885,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600214206
    },
    {
        "content": "<p>Looking forward to it. There was plenty of stuff that would be far less painful with the intermediate_field type.</p>",
        "id": 210209905,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600216591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Is there anything I can do to help address the comments on the PR? I'm not sure what you've already done at this point.</p>",
        "id": 210353533,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600325545
    },
    {
        "content": "<p>I'm taking care of the splitting one now. Then there's just two left: the long lines one (which should be easy to finish off), and the eval one.</p>",
        "id": 210412790,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600359196
    },
    {
        "content": "<p>I'm not so sure that the eval one is a good idea. There are two places where there is an eval involving f, and in one it's a plain eval and in the other it's an eval2.</p>",
        "id": 210413800,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600359671
    },
    {
        "content": "<p>I'll give it a try though and see how it looks</p>",
        "id": 210413838,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600359696
    },
    {
        "content": "<p>There's also a new small merge conflict to sort out</p>",
        "id": 210424716,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600364708
    },
    {
        "content": "<p>Yeah, it's because the bundled subfield got merged. I vote that for now we simply change <code>import field_theory.subfield</code> to <code>import deprecated.subfield</code> and deal with incorporating bundled subfields later (probably after intermediate_field has been merged)</p>",
        "id": 210425072,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600364859
    },
    {
        "content": "<p>That would be fine for now I think</p>",
        "id": 210425244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600364916
    },
    {
        "content": "<p>You could promise the switch in a later PR maybe</p>",
        "id": 210425291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600364936
    },
    {
        "content": "<p>I did one of these refactors and after a while you can just fix file after file because you know what's broken and how to fix it quite generally</p>",
        "id": 210425360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600364972
    },
    {
        "content": "<p>Okay, I've tried to merge with the master branch of mathlib. Fingers crossed that nothing else breaks</p>",
        "id": 210465403,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600386918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> It looks like your fingers weren't crossed enough</p>",
        "id": 210469507,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600391128
    },
    {
        "content": "<p>Lol, I'm doing something else at the moment but I'll take a look to see what I messed up in a bit</p>",
        "id": 210472488,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600394961
    },
    {
        "content": "<p>It looks like you lost some functions from <code>field_theory/subfield</code> because the file moved due to the deprecation.  It was surprisingly hard figuring that out from git...</p>",
        "id": 210475190,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600398777
    },
    {
        "content": "<p>Ooops... hopefully you can fix it by importing <code>deprecated.is_subfield</code>.</p>",
        "id": 210475252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600398849
    },
    {
        "content": "<p>Yeah, I just realized that too. Specifically <code>is_subfield.pow_mem</code></p>",
        "id": 210475257,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600398853
    },
    {
        "content": "<p>(And don't worry about \"deprecated\". They will be \"undeprecated\" in a week or 2.)</p>",
        "id": 210475260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600398869
    },
    {
        "content": "<p>Still, you might want to move some things over to bundled <code>subfield</code> if that is a more natural way of stating things.</p>",
        "id": 210475324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600398907
    },
    {
        "content": "<p>The problem is that <code>is_subfield.pow_mem</code> is not in <code>deprecated/subfield</code> because we added it in our PR but it wasn't there when Anne moved <code>subfield.lean</code> to <code>deprecated/subfield.lean</code></p>",
        "id": 210475326,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600398907
    },
    {
        "content": "<p>Aha</p>",
        "id": 210475339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600398918
    },
    {
        "content": "<p>But it should be easy enough to fix</p>",
        "id": 210475341,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600398921
    },
    {
        "content": "<p>The tricky part was when I merged with master VS Code wanted to compile everything and that basically always crashes my computer</p>",
        "id": 210475358,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600398951
    },
    {
        "content": "<p>I'm in the middle of fixing it</p>",
        "id": 210475359,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600398952
    },
    {
        "content": "<p>so it was easier to just push to origin and wait for it to get compiled there and then run <code>leanproject get-cache</code></p>",
        "id": 210475406,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600398981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210475358\">said</a>:</p>\n<blockquote>\n<p>The tricky part was when I merged with master VS Code wanted to compile everything and that basically always crashes my computer</p>\n</blockquote>\n<p>Yup, when the merge is ugly, I quit VS Code before it goes crazy, and I do the merge in another editor like Vim.</p>",
        "id": 210475415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600399001
    },
    {
        "content": "<p>Fixing the conflict itself was not so bad (though I missed that subtlety about <code>is_subfield.pow_mem</code>) but checking for errors is annoying</p>",
        "id": 210475434,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600399046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210475324\">said</a>:</p>\n<blockquote>\n<p>Still, you might want to move some things over to bundled <code>subfield</code> if that is a more natural way of stating things.</p>\n</blockquote>\n<p>Anne claimed that <code>intermediate_field</code> is coming soon so I think we'll wait for that before porting everything</p>",
        "id": 210475448,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600399081
    },
    {
        "content": "<p>Doing a merge when files are moved around is also tricky, so I'm not surprised you lost <code>is_subfield.pow_mem</code>!</p>",
        "id": 210475523,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600399160
    },
    {
        "content": "<p>Honestly I just forgot that it was in one of the files that got changed</p>",
        "id": 210475595,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600399231
    },
    {
        "content": "<p>I probably actually should have fixed the merge conflict in an editor besides VS Code. I was probably less careful than I should have been because I didn't want to keep VS Code open too long in case it ate up all my memory</p>",
        "id": 210475657,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600399335
    },
    {
        "content": "<p>By the way, thanks for all the help Kyle!</p>",
        "id": 210475698,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600399428
    },
    {
        "content": "<p>Merging is usually better when files stay put because the diff will make sure you see the differences within a file.  I've just found it relies on one's own memory a bit too much in cases like this.</p>",
        "id": 210475741,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600399453
    },
    {
        "content": "<p>Pushed the change</p>",
        "id": 210475743,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600399457
    },
    {
        "content": "<p>I think I last touched <code>is_subfield.pow_mem</code> to shorten the line lengths, and yet I forgot it was a thing.  I was going through the last week of mathlib changes seeing when it was removed before I realized...</p>",
        "id": 210475777,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600399545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <a href=\"#narrow/stream/113488-general/topic/deprecated.20is_sub*\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/deprecated.20is_sub*</a></p>",
        "id": 210586747,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600473474
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 210587252,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600474018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I shortened the proof of <code>primitive_element</code> a bit. Along the way, I had to add a lemma saying that <code>adjoin F S</code> is equal to <code>set.range (algebra_map (adjoin F S) E)</code> as subsets of <code>E</code>, or in other words, that <code>adjoin F S</code> is equal to <code>(\\bot : subalgebra (adjoin F S) E)</code> as subsets of <code>E</code>, which turned out to be not quite as trivial as I had imagined (perhaps due to my own ignorance)</p>",
        "id": 210592013,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600480832
    },
    {
        "content": "<p>I'm going to take a look at <code>primitive_element_inf</code> next</p>",
        "id": 210592079,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600480941
    },
    {
        "content": "<p>I just pushed some changes. Mainly I shortened the proof of <code>primitive_element_inf</code>. I also added two little lemmas to <code>adjoin.lean</code> saying that if <code>F(x)</code> has dimension 1 over <code>F</code> for every <code>x : E</code> then <code>F = E</code>. I also made the variable <code>F</code> implicit in some of the lemmas in <code>adjoin.lean</code> that deal with dimension.</p>",
        "id": 210600895,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600498102
    },
    {
        "content": "<p><code>primitive_element.lean</code> is now just about 260 lines btw</p>",
        "id": 210601338,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600498982
    },
    {
        "content": "<p>Just pushed a little change adding names for the sections in <code>adjoin.lean</code> and <code>primitive_element.lean</code></p>",
        "id": 210601389,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600499068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Do you think we should change any of the lemmas in <code>primitive_element.lean</code> to <code>private</code>?</p>",
        "id": 210601392,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600499099
    },
    {
        "content": "<p>would it make sense to make anything private if it's a special case of the final theorem?</p>",
        "id": 210625490,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600536210
    },
    {
        "content": "<p>If it really is a special case, then yes.</p>",
        "id": 210625502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600536242
    },
    {
        "content": "<p>But a lot of things that one thinks of as \"auxilliary, implementation detail\" turn out to be useful for others in a follow-up work.</p>",
        "id": 210625555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600536274
    },
    {
        "content": "<p>And then they'll be happy if you didn't make it <code>private</code></p>",
        "id": 210625557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600536285
    },
    {
        "content": "<p>I'm not sure what we gain by making anything private. Why not just put a note in the docstring saying \"don't use this, use this better theorem <code>name_of_tbeorem</code> because...\"?</p>",
        "id": 210629115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600541008
    },
    {
        "content": "<p>Making it private means it won't clutter your autocomplete</p>",
        "id": 210629281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600541172
    },
    {
        "content": "<p>I wonder if most private things would be better as something in a sub-namespace called <code>private</code>.  While it's not the paragon of PL design, that's the Mathematica way at least.  All <code>private</code> does in Lean, if I remember correctly, is mangle names so you can't refer to them outside the namespace.</p>",
        "id": 210629806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600541812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/4180\">#4180</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/4181\">#4181</a>. It seems like <code>intermediate_field</code> is on its way to being merged</p>",
        "id": 210674926,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600621067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I'll take care of the rest of the stuff about findim from the latest round of suggestions, but I might have to do it a little later in the day.</p>",
        "id": 210778065,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600711427
    },
    {
        "content": "<p>I'll try to finish-off the non-findim stuff</p>",
        "id": 210779973,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600712281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I think I've finished refactoring the dimension lemmas. So that should be all the requested changes so far that I know about. I noticed there is also one other \"unresolved\" comment (namely <a href=\"https://github.com/leanprover-community/mathlib/pull/4153#discussion_r492003832\">this one</a>). I think you already took care of it though. Is that correct?</p>",
        "id": 210830177,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600753856
    },
    {
        "content": "<p>I don't think that I've split that one off as a lemma yet.</p>",
        "id": 210832052,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600756322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210832052\">said</a>:</p>\n<blockquote>\n<p>I don't think that I've split that one off as a lemma yet.</p>\n</blockquote>\n<p>Have you done this yet? If not, I can try taking a stab at it.</p>",
        "id": 210903416,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600795361
    },
    {
        "content": "<p>Not yet. I'll have time this afternoon if you haven't done it by then.</p>",
        "id": 210919747,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600802905
    },
    {
        "content": "<p>Okay, I've done it. But now I also want to make a couple other changes to the separability before pushing.</p>",
        "id": 210935097,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600811029
    },
    {
        "content": "<p>Just realized there's an easier way to prove some of the dimension lemmas I added, except that it doesn't work in full generality because the lemmas proving that dimension of vector spaces is preserved by isomorphism are only for vector spaces in the same universe</p>",
        "id": 210936101,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600811597
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 210937827,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600812630
    },
    {
        "content": "<p>I'm working on refactoring primitive_element_two_inf, so don't worry about those comments for now</p>",
        "id": 211045076,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600886413
    },
    {
        "content": "<p>Oh, I recently pushed something removing all the <code>polynomial._</code>'s and I also just finished fixing the style issues (though I haven't pushed yet).</p>",
        "id": 211045980,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600886858
    },
    {
        "content": "<p>should I push the style fixes anyway? They should be easy to merge later if need be</p>",
        "id": 211046016,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600886875
    },
    {
        "content": "<p>I might be doing some major rewriting, so hold off on those</p>",
        "id": 211046118,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600886912
    },
    {
        "content": "<p>actually, if you've already done them</p>",
        "id": 211046144,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600886921
    },
    {
        "content": "<p>then push them</p>",
        "id": 211046160,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600886926
    },
    {
        "content": "<p>and I'll work from there</p>",
        "id": 211046176,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600886941
    },
    {
        "content": "<p>Okay, I just pushed them</p>",
        "id": 211046355,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600887015
    },
    {
        "content": "<p>Let me know if you have any problems when you pull the changes</p>",
        "id": 211046378,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600887030
    },
    {
        "content": "<p>Is it okay if I continue making some changes that don't affect <code>primitive_element_two_inf</code>?</p>",
        "id": 211046871,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600887242
    },
    {
        "content": "<p>Also I can take care of the requested changes to the polynomial lemmas if that's okay with you</p>",
        "id": 211046985,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600887280
    },
    {
        "content": "<p>yeah, that's all fine</p>",
        "id": 211048420,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600887929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I just pushed some changes that address some of the requested changes. I had to make a couple small changes to <code>primitive_element_two_inf</code> but they should be easy to deal with.</p>",
        "id": 211067113,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600898211
    },
    {
        "content": "<p>ok, I've pushed the big refactor.</p>",
        "id": 211072959,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600902397
    },
    {
        "content": "<p>It's been kind of funny to watch the number of lines added move up and down over the course of the PR</p>",
        "id": 211074128,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600903558
    },
    {
        "content": "<p>Hopefully we're close to merging now</p>",
        "id": 211074181,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600903573
    },
    {
        "content": "<p>Btw, the version of the statement of the primitive element theorem that Anne mentioned needing is the same as the thing Jordan is working on right?</p>",
        "id": 211074238,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600903633
    },
    {
        "content": "<p>oh I guess so</p>",
        "id": 211074585,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600903974
    },
    {
        "content": "<p>Why do you need <code>is_subfield.pow_mem</code> in a deprecated file?</p>",
        "id": 211079832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600909336
    },
    {
        "content": "<p>I did a \"remove a deprecated import from a file and then fix the several hundred errors caused by this\" PR once.</p>",
        "id": 211079870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600909397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211079832\">said</a>:</p>\n<blockquote>\n<p>Why do you need <code>is_subfield.pow_mem</code> in a deprecated file?</p>\n</blockquote>\n<p>When I first wrote that lemma the file was not yet deprecated. In fact, it only became deprecated after we first made this PR.</p>",
        "id": 211082873,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600913006
    },
    {
        "content": "<p>And right now I think it doesn't make sense to refactor everything to get rid of <code>is_subfield</code> until <code>intermediate_field</code> gets merged</p>",
        "id": 211082885,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600913040
    },
    {
        "content": "<p>which should happen soon</p>",
        "id": 211082926,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600913055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> did you see Johan's comments on github? What do you think about changing the name of <code>primitive_element</code> to <code>exists_adjoin_simple_eq_top</code>?</p>",
        "id": 211170158,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600971452
    },
    {
        "content": "<p>I saw it. It is a bit of an abomination, but I would be fine with it.</p>",
        "id": 211170804,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600971825
    },
    {
        "content": "<p>Primitive element theorem merged! Well done to all who contributed!</p>",
        "id": 211383646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601155989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Should we make a branch for turning adjoin into intermediate field now?</p>",
        "id": 211384012,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601156672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211384012\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> Should we make a branch for turning adjoin into intermediate field now?</p>\n</blockquote>\n<p>Yeah</p>",
        "id": 211384087,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601156880
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/adjoin_intermediate_field\">https://github.com/leanprover-community/mathlib/tree/adjoin_intermediate_field</a></p>",
        "id": 211519436,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601312306
    },
    {
        "content": "<p>at some point we should show <code>bounded_lattice (intermediate_field K L)</code>, which might require establishing a \"galois connection\" (or something like that) between subsets of L containing K and intermediate fields</p>",
        "id": 211526410,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601315654
    },
    {
        "content": "<p>one issue(?) is that doing so would probably require the use of adjoin, so it would need to be done in adjoin.lean rather than intermediate_field.lean</p>",
        "id": 211526997,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601315911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211526997\">said</a>:</p>\n<blockquote>\n<p>one issue(?) is that doing so would probably require the use of adjoin, so it would need to be done in adjoin.lean rather than intermediate_field.lean</p>\n</blockquote>\n<p>That seems fine to me</p>",
        "id": 211527576,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601316162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211526410\">said</a>:</p>\n<blockquote>\n<p>at some point we should show <code>bounded_lattice (intermediate_field K L)</code>, which might require establishing a \"galois connection\" (or something like that) between subsets of L containing K and intermediate fields</p>\n</blockquote>\n<p>By \"galois connection\" here do you just mean that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>⊂</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">S \\subset T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>⊂</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(S) \\subset L(T)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 211527868,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601316331
    },
    {
        "content": "<p>I'm not sure familiar with it, but I'm looking at ring_theory/algebra.lean, line 1100</p>",
        "id": 211528045,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316425
    },
    {
        "content": "<p>where it does stuff with galois connections and galois insertions to quickly get bounded_lattice</p>",
        "id": 211528074,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316448
    },
    {
        "content": "<p>There's a design decision to be made here</p>",
        "id": 211528183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316498
    },
    {
        "content": "<p>And I'm not sure what the right one is</p>",
        "id": 211528201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316511
    },
    {
        "content": "<p>because I'm unaware of the ramifications</p>",
        "id": 211528216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316521
    },
    {
        "content": "<p>Given a random subset of L. you want to generate a subfield of L containing K. There are two quite different ways to do this.</p>",
        "id": 211528262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316549
    },
    {
        "content": "<p>1) Prove that subfields of L containing K have an <code>Inf</code> (arbitrary intersections) and define the subfield corresponding to S to be the inf of the subfields of L containing K which also contain S</p>",
        "id": 211528385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316605
    },
    {
        "content": "<p>2) Define it the inductive way, so it's an inductively defined carrier (i.e. an inductive predicate) with constructors saying \"k in K is in\", \"if a and b are in then their sum is in\" etc</p>",
        "id": 211528518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316674
    },
    {
        "content": "<p>The advantage of (2) is that you get the recursor for free</p>",
        "id": 211528547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316694
    },
    {
        "content": "<p>But I don't know how important the recursor will be</p>",
        "id": 211528567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316707
    },
    {
        "content": "<p>The advantage of (1) is that it's cheap and it works. I've used it to get to very quick Galois insertion proofs when doing subrings etc</p>",
        "id": 211528651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316737
    },
    {
        "content": "<p>Currently we have <code>adjoin F S</code> which uses ring.closure (I'm not sure which of the two approaches ring.closure uses)</p>",
        "id": 211528676,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316752
    },
    {
        "content": "<p>ah, it looks like it uses the 2nd way</p>",
        "id": 211528697,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316766
    },
    {
        "content": "<p>Oh you already have this direction!</p>",
        "id": 211528709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316779
    },
    {
        "content": "<p>yeah</p>",
        "id": 211528729,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316789
    },
    {
        "content": "<p>Are you doing subrings or subfields?</p>",
        "id": 211528736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316792
    },
    {
        "content": "<p>subfields</p>",
        "id": 211528749,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316799
    },
    {
        "content": "<p>And adjoin produces a subfield?</p>",
        "id": 211528764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316808
    },
    {
        "content": "<p>yes, but now an intermediate field</p>",
        "id": 211528773,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316818
    },
    {
        "content": "<p>So this is a different function to the subring adjoin?</p>",
        "id": 211528809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316841
    },
    {
        "content": "<p>yeah, I just said subring closure because I hadn't gone far enough down the rabbit hole</p>",
        "id": 211528890,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316874
    },
    {
        "content": "<p>it's defined in terms of field.closure</p>",
        "id": 211528932,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316898
    },
    {
        "content": "<p>gotcha</p>",
        "id": 211528947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316905
    },
    {
        "content": "<p>I think following the strategy from <code>ring_theory.algebra</code> and proving that there is a galois connection between <code>field.adjoin</code> and <code>coe</code> seems reasonable</p>",
        "id": 211529912,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601317366
    },
    {
        "content": "<p>Btw, <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>, I just sent Anne a message asking if they have already done any work on refactoring <code>field_theory/adjoin</code></p>",
        "id": 211530431,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601317610
    },
    {
        "content": "<p>I also just asked in the <code>is there code for X?</code> stream about whether mathlib already proves anything like what Jordan is working on (the dimension and basis of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">F[x]/p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span></span></span></span>)</p>",
        "id": 211531109,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601317936
    },
    {
        "content": "<p>Just proved the complete_lattice</p>",
        "id": 211531144,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601317954
    },
    {
        "content": "<p>It wasn't too bad</p>",
        "id": 211531150,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601317957
    },
    {
        "content": "<p>It will probably speed-up/obsolete some other lemmas we have in adjoin.lean</p>",
        "id": 211531199,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601317985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> presumably we should no longer import <code>deprecated/subfield</code> in <code>field_theory/adjoin</code>?</p>",
        "id": 211532090,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601318429
    },
    {
        "content": "<p>yeah, we need to get rid of that import</p>",
        "id": 211532124,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601318455
    },
    {
        "content": "<p>the problem is that closure is defined in that file</p>",
        "id": 211532149,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601318468
    },
    {
        "content": "<p>oh, then I guess we need to port closure over to the new <code>subfield</code> file?</p>",
        "id": 211532205,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601318501
    },
    {
        "content": "<p>No, wait, the new <code>subfield</code> also has some version of closure</p>",
        "id": 211532322,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601318562
    },
    {
        "content": "<p>To me it looks like it should be fine to use the new version of subfield closure</p>",
        "id": 211532573,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601318668
    },
    {
        "content": "<p>Since <code>intermediate_field</code> inherits from both <code>subalgebra</code> and <code>subfield</code> and <code>subfield.closure</code> is already a subfield, I feel like it should be very easy to define <code>field.adjoin</code>. Unfortunately I don't really know how currently</p>",
        "id": 211533177,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601318917
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 211533912,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601319223
    },
    {
        "content": "<p>Okay, I think I found the relevant part of \"Theorem Proving in Lean\" (on inheritance)</p>",
        "id": 211534095,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601319283
    },
    {
        "content": "<p>Hmm, actually that section of \"Theorem Proving in Lean\" is really short</p>",
        "id": 211534502,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601319466
    },
    {
        "content": "<p>I've figured out how to rewrite adjoin in terms of the bundled subfield</p>",
        "id": 211534649,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601319530
    },
    {
        "content": "<p>Ok, it's pushed but there are a bunch of errors</p>",
        "id": 211538977,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601321579
    },
    {
        "content": "<p>I fixed a couple errors. I'll take a more serious look this evening</p>",
        "id": 211539912,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601322088
    },
    {
        "content": "<p>A couple comments</p>",
        "id": 211539921,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601322094
    },
    {
        "content": "<p>a lot of things need to change from <code>field.foo</code> to <code>subfield.foo</code></p>",
        "id": 211539941,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601322109
    },
    {
        "content": "<p>some instances are no longer necessary. Like now <code>adjoin F S</code> is automatically a subfield of <code>E</code> and also a field</p>",
        "id": 211540033,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601322135
    },
    {
        "content": "<p>also, obviously, lots of hypotheses have to change from <code>is_subfield</code> to something else</p>",
        "id": 211540081,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601322163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Have you seen <code>ring_hom.field_range</code>? Also, Anne said they were working on refactoring <code>field.adjoin</code> to use <code>intermediate_field</code> here: <a href=\"https://github.com/leanprover-community/mathlib/blob/Vierkantor-dedekind-domain/src/field_theory/adjoin.lean\">https://github.com/leanprover-community/mathlib/blob/Vierkantor-dedekind-domain/src/field_theory/adjoin.lean</a></p>",
        "id": 211548001,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601325953
    },
    {
        "content": "<p>I haven't seen ring_hom.field_range, but it looks useful.  I presume that we'll merge our refactoring before \"Vierkantor-dedekind-domain\" gets merged, so I guess we should go ahead but try to make our version compatible with theirs?</p>",
        "id": 211548896,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601326398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211548896\">said</a>:</p>\n<blockquote>\n<p>I haven't seen ring_hom.field_range, but it looks useful.  I presume that we'll merge our refactoring before \"Vierkantor-dedekind-domain\" gets merged, so I guess we should go ahead but try to make our version compatible with theirs?</p>\n</blockquote>\n<p>I think we should do whatever seems best, reusing any stuff they already did that seems helpful.</p>",
        "id": 211549340,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601326619
    },
    {
        "content": "<p>But it looks like we can reuse that stuff to immediately fix a number of proofs that got messed up when we stopped importing <code>deprecated/subfield</code></p>",
        "id": 211549581,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601326755
    },
    {
        "content": "<p>Oh, it also looks like we now have a number of problems introduced by trying to use lemmas about the bottom subalgebra in places where we are now really talking about the bottom intermediate field. Should be easy to fix by proving that those two things are equal though, I think. (Or maybe by proving a bunch of lemmas like <code>eq_bot_iff</code> for intermediate_field)</p>",
        "id": 211550045,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601326973
    },
    {
        "content": "<p>shouldn't we just change all bottom subalgebras to bottom intermediate fields?</p>",
        "id": 211552585,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601328402
    },
    {
        "content": "<p>or are there some lemmas that should be stated in terms of the bottom subalgebra?</p>",
        "id": 211552614,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601328428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211552614\">said</a>:</p>\n<blockquote>\n<p>or are there some lemmas that should be stated in terms of the bottom subalgebra?</p>\n</blockquote>\n<p>No, the lemmas should be stated in terms of the bottom intermediate_field I guess. But the proofs are relying on lemmas about the bottom subalgebra so we need some extra lemmas to connect them</p>",
        "id": 211554879,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601329784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I did a little bit more work on refactoring <code>field.adjoin</code> and <code>primitive_element</code>. Here's a couple of comments:</p>",
        "id": 211671281,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407291
    },
    {
        "content": "<p>1) Something weird is going on in the proof of <code>mem_bot_of_adjoin_simple_sub_bot</code>. I left a comment about it in the file</p>",
        "id": 211671406,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407341
    },
    {
        "content": "<p>2) We're missing a bunch of useful little lemmas like <code>ext_iff</code> and <code>eq_top_iff</code> etc for <code>intermediate_field</code> that we had for <code>subalgebra</code>. I think we should consider proving some of them.</p>",
        "id": 211671515,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407392
    },
    {
        "content": "<p>3) For some reason, previously Lean was able to figure out on its own that if <code>E</code> is finite dimensional over <code>F</code> then so is <code>F(x)</code> but now that <code>F(x)</code> is an <code>intermediate_field</code> it can't. I think this has something to do with the coercion from <code>subalgebra</code> to <code>intermediate_field</code></p>",
        "id": 211671742,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407491
    },
    {
        "content": "<p>4) I started to fix the problems in <code>primitive_element</code>. It doesn't look too bad but the proof of <code>primitive_element_two_inf</code> might require some work</p>",
        "id": 211671787,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I just pushed a change to the old galois theory repo to contribute a little bit to <code>degree_of_simple_extension.lean</code>. I left a long-ish comment in the source code, but let me say a little bit here too:</p>",
        "id": 211672021,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407630
    },
    {
        "content": "<p>1) I think the theorem that the dimension of <code>F[x]/p</code> is equal to the degree of <code>p</code> can be proved for all nonzero <code>p</code> (not just ones which are the minimal polynomial of something) so we should probably do that</p>",
        "id": 211672162,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407696
    },
    {
        "content": "<p>2) I left a comment in the source code about one strategy to do this that doesn't use bases (although it's not really fundamentally any different). Basically, I think it might be best to construct a map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mrow><mtext>deg </mtext><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">F^{\\text{deg } p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">deg </span></span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">F[x]/p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span></span></span></span> and then show it's an isomorphism</p>",
        "id": 211672334,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407799
    },
    {
        "content": "<p>3) I tried asking in the <code>Is_there_code_for_X</code> stream about whether stuff like this is already in mathlib and nobody answered <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> . But as Jordan said last week, I don't think it is</p>",
        "id": 211672503,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407857
    },
    {
        "content": "<p>Also, as long as the theorem that the dimension of <code>F[x]/p</code> is equal to the degree of <code>p</code> is really not in mathlib, I think it would make a nice self-contained PR to mathlib</p>",
        "id": 211672748,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211672334\">said</a>:</p>\n<blockquote>\n<p>2) I left a comment in the source code about one strategy to do this that doesn't use bases (although it's not really fundamentally any different). Basically, I think it might be best to construct a map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mrow><mtext>deg </mtext><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">F^{\\text{deg } p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">deg </span></span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">F[x]/p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span></span></span></span> and then show it's an isomorphism</p>\n</blockquote>\n<p>Surely monic polynomials have a division / remainder algorithm? This is what you need I guess.</p>",
        "id": 211673250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601408223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211673250\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211672334\">said</a>:</p>\n<blockquote>\n<p>2) I left a comment in the source code about one strategy to do this that doesn't use bases (although it's not really fundamentally any different). Basically, I think it might be best to construct a map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mrow><mtext>deg </mtext><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">F^{\\text{deg } p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">deg </span></span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">F[x]/p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span></span></span></span> and then show it's an isomorphism</p>\n</blockquote>\n<p>Surely monic polynomials have a division / remainder algorithm? This is what you need I guess.</p>\n</blockquote>\n<p>Yeah, that should go into the proof that the map is surjective.</p>",
        "id": 211674641,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601408883
    },
    {
        "content": "<p>There's <code>div</code> and <code>mod</code> in <code>data.polynomial.field_division</code></p>",
        "id": 211674825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601408962
    },
    {
        "content": "<p>But first I need to actually learn how quotients work in Lean/mathlib to even know the best way to construct the map</p>",
        "id": 211674880,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601408990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211674825\">said</a>:</p>\n<blockquote>\n<p>There's <code>div</code> and <code>mod</code> in <code>data.polynomial.field_division</code></p>\n</blockquote>\n<p>Yeah, that stuff got used in the proof of the primitive element theorem</p>",
        "id": 211674963,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601409017
    },
    {
        "content": "<p>This is the theory for all polys over fields; what you really want is something for monic polys over any comm ring; the quotient R[x]/(p) is free rank deg(p).</p>",
        "id": 211675265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601409175
    },
    {
        "content": "<p>aah there's <code>mod_by_monic</code> in <code>data.polynomial.div</code></p>",
        "id": 211675399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601409244
    },
    {
        "content": "<p><code>div_mod_by_monic_unique</code> is injectivity of the map from (deg &lt; deg(p)) and surjectivity comes from <code>mod_by_monic_add_div</code></p>",
        "id": 211675675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601409386
    },
    {
        "content": "<p>linearity should be easy and now hopefully the library can take it from there</p>",
        "id": 211675707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601409403
    },
    {
        "content": "<p>one thing that's causing some headaches is that there is a partial order defined in intermediate_field.lean, but there is also a partial order coming from the lattice stuff in adjoin.lean</p>",
        "id": 211690227,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601416768
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211690278,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601416803
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211690421,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601416867
    },
    {
        "content": "<p>the issue is that when I try to apply a result like eq_bot_iff, lean seems to have trouble reconciling the partial order defined in intermediate_field.lean with the partial order from the lattice</p>",
        "id": 211690762,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601417043
    },
    {
        "content": "<p>Here's a fun error message</p>",
        "id": 211691031,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601417177
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">eq_bot_iff.mpr</span> <span class=\"n\">adjoin_le_bot</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">adjoin_le_bot</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le.le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.partial_order</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_bot.bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.has_bot</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le.le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_bot.to_partial_order</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.bounded_lattice</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_bot.bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_bot.to_has_bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.bounded_lattice</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 211691044,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601417184
    },
    {
        "content": "<p>produced by the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">adjoin_le_bot</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq_bot_iff</span> <span class=\"o\">(</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">adjoin_le_bot</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 211691148,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601417264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211690762\">said</a>:</p>\n<blockquote>\n<p>the issue is that when I try to apply a result like eq_bot_iff, lean seems to have trouble reconciling the partial order defined in intermediate_field.lean with the partial order from the lattice</p>\n</blockquote>\n<p>Maybe we need to prove they're equal?</p>",
        "id": 211693063,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601418499
    },
    {
        "content": "<p>The weird thing is that the lattice is defined from the partial order defined in intermediate_field.lean</p>",
        "id": 211695791,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601420563
    },
    {
        "content": "<p>ok, I found the issue. There was another bot instance, another top instance, and another bounded_lattice instance that were conflicting with the main complete_lattice instance.</p>",
        "id": 211700571,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601424308
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211700917,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601424543
    },
    {
        "content": "<p>There shouldn't be any diamonds in mathlib and this sounds like a diamond</p>",
        "id": 211735647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601458570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211735647\">said</a>:</p>\n<blockquote>\n<p>There shouldn't be any diamonds in mathlib and this sounds like a diamond</p>\n</blockquote>\n<p>Which part sounds like a diamond?</p>",
        "id": 211789684,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601484883
    },
    {
        "content": "<p>Also is the ban on diamonds by convention or by law (i.e. part of the rules of Lean)?</p>",
        "id": 211789769,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601484924
    },
    {
        "content": "<p>The only time I've seen it mentioned before was in Thomas Hales' blog post on Lean</p>",
        "id": 211789805,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601484943
    },
    {
        "content": "<p>It's a convention. But without it you land in a swamp that you really don't want to get into</p>",
        "id": 211791041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601485532
    },
    {
        "content": "<p>If you have two non defeq partial orders then that's a great example of a diamond</p>",
        "id": 211800836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601490307
    },
    {
        "content": "<p>If mathlib made both of those partial orders then people will want to know about it</p>",
        "id": 211800860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601490325
    },
    {
        "content": "<p>Oh wait, I think I understand what's happening. Anne pointed us to some work they had already done refactoring <code>adjoin.lean</code> which included proving that <code>field.adjoin</code> gives an adjunction. I included this in our version of <code>field_theory/adjoin</code> but Thomas had also already added a proof that <code>field.adjoin</code> forms a galois connection. Both of those things give instances of <code>bounded_lattice</code> I guess.</p>",
        "id": 211804515,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601492127
    },
    {
        "content": "<p>Not sure what the right solution is though</p>",
        "id": 211804562,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601492157
    },
    {
        "content": "<p>If both <code>bounded_lattice</code> instances are equal, can you delete a less-general one?</p>",
        "id": 211807279,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601493502
    },
    {
        "content": "<p>Wait, actually I might be wrong. There seems to be a <code>bounded_lattice</code> instance hanging around in <code>intermediate_field.lean</code> for some reason with no proof (only a sorry). So maybe this was a simple oversight.</p>",
        "id": 211812685,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496217
    },
    {
        "content": "<p>The adjunction is probably fine.</p>",
        "id": 211812714,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> actually the proof of <code>primitive_element_inf_aux</code> turned out to be really easy to fix. I just had to add <code>.to_subalgebra</code> in one place</p>",
        "id": 211812949,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496351
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211813809,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211812685\">said</a>:</p>\n<blockquote>\n<p>Wait, actually I might be wrong. There seems to be a <code>bounded_lattice</code> instance hanging around in <code>intermediate_field.lean</code> for some reason with no proof (only a sorry). So maybe this was a simple oversight.</p>\n</blockquote>\n<p>Oh, it looks like Thomas already took care of this yesterday</p>",
        "id": 211813860,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I think the main thing to do now to get everything to compile is to prove that the bottom and top intermediate_fields are equal to the bottom and top subalgebras</p>",
        "id": 211813977,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496845
    },
    {
        "content": "<p>and then figure out how to get Lean to infer that an intermediate field is finite dimensional if the entire field extension is</p>",
        "id": 211814040,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496885
    },
    {
        "content": "<p>If one of your definitions of &lt;= was \"sorry\" then no wonder Lean was finding it hard to work with :-)</p>",
        "id": 211814054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601496894
    },
    {
        "content": "<p>Yeah, I just didn't even realize that line was there. And it looks like Thomas actually removed it yesterday</p>",
        "id": 211814093,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496921
    },
    {
        "content": "<p>I just hadn't pulled any changes since then</p>",
        "id": 211814116,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496932
    },
    {
        "content": "<p>yeah, I think that the issue is resolved now</p>",
        "id": 211814675,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601497162
    },
    {
        "content": "<p>and there was a sorried lattice instance (which I might have been responsible for... oops)</p>",
        "id": 211814739,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601497192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211813977\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> I think the main thing to do now to get everything to compile is to prove that the bottom and top intermediate_fields are equal to the bottom and top subalgebras</p>\n</blockquote>\n<p>I proved a few lemmas along these lines.</p>",
        "id": 211851647,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601507650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I've fixed the remaining issues, so the branch is ready to pull. Is there anything else that you or I should take a look at before making the PR?</p>",
        "id": 212148817,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601692527
    },
    {
        "content": "<p>Here's one thing: If <code>(K : intermediate_field F E)</code> then should we add coersions (or lift?) from <code>intermediate_field F K</code> and <code>intermediate_field K E</code> to <code>intermediate_field F E</code>?</p>",
        "id": 212184480,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601750381
    },
    {
        "content": "<p>Are the corresponding coercions there for eg submonoid?</p>",
        "id": 212188330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601756628
    },
    {
        "content": "<p>Maybe subalgebra is a better question</p>",
        "id": 212188371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601756656
    },
    {
        "content": "<p>I'm not sure whether or not they are there, but I added them for intermediate_field and it seemed to clean up some stuff.</p>",
        "id": 212247043,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601854793
    },
    {
        "content": "<p>In particular, the end of the proof of the primitive element theorem got a little easier (now working directly with intermediate_fields rather than their carriers)</p>",
        "id": 212247096,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601854837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Is there anything else you want done before the PR?</p>",
        "id": 212247243,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601855132
    },
    {
        "content": "<p>I proved the general induction result, although the proof turned out to be longer than I expected.</p>",
        "id": 212269524,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601885376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Sorry I've been incommunicado the past couple days. I'll take a look at it on Monday and make any changes I think should be made. If for some reason I still haven't responded by the end of the day on Monday, feel free to just go ahead and make the PR</p>",
        "id": 212270798,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601886251
    }
]